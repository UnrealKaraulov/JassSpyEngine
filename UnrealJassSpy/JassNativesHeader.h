#pragma once
#include <Windows.h>
#include <stdio.h>
#include "JassDefineHeader.h"
extern FILE * logfile;
extern char * funcname1;
extern char * funcname2;
typedef int ( __cdecl * AbilityId_FUNC) (CJassString abilityIdString);
typedef CJassStringSID ( __cdecl * AbilityId2String_FUNC) (int AbilID);
typedef DWFP ( __cdecl * Acos_FUNC) (float *x);
typedef BOOL ( __cdecl * AddAssault_FUNC) (int arg1, int arg2);
typedef BOOL ( __cdecl * AddDefenders_FUNC) (int arg1, int arg2);
typedef void ( __cdecl * AddGuardPost_FUNC) (int arg1, float *arg2, float *arg3);
typedef void ( __cdecl * AddHeroXP_FUNC) (HUNIT hero, int xpToAdd, BOOL showEyeCandy);
typedef void ( __cdecl * AddIndicator_FUNC) (HWIDGET widget, int red, int green, int blue, int alpha);
typedef void ( __cdecl * AddItemToAllStock_FUNC) (int itemId, int currentStock, int stockMax);
typedef void ( __cdecl * AddItemToStock_FUNC) (HUNIT unit, int itemId, int currentStock, int stockMax);
typedef HLIGHTNING ( __cdecl * AddLightning_FUNC) (CJassString codeName, BOOL checkVisibility, float *x1, float *y1, float *x2, float *y2);
typedef HLIGHTNING ( __cdecl * AddLightningEx_FUNC) (CJassString codeName, BOOL checkVisibility, float *x1, float *y1, float *z1, float *x2, float *y2, float *z2);
typedef void ( __cdecl * AddPlayerTechResearched_FUNC) (HPLAYER player, int techid, int levels);
typedef void ( __cdecl * AddResourceAmount_FUNC) (HUNIT unit, int amount);
typedef HEFFECT ( __cdecl * AddSpecialEffect_FUNC) (CJassString modelName, float *x, float *y);
typedef HEFFECT ( __cdecl * AddSpecialEffectLoc_FUNC) (CJassString modelName, HLOCATION where);
typedef HEFFECT ( __cdecl * AddSpecialEffectTarget_FUNC) (CJassString modelName, HWIDGET targetWidget, CJassString attachPointName);
typedef HEFFECT ( __cdecl * AddSpellEffect_FUNC) (CJassString abilityString, HEFFECTTYPE t, float *x, float *y);
typedef HEFFECT ( __cdecl * AddSpellEffectById_FUNC) (int AbilID, HEFFECTTYPE t, float *x, float *y);
typedef HEFFECT ( __cdecl * AddSpellEffectByIdLoc_FUNC) (int AbilID, HEFFECTTYPE t, HLOCATION where);
typedef HEFFECT ( __cdecl * AddSpellEffectLoc_FUNC) (CJassString abilityString, HEFFECTTYPE t, HLOCATION where);
typedef HEFFECT ( __cdecl * AddSpellEffectTarget_FUNC) (CJassString modelName, HEFFECTTYPE t, HWIDGET targetWidget, CJassString attachPoint);
typedef HEFFECT ( __cdecl * AddSpellEffectTargetById_FUNC) (int AbilID, HEFFECTTYPE t, HWIDGET targetWidget, CJassString attachPoint);
typedef void ( __cdecl * AddUnitAnimationProperties_FUNC) (HUNIT unit, CJassString animProperties, BOOL add);
typedef void ( __cdecl * AddUnitToAllStock_FUNC) (int unitId, int currentStock, int stockMax);
typedef void ( __cdecl * AddUnitToStock_FUNC) (HUNIT unit, int unitId, int currentStock, int stockMax);
typedef HWEATHEREFFECT ( __cdecl * AddWeatherEffect_FUNC) (HRECT where, int effectID);
typedef void ( __cdecl * AdjustCameraField_FUNC) (HCAMERAFIELD field, float *offset, float *duration);
typedef HBOOLEXPR ( __cdecl * And_FUNC) (HBOOLEXPR operandA, HBOOLEXPR operandB);
typedef DWFP ( __cdecl * Asin_FUNC) (float *y);
typedef DWFP ( __cdecl * Atan_FUNC) (float *x);
typedef DWFP ( __cdecl * Atan2_FUNC) (float *y, float *x);
typedef void ( __cdecl * AttachSoundToUnit_FUNC) (HSOUND soundHandle, HUNIT unit);
typedef void ( __cdecl * AttackMoveKill_FUNC) (HUNIT arg1);
typedef void ( __cdecl * AttackMoveXY_FUNC) (int arg1, int arg2);
typedef void ( __cdecl * CachePlayerHeroData_FUNC) (HPLAYER player);
typedef void ( __cdecl * CameraSetSmoothingFactor_FUNC) (float *factor);
typedef void ( __cdecl * CameraSetSourceNoise_FUNC) (float *mag, float *velocity);
typedef void ( __cdecl * CameraSetSourceNoiseEx_FUNC) (float *mag, float *velocity, BOOL vertOnly);
typedef void ( __cdecl * CameraSetTargetNoise_FUNC) (float *mag, float *velocity);
typedef void ( __cdecl * CameraSetTargetNoiseEx_FUNC) (float *mag, float *velocity, BOOL vertOnly);
typedef void ( __cdecl * CameraSetupApply_FUNC) (HCAMERASETUP Setup, BOOL doPan, BOOL panTimed);
typedef void ( __cdecl * CameraSetupApplyForceDuration_FUNC) (HCAMERASETUP Setup, BOOL doPan, float *forceDuration);
typedef void ( __cdecl * CameraSetupApplyForceDurationWithZ_FUNC) (HCAMERASETUP Setup, float *zDestOffset, float *forceDuration);
typedef void ( __cdecl * CameraSetupApplyWithZ_FUNC) (HCAMERASETUP Setup, float *zDestOffset);
typedef HLOCATION ( __cdecl * CameraSetupGetDestPositionLoc_FUNC) (HCAMERASETUP Setup);
typedef DWFP ( __cdecl * CameraSetupGetDestPositionX_FUNC) (HCAMERASETUP Setup);
typedef DWFP ( __cdecl * CameraSetupGetDestPositionY_FUNC) (HCAMERASETUP Setup);
typedef DWFP ( __cdecl * CameraSetupGetField_FUNC) (HCAMERASETUP Setup, HCAMERAFIELD field);
typedef void ( __cdecl * CameraSetupSetDestPosition_FUNC) (HCAMERASETUP Setup, float *x, float *y, float *duration);
typedef void ( __cdecl * CameraSetupSetField_FUNC) (HCAMERASETUP Setup, HCAMERAFIELD field, float *value, float *duration);
typedef BOOL ( __cdecl * CaptainAtGoal_FUNC) ();
typedef void ( __cdecl * CaptainAttack_FUNC) (float *arg1, float *arg2);
typedef void ( __cdecl * CaptainGoHome_FUNC) ();
typedef int ( __cdecl * CaptainGroupSize_FUNC) ();
typedef BOOL ( __cdecl * CaptainInCombat_FUNC) (BOOL arg1);
typedef BOOL ( __cdecl * CaptainIsEmpty_FUNC) ();
typedef BOOL ( __cdecl * CaptainIsFull_FUNC) ();
typedef BOOL ( __cdecl * CaptainIsHome_FUNC) ();
typedef int ( __cdecl * CaptainReadiness_FUNC) ();
typedef int ( __cdecl * CaptainReadinessHP_FUNC) ();
typedef int ( __cdecl * CaptainReadinessMa_FUNC) ();
typedef BOOL ( __cdecl * CaptainRetreating_FUNC) ();
typedef void ( __cdecl * CaptainVsPlayer_FUNC) (HPLAYER arg1);
typedef void ( __cdecl * CaptainVsUnits_FUNC) (HPLAYER arg1);
typedef void ( __cdecl * ChangeLevel_FUNC) (CJassString newLevel, BOOL doScoreScreen);
typedef void ( __cdecl * Cheat_FUNC) (CJassString cheatStr);
typedef int ( __cdecl * ChooseRandomCreep_FUNC) (int level);
typedef int ( __cdecl * ChooseRandomItem_FUNC) (int level);
typedef int ( __cdecl * ChooseRandomItemEx_FUNC) (HITEMTYPE Type, int level);
typedef int ( __cdecl * ChooseRandomNPBuilding_FUNC) ();
typedef void ( __cdecl * ClearCaptainTargets_FUNC) ();
typedef void ( __cdecl * ClearHarvestAI_FUNC) ();
typedef void ( __cdecl * ClearMapMusic_FUNC) ();
typedef void ( __cdecl * ClearSelection_FUNC) ();
typedef void ( __cdecl * ClearStackedSound_FUNC) (CJassString arg1, float *arg2, float *arg3);
typedef void ( __cdecl * ClearStackedSoundRect_FUNC) (CJassString arg1, HRECT arg2);
typedef void ( __cdecl * ClearTextMessages_FUNC) ();
typedef void ( __cdecl * CommandAI_FUNC) (HPLAYER num, int command, int data);
typedef int ( __cdecl * CommandsWaiting_FUNC) ();
typedef HCONDITIONFUNC ( __cdecl * Condition_FUNC) (CODE func);
typedef HAIDIFFICULTY ( __cdecl * ConvertAIDifficulty_FUNC) (int i);
typedef HALLIANCETYPE ( __cdecl * ConvertAllianceType_FUNC) (int i);
typedef HATTACKTYPE ( __cdecl * ConvertAttackType_FUNC) (int i);
typedef HBLENDMODE ( __cdecl * ConvertBlendMode_FUNC) (int i);
typedef HCAMERAFIELD ( __cdecl * ConvertCameraField_FUNC) (int i);
typedef HDAMAGETYPE ( __cdecl * ConvertDamageType_FUNC) (int i);
typedef HDIALOGEVENT ( __cdecl * ConvertDialogEvent_FUNC) (int i);
typedef HEFFECTTYPE ( __cdecl * ConvertEffectType_FUNC) (int i);
typedef HFGAMESTATE ( __cdecl * ConvertFGameState_FUNC) (int i);
typedef HFOGSTATE ( __cdecl * ConvertFogState_FUNC) (int i);
typedef HGAMEDIFFICULTY ( __cdecl * ConvertGameDifficulty_FUNC) (int i);
typedef HGAMEEVENT ( __cdecl * ConvertGameEvent_FUNC) (int i);
typedef HGAMESPEED ( __cdecl * ConvertGameSpeed_FUNC) (int i);
typedef HGAMETYPE ( __cdecl * ConvertGameType_FUNC) (int i);
typedef HIGAMESTATE ( __cdecl * ConvertIGameState_FUNC) (int i);
typedef HITEMTYPE ( __cdecl * ConvertItemType_FUNC) (int i);
typedef HLIMITOP ( __cdecl * ConvertLimitOp_FUNC) (int i);
typedef HMAPCONTROL ( __cdecl * ConvertMapControl_FUNC) (int i);
typedef HMAPDENSITY ( __cdecl * ConvertMapDensity_FUNC) (int i);
typedef HMAPFLAG ( __cdecl * ConvertMapFlag_FUNC) (int i);
typedef HMAPSETTING ( __cdecl * ConvertMapSetting_FUNC) (int i);
typedef HMAPVISIBILITY ( __cdecl * ConvertMapVisibility_FUNC) (int i);
typedef HPATHINGTYPE ( __cdecl * ConvertPathingType_FUNC) (int i);
typedef HPLACEMENT ( __cdecl * ConvertPlacement_FUNC) (int i);
typedef HPLAYERCOLOR ( __cdecl * ConvertPlayerColor_FUNC) (int i);
typedef HPLAYEREVENT ( __cdecl * ConvertPlayerEvent_FUNC) (int i);
typedef HPLAYERGAMERESULT ( __cdecl * ConvertPlayerGameResult_FUNC) (int i);
typedef HPLAYERSCORE ( __cdecl * ConvertPlayerScore_FUNC) (int i);
typedef HPLAYERSLOTSTATE ( __cdecl * ConvertPlayerSlotState_FUNC) (int i);
typedef HPLAYERSTATE ( __cdecl * ConvertPlayerState_FUNC) (int i);
typedef HPLAYERUNITEVENT ( __cdecl * ConvertPlayerUnitEvent_FUNC) (int i);
typedef HRACE ( __cdecl * ConvertRace_FUNC) (int i);
typedef HRACEPREFERENCE ( __cdecl * ConvertRacePref_FUNC) (int i);
typedef HRARITYCONTROL ( __cdecl * ConvertRarityControl_FUNC) (int i);
typedef HSOUNDTYPE ( __cdecl * ConvertSoundType_FUNC) (int i);
typedef HSTARTLOCPRIO ( __cdecl * ConvertStartLocPrio_FUNC) (int i);
typedef HTEXMAPFLAGS ( __cdecl * ConvertTexMapFlags_FUNC) (int i);
typedef HUNITEVENT ( __cdecl * ConvertUnitEvent_FUNC) (int i);
typedef HUNITSTATE ( __cdecl * ConvertUnitState_FUNC) (int i);
typedef HUNITTYPE ( __cdecl * ConvertUnitType_FUNC) (int i);
typedef BOOL ( __cdecl * ConvertUnits_FUNC) (int arg1, int arg2);
typedef HVERSION ( __cdecl * ConvertVersion_FUNC) (int i);
typedef HVOLUMEGROUP ( __cdecl * ConvertVolumeGroup_FUNC) (int i);
typedef HWEAPONTYPE ( __cdecl * ConvertWeaponType_FUNC) (int i);
typedef HWIDGETEVENT ( __cdecl * ConvertWidgetEvent_FUNC) (int i);
typedef BOOL ( __cdecl * CopySaveGame_FUNC) (CJassString sourceSaveName, CJassString destSaveName);
typedef DWFP ( __cdecl * Cos_FUNC) (float *radians);
typedef HUNIT ( __cdecl * CreateBlightedGoldmine_FUNC) (HPLAYER id, float *x, float *y, float *face);
typedef HCAMERASETUP ( __cdecl * CreateCameraSetup_FUNC) ();
typedef void ( __cdecl * CreateCaptains_FUNC) ();
typedef HUNIT ( __cdecl * CreateCorpse_FUNC) (HPLAYER player, int unitid, float *x, float *y, float *face);
typedef HDESTRUCTABLE ( __cdecl * CreateDeadDestructable_FUNC) (int objectid, float *x, float *y, float *face, float *scale, int variation);
typedef HDESTRUCTABLE ( __cdecl * CreateDeadDestructableZ_FUNC) (int objectid, float *x, float *y, float *z, float *face, float *scale, int variation);
typedef HDEFEATCONDITION ( __cdecl * CreateDefeatCondition_FUNC) ();
typedef HDESTRUCTABLE ( __cdecl * CreateDestructable_FUNC) (int objectid, float *x, float *y, float *face, float *scale, int variation);
typedef HDESTRUCTABLE ( __cdecl * CreateDestructableZ_FUNC) (int objectid, float *x, float *y, float *z, float *face, float *scale, int variation);
typedef HFOGMODIFIER ( __cdecl * CreateFogModifierRadius_FUNC) (HPLAYER forWhichPlayer, HFOGSTATE State, float *centerx, float *centerY, float *radius, BOOL useSharedVision, BOOL afterUnits);
typedef HFOGMODIFIER ( __cdecl * CreateFogModifierRadiusLoc_FUNC) (HPLAYER forWhichPlayer, HFOGSTATE State, HLOCATION center, float *radius, BOOL useSharedVision, BOOL afterUnits);
typedef HFOGMODIFIER ( __cdecl * CreateFogModifierRect_FUNC) (HPLAYER forWhichPlayer, HFOGSTATE State, HRECT where, BOOL useSharedVision, BOOL afterUnits);
typedef HFORCE ( __cdecl * CreateForce_FUNC) ();
typedef HGROUP ( __cdecl * CreateGroup_FUNC) ();
typedef HIMAGE ( __cdecl * CreateImage_FUNC) (CJassString file, float *sizeX, float *sizeY, float *sizeZ, float *posX, float *posY, float *posZ, float *originX, float *originY, float *originZ, int imageType);
typedef HITEM ( __cdecl * CreateItem_FUNC) (int itemid, float *x, float *y);
typedef HITEMPOOL ( __cdecl * CreateItemPool_FUNC) ();
typedef HLEADERBOARD ( __cdecl * CreateLeaderboard_FUNC) ();
typedef HSOUND ( __cdecl * CreateMIDISound_FUNC) (CJassString soundLabel, int fadeInRate, int fadeOutRate);
typedef HMULTIBOARD ( __cdecl * CreateMultiboard_FUNC) ();
typedef HQUEST ( __cdecl * CreateQuest_FUNC) ();
typedef HREGION ( __cdecl * CreateRegion_FUNC) ();
typedef HSOUND ( __cdecl * CreateSound_FUNC) (CJassString fileName, BOOL looping, BOOL is3D, BOOL stopwhenoutofrange, int fadeInRate, int fadeOutRate, CJassString eaxSetting);
typedef HSOUND ( __cdecl * CreateSoundFilenameWithLabel_FUNC) (CJassString fileName, BOOL looping, BOOL is3D, BOOL stopwhenoutofrange, int fadeInRate, int fadeOutRate, CJassString SLKEntryName);
typedef HSOUND ( __cdecl * CreateSoundFromLabel_FUNC) (CJassString soundLabel, BOOL looping, BOOL is3D, BOOL stopwhenoutofrange, int fadeInRate, int fadeOutRate);
typedef HTEXTTAG ( __cdecl * CreateTextTag_FUNC) ();
typedef HTIMER ( __cdecl * CreateTimer_FUNC) ();
typedef HTIMERDIALOG ( __cdecl * CreateTimerDialog_FUNC) (HTIMER t);
typedef HTRACKABLE ( __cdecl * CreateTrackable_FUNC) (CJassString trackableModelPath, float *x, float *y, float *facing);
typedef HTRIGGER ( __cdecl * CreateTrigger_FUNC) ();
typedef HUBERSPLAT ( __cdecl * CreateUbersplat_FUNC) (float *x, float *y, CJassString name, int red, int green, int blue, int alpha, BOOL forcePaused, BOOL noBirthTime);
typedef HUNIT ( __cdecl * CreateUnit_FUNC) (HPLAYER id, int unitid, float *x, float *y, float *face);
typedef HUNIT ( __cdecl * CreateUnitAtLoc_FUNC) (HPLAYER id, int unitid, HLOCATION Location, float *face);
typedef HUNIT ( __cdecl * CreateUnitAtLocByName_FUNC) (HPLAYER id, CJassString unitname, HLOCATION Location, float *face);
typedef HUNIT ( __cdecl * CreateUnitByName_FUNC) (HPLAYER player, CJassString unitname, float *x, float *y, float *face);
typedef HUNITPOOL ( __cdecl * CreateUnitPool_FUNC) ();
typedef BOOL ( __cdecl * CreepsOnMap_FUNC) ();
typedef void ( __cdecl * CripplePlayer_FUNC) (HPLAYER player, HFORCE toWhichPlayers, BOOL flag);
typedef void ( __cdecl * DebugBreak_FUNC) (int arg1);
typedef void ( __cdecl * DebugFI_FUNC) (CJassString arg1, int arg2);
typedef void ( __cdecl * DebugS_FUNC) (CJassString arg1);
typedef void ( __cdecl * DebugUnitID_FUNC) (CJassString arg1, int arg2);
typedef int ( __cdecl * DecUnitAbilityLevel_FUNC) (HUNIT unit, int abilcode);
typedef void ( __cdecl * DefeatConditionSetDescription_FUNC) (HDEFEATCONDITION Condition, CJassString description);
typedef void ( __cdecl * DefineStartLocation_FUNC) (int StartLoc, float *x, float *y);
typedef void ( __cdecl * DefineStartLocationLoc_FUNC) (int StartLoc, HLOCATION Location);
typedef DWFP ( __cdecl * Deg2Rad_FUNC) (float *degrees);
typedef void ( __cdecl * DestroyBoolExpr_FUNC) (HBOOLEXPR e);
typedef void ( __cdecl * DestroyCondition_FUNC) (HCONDITIONFUNC c);
typedef void ( __cdecl * DestroyDefeatCondition_FUNC) (HDEFEATCONDITION Condition);
typedef void ( __cdecl * DestroyEffect_FUNC) (HEFFECT Effect);
typedef void ( __cdecl * DestroyFilter_FUNC) (HFILTERFUNC f);
typedef void ( __cdecl * DestroyFogModifier_FUNC) (HFOGMODIFIER FogModifier);
typedef void ( __cdecl * DestroyForce_FUNC) (HFORCE Force);
typedef void ( __cdecl * DestroyGroup_FUNC) (HGROUP Group);
typedef void ( __cdecl * DestroyImage_FUNC) (HIMAGE Image);
typedef void ( __cdecl * DestroyItemPool_FUNC) (HITEMPOOL ItemPool);
typedef void ( __cdecl * DestroyLeaderboard_FUNC) (HLEADERBOARD lb);
typedef BOOL ( __cdecl * DestroyLightning_FUNC) (HLIGHTNING Bolt);
typedef void ( __cdecl * DestroyMultiboard_FUNC) (HMULTIBOARD lb);
typedef void ( __cdecl * DestroyQuest_FUNC) (HQUEST Quest);
typedef void ( __cdecl * DestroyTextTag_FUNC) (HTEXTTAG t);
typedef void ( __cdecl * DestroyTimer_FUNC) (HTIMER Timer);
typedef void ( __cdecl * DestroyTimerDialog_FUNC) (HTIMERDIALOG Dialog);
typedef void ( __cdecl * DestroyTrigger_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * DestroyUbersplat_FUNC) (HUBERSPLAT Splat);
typedef void ( __cdecl * DestroyUnitPool_FUNC) (HUNITPOOL Pool);
typedef void ( __cdecl * DestructableRestoreLife_FUNC) (HDESTRUCTABLE d, float *life, BOOL birth);
typedef HBUTTON ( __cdecl * DialogAddButton_FUNC) (HDIALOG Dialog, CJassString buttonText, int hotkey);
typedef HBUTTON ( __cdecl * DialogAddQuitButton_FUNC) (HDIALOG Dialog, BOOL doScoreScreen, CJassString buttonText, int hotkey);
typedef void ( __cdecl * DialogClear_FUNC) (HDIALOG Dialog);
typedef HDIALOG ( __cdecl * DialogCreate_FUNC) ();
typedef void ( __cdecl * DialogDestroy_FUNC) (HDIALOG Dialog);
typedef void ( __cdecl * DialogDisplay_FUNC) (HPLAYER player, HDIALOG Dialog, BOOL flag);
typedef void ( __cdecl * DialogSetAsync_FUNC) (HDIALOG arg1);
typedef void ( __cdecl * DialogSetMessage_FUNC) (HDIALOG Dialog, CJassString messageText);
typedef void ( __cdecl * DisablePathing_FUNC) ();
typedef void ( __cdecl * DisableRestartMission_FUNC) (BOOL flag);
typedef void ( __cdecl * DisableTrigger_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * DisplayCineFilter_FUNC) (BOOL flag);
typedef void ( __cdecl * DisplayLoadDialog_FUNC) ();
typedef void ( __cdecl * DisplayText_FUNC) (int arg1, CJassString arg2);
typedef void ( __cdecl * DisplayTextI_FUNC) (int arg1, CJassString arg2, int arg3);
typedef void ( __cdecl * DisplayTextII_FUNC) (int arg1, CJassString arg2, int arg3, int arg4);
typedef void ( __cdecl * DisplayTextIII_FUNC) (int arg1, CJassString arg2, int arg3, int arg4, int arg5);
typedef void ( __cdecl * DisplayTextToPlayer_FUNC) (HPLAYER toPlayer, float *x, float *y, CJassString message);
typedef void ( __cdecl * DisplayTimedTextFromPlayer_FUNC) (HPLAYER toPlayer, float *x, float *y, float *duration, CJassString message);
typedef void ( __cdecl * DisplayTimedTextToPlayer_FUNC) (HPLAYER toPlayer, float *x, float *y, float *duration, CJassString message);
typedef BOOL ( __cdecl * DoAiScriptDebug_FUNC) ();
typedef void ( __cdecl * DoNotSaveReplay_FUNC) ();
typedef void ( __cdecl * EnableDragSelect_FUNC) (BOOL state, BOOL ui);
typedef void ( __cdecl * EnableMinimapFilterButtons_FUNC) (BOOL enableAlly, BOOL enableCreep);
typedef void ( __cdecl * EnableOcclusion_FUNC) (BOOL flag);
typedef void ( __cdecl * EnablePreSelect_FUNC) (BOOL state, BOOL ui);
typedef void ( __cdecl * EnableSelect_FUNC) (BOOL state, BOOL ui);
typedef void ( __cdecl * EnableTrigger_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * EnableUserControl_FUNC) (BOOL b);
typedef void ( __cdecl * EnableUserUI_FUNC) (BOOL b);
typedef void ( __cdecl * EnableWeatherEffect_FUNC) (HWEATHEREFFECT Effect, BOOL enable);
typedef void ( __cdecl * EnableWorldFogBoundary_FUNC) (BOOL b);
typedef void ( __cdecl * EndCinematicScene_FUNC) ();
typedef void ( __cdecl * EndGame_FUNC) (BOOL doScoreScreen);
typedef void ( __cdecl * EndThematicMusic_FUNC) ();
typedef void ( __cdecl * EnumDestructablesInRect_FUNC) (HRECT r, HBOOLEXPR filter, CODE actionFunc);
typedef void ( __cdecl * EnumItemsInRect_FUNC) (HRECT r, HBOOLEXPR filter, CODE actionFunc);
typedef void ( __cdecl * ExecuteFunc_FUNC) (CJassString funcName);
typedef void ( __cdecl * FillGuardPosts_FUNC) ();
typedef HFILTERFUNC ( __cdecl * Filter_FUNC) (CODE func);
typedef void ( __cdecl * FinishUbersplat_FUNC) (HUBERSPLAT Splat);
typedef HUNIT ( __cdecl * FirstOfGroup_FUNC) (HGROUP Group);
typedef void ( __cdecl * FlashQuestDialogButton_FUNC) ();
typedef void ( __cdecl * FlushChildHashtable_FUNC) (HHASHTABLE table, int parentKey);
typedef void ( __cdecl * FlushGameCache_FUNC) (HGAMECACHE cache);
typedef void ( __cdecl * FlushParentHashtable_FUNC) (HHASHTABLE table);
typedef void ( __cdecl * FlushStoredBoolean_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * FlushStoredInteger_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * FlushStoredMission_FUNC) (HGAMECACHE cache, CJassString missionKey);
typedef void ( __cdecl * FlushStoredReal_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * FlushStoredString_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * FlushStoredUnit_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * FogEnable_FUNC) (BOOL enable);
typedef void ( __cdecl * FogMaskEnable_FUNC) (BOOL enable);
typedef void ( __cdecl * FogModifierStart_FUNC) (HFOGMODIFIER FogModifier);
typedef void ( __cdecl * FogModifierStop_FUNC) (HFOGMODIFIER FogModifier);
typedef void ( __cdecl * ForForce_FUNC) (HFORCE Force, CODE callback);
typedef void ( __cdecl * ForGroup_FUNC) (HGROUP Group, CODE callback);
typedef void ( __cdecl * ForceAddPlayer_FUNC) (HFORCE Force, HPLAYER player);
typedef void ( __cdecl * ForceCampaignSelectScreen_FUNC) ();
typedef void ( __cdecl * ForceCinematicSubtitles_FUNC) (BOOL flag);
typedef void ( __cdecl * ForceClear_FUNC) (HFORCE Force);
typedef void ( __cdecl * ForceEnumAllies_FUNC) (HFORCE Force, HPLAYER player, HBOOLEXPR filter);
typedef void ( __cdecl * ForceEnumEnemies_FUNC) (HFORCE Force, HPLAYER player, HBOOLEXPR filter);
typedef void ( __cdecl * ForceEnumPlayers_FUNC) (HFORCE Force, HBOOLEXPR filter);
typedef void ( __cdecl * ForceEnumPlayersCounted_FUNC) (HFORCE Force, HBOOLEXPR filter, int countLimit);
typedef void ( __cdecl * ForcePlayerStartLocation_FUNC) (HPLAYER player, int startLocIndex);
typedef void ( __cdecl * ForceQuestDialogUpdate_FUNC) ();
typedef void ( __cdecl * ForceRemovePlayer_FUNC) (HFORCE Force, HPLAYER player);
typedef void ( __cdecl * ForceUICancel_FUNC) ();
typedef void ( __cdecl * ForceUIKey_FUNC) (CJassString key);
typedef HAIDIFFICULTY ( __cdecl * GetAIDifficulty_FUNC) (HPLAYER num);
typedef CJassStringSID ( __cdecl * GetAbilityEffect_FUNC) (CJassString abilityString, HEFFECTTYPE t, int index);
typedef CJassStringSID ( __cdecl * GetAbilityEffectById_FUNC) (int AbilID, HEFFECTTYPE t, int index);
typedef CJassStringSID ( __cdecl * GetAbilitySound_FUNC) (CJassString abilityString, HSOUNDTYPE t);
typedef CJassStringSID ( __cdecl * GetAbilitySoundById_FUNC) (int AbilID, HSOUNDTYPE t);
typedef int ( __cdecl * GetAiPlayer_FUNC) ();
typedef HUNIT ( __cdecl * GetAllianceTarget_FUNC) ();
typedef int ( __cdecl * GetAllyColorFilterState_FUNC) ();
typedef HUNIT ( __cdecl * GetAttacker_FUNC) ();
typedef HUNIT ( __cdecl * GetBuilding_FUNC) (HPLAYER arg1);
typedef HUNIT ( __cdecl * GetBuyingUnit_FUNC) ();
typedef DWFP ( __cdecl * GetCameraBoundMaxX_FUNC) ();
typedef DWFP ( __cdecl * GetCameraBoundMaxY_FUNC) ();
typedef DWFP ( __cdecl * GetCameraBoundMinX_FUNC) ();
typedef DWFP ( __cdecl * GetCameraBoundMinY_FUNC) ();
typedef HLOCATION ( __cdecl * GetCameraEyePositionLoc_FUNC) ();
typedef DWFP ( __cdecl * GetCameraEyePositionX_FUNC) ();
typedef DWFP ( __cdecl * GetCameraEyePositionY_FUNC) ();
typedef DWFP ( __cdecl * GetCameraEyePositionZ_FUNC) ();
typedef DWFP ( __cdecl * GetCameraField_FUNC) (HCAMERAFIELD field);
typedef DWFP ( __cdecl * GetCameraMargin_FUNC) (int Margin);
typedef HLOCATION ( __cdecl * GetCameraTargetPositionLoc_FUNC) ();
typedef DWFP ( __cdecl * GetCameraTargetPositionX_FUNC) ();
typedef DWFP ( __cdecl * GetCameraTargetPositionY_FUNC) ();
typedef DWFP ( __cdecl * GetCameraTargetPositionZ_FUNC) ();
typedef HUNIT ( __cdecl * GetCancelledStructure_FUNC) ();
typedef HUNIT ( __cdecl * GetChangingUnit_FUNC) ();
typedef HPLAYER ( __cdecl * GetChangingUnitPrevOwner_FUNC) ();
typedef HBUTTON ( __cdecl * GetClickedButton_FUNC) ();
typedef HDIALOG ( __cdecl * GetClickedDialog_FUNC) ();
typedef HUNIT ( __cdecl * GetConstructedStructure_FUNC) ();
typedef HUNIT ( __cdecl * GetConstructingStructure_FUNC) ();
typedef HMAPDENSITY ( __cdecl * GetCreatureDensity_FUNC) ();
typedef HUNIT ( __cdecl * GetCreepCamp_FUNC) (int arg1, int arg2, BOOL arg3);
typedef BOOL ( __cdecl * GetCreepCampFilterState_FUNC) ();
typedef BOOL ( __cdecl * GetCustomCampaignButtonVisible_FUNC) (int Button);
typedef HUNIT ( __cdecl * GetDecayingUnit_FUNC) ();
typedef HGAMEDIFFICULTY ( __cdecl * GetDefaultDifficulty_FUNC) ();
typedef DWFP ( __cdecl * GetDestructableLife_FUNC) (HDESTRUCTABLE d);
typedef DWFP ( __cdecl * GetDestructableMaxLife_FUNC) (HDESTRUCTABLE d);
typedef CJassStringSID ( __cdecl * GetDestructableName_FUNC) (HDESTRUCTABLE d);
typedef DWFP ( __cdecl * GetDestructableOccluderHeight_FUNC) (HDESTRUCTABLE d);
typedef int ( __cdecl * GetDestructableTypeId_FUNC) (HDESTRUCTABLE d);
typedef DWFP ( __cdecl * GetDestructableX_FUNC) (HDESTRUCTABLE d);
typedef DWFP ( __cdecl * GetDestructableY_FUNC) (HDESTRUCTABLE d);
typedef HUNIT ( __cdecl * GetDetectedUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetDyingUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetEnemyBase_FUNC) ();
typedef HUNIT ( __cdecl * GetEnemyExpansion_FUNC) ();
typedef int ( __cdecl * GetEnemyPower_FUNC) ();
typedef HUNIT ( __cdecl * GetEnteringUnit_FUNC) ();
typedef HDESTRUCTABLE ( __cdecl * GetEnumDestructable_FUNC) ();
typedef HITEM ( __cdecl * GetEnumItem_FUNC) ();
typedef HPLAYER ( __cdecl * GetEnumPlayer_FUNC) ();
typedef HUNIT ( __cdecl * GetEnumUnit_FUNC) ();
typedef DWFP ( __cdecl * GetEventDamage_FUNC) ();
typedef HUNIT ( __cdecl * GetEventDamageSource_FUNC) ();
typedef HPLAYER ( __cdecl * GetEventDetectingPlayer_FUNC) ();
typedef HGAMESTATE ( __cdecl * GetEventGameState_FUNC) ();
typedef CJassStringSID ( __cdecl * GetEventPlayerChatString_FUNC) ();
typedef CJassStringSID ( __cdecl * GetEventPlayerChatStringMatched_FUNC) ();
typedef HPLAYERSTATE ( __cdecl * GetEventPlayerState_FUNC) ();
typedef HUNIT ( __cdecl * GetEventTargetUnit_FUNC) ();
typedef HUNITSTATE ( __cdecl * GetEventUnitState_FUNC) ();
typedef HUNIT ( __cdecl * GetExpansionFoe_FUNC) ();
typedef HUNIT ( __cdecl * GetExpansionPeon_FUNC) ();
typedef int ( __cdecl * GetExpansionX_FUNC) ();
typedef int ( __cdecl * GetExpansionY_FUNC) ();
typedef HTIMER ( __cdecl * GetExpiredTimer_FUNC) ();
typedef HDESTRUCTABLE ( __cdecl * GetFilterDestructable_FUNC) ();
typedef HITEM ( __cdecl * GetFilterItem_FUNC) ();
typedef HPLAYER ( __cdecl * GetFilterPlayer_FUNC) ();
typedef HUNIT ( __cdecl * GetFilterUnit_FUNC) ();
typedef DWFP ( __cdecl * GetFloatGameState_FUNC) (HFGAMESTATE FloatGameState);
typedef int ( __cdecl * GetFoodMade_FUNC) (int unitId);
typedef int ( __cdecl * GetFoodUsed_FUNC) (int unitId);
typedef HGAMEDIFFICULTY ( __cdecl * GetGameDifficulty_FUNC) ();
typedef HPLACEMENT ( __cdecl * GetGamePlacement_FUNC) ();
typedef HGAMESPEED ( __cdecl * GetGameSpeed_FUNC) ();
typedef HGAMETYPE ( __cdecl * GetGameTypeSelected_FUNC) ();
typedef int ( __cdecl * GetGoldOwned_FUNC) ();
typedef int ( __cdecl * GetHandleId_FUNC) (HHANDLE h);
typedef int ( __cdecl * GetHeroAgi_FUNC) (HUNIT hero, BOOL includeBonuses);
typedef int ( __cdecl * GetHeroId_FUNC) ();
typedef int ( __cdecl * GetHeroInt_FUNC) (HUNIT hero, BOOL includeBonuses);
typedef int ( __cdecl * GetHeroLevel_FUNC) (HUNIT hero);
typedef int ( __cdecl * GetHeroLevelAI_FUNC) ();
typedef CJassStringSID ( __cdecl * GetHeroProperName_FUNC) (HUNIT hero);
typedef int ( __cdecl * GetHeroSkillPoints_FUNC) (HUNIT hero);
typedef int ( __cdecl * GetHeroStr_FUNC) (HUNIT hero, BOOL includeBonuses);
typedef int ( __cdecl * GetHeroXP_FUNC) (HUNIT hero);
typedef int ( __cdecl * GetIntegerGameState_FUNC) (HIGAMESTATE IntegerGameState);
typedef int ( __cdecl * GetIssuedOrderId_FUNC) ();
typedef int ( __cdecl * GetItemCharges_FUNC) (HITEM item);
typedef int ( __cdecl * GetItemLevel_FUNC) (HITEM item);
typedef CJassStringSID ( __cdecl * GetItemName_FUNC) (HITEM item);
typedef HPLAYER ( __cdecl * GetItemPlayer_FUNC) (HITEM item);
typedef HITEMTYPE ( __cdecl * GetItemType_FUNC) (HITEM item);
typedef int ( __cdecl * GetItemTypeId_FUNC) (HITEM i);
typedef int ( __cdecl * GetItemUserData_FUNC) (HITEM item);
typedef DWFP ( __cdecl * GetItemX_FUNC) (HITEM i);
typedef DWFP ( __cdecl * GetItemY_FUNC) (HITEM i);
typedef HUNIT ( __cdecl * GetKillingUnit_FUNC) ();
typedef int ( __cdecl * GetLastCommand_FUNC) ();
typedef int ( __cdecl * GetLastData_FUNC) ();
typedef int ( __cdecl * GetLearnedSkill_FUNC) ();
typedef int ( __cdecl * GetLearnedSkillLevel_FUNC) ();
typedef HUNIT ( __cdecl * GetLearningUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetLeavingUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetLevelingUnit_FUNC) ();
typedef DWFP ( __cdecl * GetLightningColorA_FUNC) (HLIGHTNING Bolt);
typedef DWFP ( __cdecl * GetLightningColorB_FUNC) (HLIGHTNING Bolt);
typedef DWFP ( __cdecl * GetLightningColorG_FUNC) (HLIGHTNING Bolt);
typedef DWFP ( __cdecl * GetLightningColorR_FUNC) (HLIGHTNING Bolt);
typedef HUNIT ( __cdecl * GetLoadedUnit_FUNC) ();
typedef HPLAYER ( __cdecl * GetLocalPlayer_FUNC) ();
typedef int ( __cdecl * GetLocalizedHotkey_FUNC) (CJassString source);
typedef CJassStringSID ( __cdecl * GetLocalizedString_FUNC) (CJassString source);
typedef DWFP ( __cdecl * GetLocationX_FUNC) (HLOCATION Location);
typedef DWFP ( __cdecl * GetLocationY_FUNC) (HLOCATION Location);
typedef DWFP ( __cdecl * GetLocationZ_FUNC) (HLOCATION Location);
typedef HITEM ( __cdecl * GetManipulatedItem_FUNC) ();
typedef HUNIT ( __cdecl * GetManipulatingUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetMegaTarget_FUNC) ();
typedef int ( __cdecl * GetMinesOwned_FUNC) ();
typedef int ( __cdecl * GetNextExpansion_FUNC) ();
typedef CJassStringSID ( __cdecl * GetObjectName_FUNC) (int objectId);
typedef HLOCATION ( __cdecl * GetOrderPointLoc_FUNC) ();
typedef DWFP ( __cdecl * GetOrderPointX_FUNC) ();
typedef DWFP ( __cdecl * GetOrderPointY_FUNC) ();
typedef HWIDGET ( __cdecl * GetOrderTarget_FUNC) ();
typedef HDESTRUCTABLE ( __cdecl * GetOrderTargetDestructable_FUNC) ();
typedef HITEM ( __cdecl * GetOrderTargetItem_FUNC) ();
typedef HUNIT ( __cdecl * GetOrderTargetUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetOrderedUnit_FUNC) ();
typedef HPLAYER ( __cdecl * GetOwningPlayer_FUNC) (HUNIT unit);
typedef BOOL ( __cdecl * GetPlayerAlliance_FUNC) (HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE AllianceSetting);
typedef HPLAYERCOLOR ( __cdecl * GetPlayerColor_FUNC) (HPLAYER player);
typedef HMAPCONTROL ( __cdecl * GetPlayerController_FUNC) (HPLAYER player);
typedef DWFP ( __cdecl * GetPlayerHandicap_FUNC) (HPLAYER player);
typedef DWFP ( __cdecl * GetPlayerHandicapXP_FUNC) (HPLAYER player);
typedef int ( __cdecl * GetPlayerId_FUNC) (HPLAYER player);
typedef CJassStringSID ( __cdecl * GetPlayerName_FUNC) (HPLAYER player);
typedef HRACE ( __cdecl * GetPlayerRace_FUNC) (HPLAYER player);
typedef int ( __cdecl * GetPlayerScore_FUNC) (HPLAYER player, HPLAYERSCORE PlayerScore);
typedef BOOL ( __cdecl * GetPlayerSelectable_FUNC) (HPLAYER player);
typedef HPLAYERSLOTSTATE ( __cdecl * GetPlayerSlotState_FUNC) (HPLAYER player);
typedef int ( __cdecl * GetPlayerStartLocation_FUNC) (HPLAYER player);
typedef DWFP ( __cdecl * GetPlayerStartLocationX_FUNC) (HPLAYER arg1);
typedef DWFP ( __cdecl * GetPlayerStartLocationY_FUNC) (HPLAYER arg1);
typedef int ( __cdecl * GetPlayerState_FUNC) (HPLAYER player, HPLAYERSTATE PlayerState);
typedef int ( __cdecl * GetPlayerStructureCount_FUNC) (HPLAYER player, BOOL includeIncomplete);
typedef int ( __cdecl * GetPlayerTaxRate_FUNC) (HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE Resource);
typedef int ( __cdecl * GetPlayerTeam_FUNC) (HPLAYER player);
typedef int ( __cdecl * GetPlayerTechCount_FUNC) (HPLAYER player, int techid, BOOL specificonly);
typedef int ( __cdecl * GetPlayerTechMaxAllowed_FUNC) (HPLAYER player, int techid);
typedef BOOL ( __cdecl * GetPlayerTechResearched_FUNC) (HPLAYER player, int techid, BOOL specificonly);
typedef int ( __cdecl * GetPlayerTypedUnitCount_FUNC) (HPLAYER player, CJassString unitName, BOOL includeIncomplete, BOOL includeUpgrades);
typedef int ( __cdecl * GetPlayerUnitCount_FUNC) (HPLAYER player, BOOL includeIncomplete);
typedef int ( __cdecl * GetPlayerUnitTypeCount_FUNC) (HPLAYER arg1, int arg2);
typedef int ( __cdecl * GetPlayers_FUNC) ();
typedef int ( __cdecl * GetRandomInt_FUNC) (int lowBound, int highBound);
typedef DWFP ( __cdecl * GetRandomReal_FUNC) (float *lowBound, float *highBound);
typedef DWFP ( __cdecl * GetRectCenterX_FUNC) (HRECT Rect);
typedef DWFP ( __cdecl * GetRectCenterY_FUNC) (HRECT Rect);
typedef DWFP ( __cdecl * GetRectMaxX_FUNC) (HRECT Rect);
typedef DWFP ( __cdecl * GetRectMaxY_FUNC) (HRECT Rect);
typedef DWFP ( __cdecl * GetRectMinX_FUNC) (HRECT Rect);
typedef DWFP ( __cdecl * GetRectMinY_FUNC) (HRECT Rect);
typedef HUNIT ( __cdecl * GetRescuer_FUNC) ();
typedef int ( __cdecl * GetResearched_FUNC) ();
typedef HUNIT ( __cdecl * GetResearchingUnit_FUNC) ();
typedef int ( __cdecl * GetResourceAmount_FUNC) (HUNIT unit);
typedef HMAPDENSITY ( __cdecl * GetResourceDensity_FUNC) ();
typedef HUNIT ( __cdecl * GetRevivableUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetRevivingUnit_FUNC) ();
typedef CJassStringSID ( __cdecl * GetSaveBasicFilename_FUNC) ();
typedef HUNIT ( __cdecl * GetSellingUnit_FUNC) ();
typedef HITEM ( __cdecl * GetSoldItem_FUNC) ();
typedef HUNIT ( __cdecl * GetSoldUnit_FUNC) ();
typedef int ( __cdecl * GetSoundDuration_FUNC) (HSOUND soundHandle);
typedef int ( __cdecl * GetSoundFileDuration_FUNC) (CJassString musicFileName);
typedef BOOL ( __cdecl * GetSoundIsLoading_FUNC) (HSOUND soundHandle);
typedef BOOL ( __cdecl * GetSoundIsPlaying_FUNC) (HSOUND soundHandle);
typedef HABILITY ( __cdecl * GetSpellAbility_FUNC) ();
typedef int ( __cdecl * GetSpellAbilityId_FUNC) ();
typedef HUNIT ( __cdecl * GetSpellAbilityUnit_FUNC) ();
typedef HDESTRUCTABLE ( __cdecl * GetSpellTargetDestructable_FUNC) ();
typedef HITEM ( __cdecl * GetSpellTargetItem_FUNC) ();
typedef HLOCATION ( __cdecl * GetSpellTargetLoc_FUNC) ();
typedef HUNIT ( __cdecl * GetSpellTargetUnit_FUNC) ();
typedef DWFP ( __cdecl * GetSpellTargetX_FUNC) ();
typedef DWFP ( __cdecl * GetSpellTargetY_FUNC) ();
typedef HSTARTLOCPRIO ( __cdecl * GetStartLocPrio_FUNC) (int StartLoc, int prioSlotIndex);
typedef int ( __cdecl * GetStartLocPrioSlot_FUNC) (int StartLoc, int prioSlotIndex);
typedef HLOCATION ( __cdecl * GetStartLocationLoc_FUNC) (int StartLocation);
typedef DWFP ( __cdecl * GetStartLocationX_FUNC) (int StartLocation);
typedef DWFP ( __cdecl * GetStartLocationY_FUNC) (int StartLocation);
typedef BOOL ( __cdecl * GetStoredBoolean_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef int ( __cdecl * GetStoredInteger_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef DWFP ( __cdecl * GetStoredReal_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef CJassStringSID ( __cdecl * GetStoredString_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef HUNIT ( __cdecl * GetSummonedUnit_FUNC) ();
typedef HUNIT ( __cdecl * GetSummoningUnit_FUNC) ();
typedef int ( __cdecl * GetTeams_FUNC) ();
typedef int ( __cdecl * GetTerrainCliffLevel_FUNC) (float *x, float *y);
typedef int ( __cdecl * GetTerrainType_FUNC) (float *x, float *y);
typedef int ( __cdecl * GetTerrainVariance_FUNC) (float *x, float *y);
typedef DWFP ( __cdecl * GetTimeOfDayScale_FUNC) ();
typedef HPLAYER ( __cdecl * GetTournamentFinishNowPlayer_FUNC) ();
typedef int ( __cdecl * GetTournamentFinishNowRule_FUNC) ();
typedef DWFP ( __cdecl * GetTournamentFinishSoonTimeRemaining_FUNC) ();
typedef int ( __cdecl * GetTournamentScore_FUNC) (HPLAYER player);
typedef int ( __cdecl * GetTownUnitCount_FUNC) (int arg1, int arg2, BOOL arg3);
typedef HUNIT ( __cdecl * GetTrainedUnit_FUNC) ();
typedef int ( __cdecl * GetTrainedUnitType_FUNC) ();
typedef HUNIT ( __cdecl * GetTransportUnit_FUNC) ();
typedef HDESTRUCTABLE ( __cdecl * GetTriggerDestructable_FUNC) ();
typedef int ( __cdecl * GetTriggerEvalCount_FUNC) (HTRIGGER Trigger);
typedef HEVENTID ( __cdecl * GetTriggerEventId_FUNC) ();
typedef int ( __cdecl * GetTriggerExecCount_FUNC) (HTRIGGER Trigger);
typedef HPLAYER ( __cdecl * GetTriggerPlayer_FUNC) ();
typedef HUNIT ( __cdecl * GetTriggerUnit_FUNC) ();
typedef HWIDGET ( __cdecl * GetTriggerWidget_FUNC) ();
typedef HREGION ( __cdecl * GetTriggeringRegion_FUNC) ();
typedef HTRACKABLE ( __cdecl * GetTriggeringTrackable_FUNC) ();
typedef HTRIGGER ( __cdecl * GetTriggeringTrigger_FUNC) ();
typedef int ( __cdecl * GetUnitAbilityLevel_FUNC) (HUNIT unit, int abilcode);
typedef DWFP ( __cdecl * GetUnitAcquireRange_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitBuildTime_FUNC) (int arg1);
typedef int ( __cdecl * GetUnitCount_FUNC) (int arg1);
typedef int ( __cdecl * GetUnitCountDone_FUNC) (int arg1);
typedef int ( __cdecl * GetUnitCurrentOrder_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitDefaultAcquireRange_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitDefaultFlyHeight_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitDefaultMoveSpeed_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitDefaultPropWindow_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitDefaultTurnSpeed_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitFacing_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitFlyHeight_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitFoodMade_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitFoodUsed_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitGoldCost_FUNC) (int arg1);
typedef int ( __cdecl * GetUnitLevel_FUNC) (HUNIT unit);
typedef HLOCATION ( __cdecl * GetUnitLoc_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitMoveSpeed_FUNC) (HUNIT unit);
typedef CJassStringSID ( __cdecl * GetUnitName_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitPointValue_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitPointValueByType_FUNC) (int unitType);
typedef DWFP ( __cdecl * GetUnitPropWindow_FUNC) (HUNIT unit);
typedef HRACE ( __cdecl * GetUnitRace_FUNC) (HUNIT unit);
typedef HDESTRUCTABLE ( __cdecl * GetUnitRallyDestructable_FUNC) (HUNIT unit);
typedef HLOCATION ( __cdecl * GetUnitRallyPoint_FUNC) (HUNIT unit);
typedef HUNIT ( __cdecl * GetUnitRallyUnit_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitState_FUNC) (HUNIT unit, HUNITSTATE UnitState);
typedef DWFP ( __cdecl * GetUnitTurnSpeed_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitTypeId_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitUserData_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUnitWoodCost_FUNC) (int arg1);
typedef DWFP ( __cdecl * GetUnitX_FUNC) (HUNIT unit);
typedef DWFP ( __cdecl * GetUnitY_FUNC) (HUNIT unit);
typedef int ( __cdecl * GetUpgradeGoldCost_FUNC) (int arg1);
typedef int ( __cdecl * GetUpgradeLevel_FUNC) (int arg1);
typedef int ( __cdecl * GetUpgradeWoodCost_FUNC) (int arg1);
typedef DWFP ( __cdecl * GetWidgetLife_FUNC) (HWIDGET widget);
typedef DWFP ( __cdecl * GetWidgetX_FUNC) (HWIDGET widget);
typedef DWFP ( __cdecl * GetWidgetY_FUNC) (HWIDGET widget);
typedef HPLAYER ( __cdecl * GetWinningPlayer_FUNC) ();
typedef HRECT ( __cdecl * GetWorldBounds_FUNC) ();
typedef void ( __cdecl * GroupAddUnit_FUNC) (HGROUP Group, HUNIT unit);
typedef void ( __cdecl * GroupClear_FUNC) (HGROUP Group);
typedef void ( __cdecl * GroupEnumUnitsInRange_FUNC) (HGROUP Group, float *x, float *y, float *radius, HBOOLEXPR filter);
typedef void ( __cdecl * GroupEnumUnitsInRangeCounted_FUNC) (HGROUP Group, float *x, float *y, float *radius, HBOOLEXPR filter, int countLimit);
typedef void ( __cdecl * GroupEnumUnitsInRangeOfLoc_FUNC) (HGROUP Group, HLOCATION Location, float *radius, HBOOLEXPR filter);
typedef void ( __cdecl * GroupEnumUnitsInRangeOfLocCounted_FUNC) (HGROUP Group, HLOCATION Location, float *radius, HBOOLEXPR filter, int countLimit);
typedef void ( __cdecl * GroupEnumUnitsInRect_FUNC) (HGROUP Group, HRECT r, HBOOLEXPR filter);
typedef void ( __cdecl * GroupEnumUnitsInRectCounted_FUNC) (HGROUP Group, HRECT r, HBOOLEXPR filter, int countLimit);
typedef void ( __cdecl * GroupEnumUnitsOfPlayer_FUNC) (HGROUP Group, HPLAYER player, HBOOLEXPR filter);
typedef void ( __cdecl * GroupEnumUnitsOfType_FUNC) (HGROUP Group, CJassString unitname, HBOOLEXPR filter);
typedef void ( __cdecl * GroupEnumUnitsOfTypeCounted_FUNC) (HGROUP Group, CJassString unitname, HBOOLEXPR filter, int countLimit);
typedef void ( __cdecl * GroupEnumUnitsSelected_FUNC) (HGROUP Group, HPLAYER player, HBOOLEXPR filter);
typedef BOOL ( __cdecl * GroupImmediateOrder_FUNC) (HGROUP Group, CJassString order);
typedef BOOL ( __cdecl * GroupImmediateOrderById_FUNC) (HGROUP Group, int order);
typedef BOOL ( __cdecl * GroupPointOrder_FUNC) (HGROUP Group, CJassString order, float *x, float *y);
typedef BOOL ( __cdecl * GroupPointOrderById_FUNC) (HGROUP Group, int order, float *x, float *y);
typedef BOOL ( __cdecl * GroupPointOrderByIdLoc_FUNC) (HGROUP Group, int order, HLOCATION Location);
typedef BOOL ( __cdecl * GroupPointOrderLoc_FUNC) (HGROUP Group, CJassString order, HLOCATION Location);
typedef void ( __cdecl * GroupRemoveUnit_FUNC) (HGROUP Group, HUNIT unit);
typedef BOOL ( __cdecl * GroupTargetOrder_FUNC) (HGROUP Group, CJassString order, HWIDGET targetWidget);
typedef BOOL ( __cdecl * GroupTargetOrderById_FUNC) (HGROUP Group, int order, HWIDGET targetWidget);
typedef void ( __cdecl * GroupTimedLife_FUNC) (BOOL arg1);
typedef void ( __cdecl * HarvestGold_FUNC) (int arg1, int arg2);
typedef void ( __cdecl * HarvestWood_FUNC) (int arg1, int arg2);
typedef BOOL ( __cdecl * HaveSavedBoolean_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef BOOL ( __cdecl * HaveSavedHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef BOOL ( __cdecl * HaveSavedInteger_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef BOOL ( __cdecl * HaveSavedReal_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef BOOL ( __cdecl * HaveSavedString_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef BOOL ( __cdecl * HaveStoredBoolean_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef BOOL ( __cdecl * HaveStoredInteger_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef BOOL ( __cdecl * HaveStoredReal_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef BOOL ( __cdecl * HaveStoredString_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef BOOL ( __cdecl * HaveStoredUnit_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef DWFP ( __cdecl * I2R_FUNC) (int i);
typedef CJassStringSID ( __cdecl * I2S_FUNC) (int i);
typedef int ( __cdecl * IgnoredUnits_FUNC) (int arg1);
typedef int ( __cdecl * IncUnitAbilityLevel_FUNC) (HUNIT unit, int abilcode);
typedef void ( __cdecl * InitAssault_FUNC) ();
typedef HGAMECACHE ( __cdecl * InitGameCache_FUNC) (CJassString campaignFile);
typedef HHASHTABLE ( __cdecl * InitHashtable_FUNC) ();
typedef BOOL ( __cdecl * IsCineFilterDisplayed_FUNC) ();
typedef BOOL ( __cdecl * IsDestructableInvulnerable_FUNC) (HDESTRUCTABLE d);
typedef BOOL ( __cdecl * IsFogEnabled_FUNC) ();
typedef BOOL ( __cdecl * IsFogMaskEnabled_FUNC) ();
typedef BOOL ( __cdecl * IsFoggedToPlayer_FUNC) (float *x, float *y, HPLAYER player);
typedef BOOL ( __cdecl * IsGameTypeSupported_FUNC) (HGAMETYPE GameType);
typedef BOOL ( __cdecl * IsHeroUnitId_FUNC) (int unitId);
typedef BOOL ( __cdecl * IsItemIdPawnable_FUNC) (int itemId);
typedef BOOL ( __cdecl * IsItemIdPowerup_FUNC) (int itemId);
typedef BOOL ( __cdecl * IsItemIdSellable_FUNC) (int itemId);
typedef BOOL ( __cdecl * IsItemInvulnerable_FUNC) (HITEM item);
typedef BOOL ( __cdecl * IsItemOwned_FUNC) (HITEM item);
typedef BOOL ( __cdecl * IsItemPawnable_FUNC) (HITEM item);
typedef BOOL ( __cdecl * IsItemPowerup_FUNC) (HITEM item);
typedef BOOL ( __cdecl * IsItemSellable_FUNC) (HITEM item);
typedef BOOL ( __cdecl * IsItemVisible_FUNC) (HITEM item);
typedef BOOL ( __cdecl * IsLeaderboardDisplayed_FUNC) (HLEADERBOARD lb);
typedef BOOL ( __cdecl * IsLocationFoggedToPlayer_FUNC) (HLOCATION Location, HPLAYER player);
typedef BOOL ( __cdecl * IsLocationInRegion_FUNC) (HREGION Region, HLOCATION Location);
typedef BOOL ( __cdecl * IsLocationMaskedToPlayer_FUNC) (HLOCATION Location, HPLAYER player);
typedef BOOL ( __cdecl * IsLocationVisibleToPlayer_FUNC) (HLOCATION Location, HPLAYER player);
typedef BOOL ( __cdecl * IsMapFlagSet_FUNC) (HMAPFLAG MapFlag);
typedef BOOL ( __cdecl * IsMaskedToPlayer_FUNC) (float *x, float *y, HPLAYER player);
typedef BOOL ( __cdecl * IsMultiboardDisplayed_FUNC) (HMULTIBOARD lb);
typedef BOOL ( __cdecl * IsMultiboardMinimized_FUNC) (HMULTIBOARD lb);
typedef BOOL ( __cdecl * IsNoDefeatCheat_FUNC) ();
typedef BOOL ( __cdecl * IsNoVictoryCheat_FUNC) ();
typedef BOOL ( __cdecl * IsPlayerAlly_FUNC) (HPLAYER player, HPLAYER otherPlayer);
typedef BOOL ( __cdecl * IsPlayerEnemy_FUNC) (HPLAYER player, HPLAYER otherPlayer);
typedef BOOL ( __cdecl * IsPlayerInForce_FUNC) (HPLAYER player, HFORCE Force);
typedef BOOL ( __cdecl * IsPlayerObserver_FUNC) (HPLAYER player);
typedef BOOL ( __cdecl * IsPlayerRacePrefSet_FUNC) (HPLAYER player, HRACEPREFERENCE pref);
typedef BOOL ( __cdecl * IsPointBlighted_FUNC) (float *x, float *y);
typedef BOOL ( __cdecl * IsPointInRegion_FUNC) (HREGION Region, float *x, float *y);
typedef BOOL ( __cdecl * IsQuestCompleted_FUNC) (HQUEST Quest);
typedef BOOL ( __cdecl * IsQuestDiscovered_FUNC) (HQUEST Quest);
typedef BOOL ( __cdecl * IsQuestEnabled_FUNC) (HQUEST Quest);
typedef BOOL ( __cdecl * IsQuestFailed_FUNC) (HQUEST Quest);
typedef BOOL ( __cdecl * IsQuestItemCompleted_FUNC) (HQUESTITEM QuestItem);
typedef BOOL ( __cdecl * IsQuestRequired_FUNC) (HQUEST Quest);
typedef BOOL ( __cdecl * IsSuspendedXP_FUNC) (HUNIT hero);
typedef BOOL ( __cdecl * IsTerrainPathable_FUNC) (float *x, float *y, HPATHINGTYPE t);
typedef BOOL ( __cdecl * IsTimerDialogDisplayed_FUNC) (HTIMERDIALOG Dialog);
typedef BOOL ( __cdecl * IsTowered_FUNC) (HUNIT arg1);
typedef BOOL ( __cdecl * IsTriggerEnabled_FUNC) (HTRIGGER Trigger);
typedef BOOL ( __cdecl * IsTriggerWaitOnSleeps_FUNC) (HTRIGGER Trigger);
typedef BOOL ( __cdecl * IsUnit_FUNC) (HUNIT unit, HUNIT SpecifiedUnit);
typedef BOOL ( __cdecl * IsUnitAlly_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitDetected_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitEnemy_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitFogged_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitHidden_FUNC) (HUNIT unit);
typedef BOOL ( __cdecl * IsUnitIdType_FUNC) (int unitId, HUNITTYPE UnitType);
typedef BOOL ( __cdecl * IsUnitIllusion_FUNC) (HUNIT unit);
typedef BOOL ( __cdecl * IsUnitInForce_FUNC) (HUNIT unit, HFORCE Force);
typedef BOOL ( __cdecl * IsUnitInGroup_FUNC) (HUNIT unit, HGROUP Group);
typedef BOOL ( __cdecl * IsUnitInRange_FUNC) (HUNIT unit, HUNIT otherUnit, float *distance);
typedef BOOL ( __cdecl * IsUnitInRangeLoc_FUNC) (HUNIT unit, HLOCATION Location, float *distance);
typedef BOOL ( __cdecl * IsUnitInRangeXY_FUNC) (HUNIT unit, float *x, float *y, float *distance);
typedef BOOL ( __cdecl * IsUnitInRegion_FUNC) (HREGION Region, HUNIT unit);
typedef BOOL ( __cdecl * IsUnitInTransport_FUNC) (HUNIT unit, HUNIT Transport);
typedef BOOL ( __cdecl * IsUnitInvisible_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitLoaded_FUNC) (HUNIT unit);
typedef BOOL ( __cdecl * IsUnitMasked_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitOwnedByPlayer_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitPaused_FUNC) (HUNIT hero);
typedef BOOL ( __cdecl * IsUnitRace_FUNC) (HUNIT unit, HRACE Race);
typedef BOOL ( __cdecl * IsUnitSelected_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsUnitType_FUNC) (HUNIT unit, HUNITTYPE UnitType);
typedef BOOL ( __cdecl * IsUnitVisible_FUNC) (HUNIT unit, HPLAYER player);
typedef BOOL ( __cdecl * IsVisibleToPlayer_FUNC) (float *x, float *y, HPLAYER player);
typedef BOOL ( __cdecl * IssueBuildOrder_FUNC) (HUNIT Peon, CJassString unitToBuild, float *x, float *y);
typedef BOOL ( __cdecl * IssueBuildOrderById_FUNC) (HUNIT Peon, int unitId, float *x, float *y);
typedef BOOL ( __cdecl * IssueImmediateOrder_FUNC) (HUNIT unit, CJassString order);
typedef BOOL ( __cdecl * IssueImmediateOrderById_FUNC) (HUNIT unit, int order);
typedef BOOL ( __cdecl * IssueInstantPointOrder_FUNC) (HUNIT unit, CJassString order, float *x, float *y, HWIDGET instantTargetWidget);
typedef BOOL ( __cdecl * IssueInstantPointOrderById_FUNC) (HUNIT unit, int order, float *x, float *y, HWIDGET instantTargetWidget);
typedef BOOL ( __cdecl * IssueInstantTargetOrder_FUNC) (HUNIT unit, CJassString order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
typedef BOOL ( __cdecl * IssueInstantTargetOrderById_FUNC) (HUNIT unit, int order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
typedef BOOL ( __cdecl * IssueNeutralImmediateOrder_FUNC) (HPLAYER forWhichPlayer, HUNIT neutralStructure, CJassString unitToBuild);
typedef BOOL ( __cdecl * IssueNeutralImmediateOrderById_FUNC) (HPLAYER forWhichPlayer, HUNIT neutralStructure, int unitId);
typedef BOOL ( __cdecl * IssueNeutralPointOrder_FUNC) (HPLAYER forWhichPlayer, HUNIT neutralStructure, CJassString unitToBuild, float *x, float *y);
typedef BOOL ( __cdecl * IssueNeutralPointOrderById_FUNC) (HPLAYER forWhichPlayer, HUNIT neutralStructure, int unitId, float *x, float *y);
typedef BOOL ( __cdecl * IssueNeutralTargetOrder_FUNC) (HPLAYER forWhichPlayer, HUNIT neutralStructure, CJassString unitToBuild, HWIDGET target);
typedef BOOL ( __cdecl * IssueNeutralTargetOrderById_FUNC) (HPLAYER forWhichPlayer, HUNIT neutralStructure, int unitId, HWIDGET target);
typedef BOOL ( __cdecl * IssuePointOrder_FUNC) (HUNIT unit, CJassString order, float *x, float *y);
typedef BOOL ( __cdecl * IssuePointOrderById_FUNC) (HUNIT unit, int order, float *x, float *y);
typedef BOOL ( __cdecl * IssuePointOrderByIdLoc_FUNC) (HUNIT unit, int order, HLOCATION Location);
typedef BOOL ( __cdecl * IssuePointOrderLoc_FUNC) (HUNIT unit, CJassString order, HLOCATION Location);
typedef BOOL ( __cdecl * IssueTargetOrder_FUNC) (HUNIT unit, CJassString order, HWIDGET targetWidget);
typedef BOOL ( __cdecl * IssueTargetOrderById_FUNC) (HUNIT unit, int order, HWIDGET targetWidget);
typedef void ( __cdecl * ItemPoolAddItemType_FUNC) (HITEMPOOL ItemPool, int itemId, float *weight);
typedef void ( __cdecl * ItemPoolRemoveItemType_FUNC) (HITEMPOOL ItemPool, int itemId);
typedef void ( __cdecl * KillDestructable_FUNC) (HDESTRUCTABLE d);
typedef void ( __cdecl * KillSoundWhenDone_FUNC) (HSOUND soundHandle);
typedef void ( __cdecl * KillUnit_FUNC) (HUNIT unit);
typedef void ( __cdecl * LeaderboardAddItem_FUNC) (HLEADERBOARD lb, CJassString label, int value, HPLAYER p);
typedef void ( __cdecl * LeaderboardClear_FUNC) (HLEADERBOARD lb);
typedef void ( __cdecl * LeaderboardDisplay_FUNC) (HLEADERBOARD lb, BOOL show);
typedef int ( __cdecl * LeaderboardGetItemCount_FUNC) (HLEADERBOARD lb);
typedef CJassStringSID ( __cdecl * LeaderboardGetLabelText_FUNC) (HLEADERBOARD lb);
typedef int ( __cdecl * LeaderboardGetPlayerIndex_FUNC) (HLEADERBOARD lb, HPLAYER p);
typedef BOOL ( __cdecl * LeaderboardHasPlayerItem_FUNC) (HLEADERBOARD lb, HPLAYER p);
typedef void ( __cdecl * LeaderboardRemoveItem_FUNC) (HLEADERBOARD lb, int index);
typedef void ( __cdecl * LeaderboardRemovePlayerItem_FUNC) (HLEADERBOARD lb, HPLAYER p);
typedef void ( __cdecl * LeaderboardSetItemLabel_FUNC) (HLEADERBOARD lb, int item, CJassString val);
typedef void ( __cdecl * LeaderboardSetItemLabelColor_FUNC) (HLEADERBOARD lb, int item, int red, int green, int blue, int alpha);
typedef void ( __cdecl * LeaderboardSetItemStyle_FUNC) (HLEADERBOARD lb, int item, BOOL showLabel, BOOL showValue, BOOL showIcon);
typedef void ( __cdecl * LeaderboardSetItemValue_FUNC) (HLEADERBOARD lb, int item, int val);
typedef void ( __cdecl * LeaderboardSetItemValueColor_FUNC) (HLEADERBOARD lb, int item, int red, int green, int blue, int alpha);
typedef void ( __cdecl * LeaderboardSetLabel_FUNC) (HLEADERBOARD lb, CJassString label);
typedef void ( __cdecl * LeaderboardSetLabelColor_FUNC) (HLEADERBOARD lb, int red, int green, int blue, int alpha);
typedef void ( __cdecl * LeaderboardSetSizeByItemCount_FUNC) (HLEADERBOARD lb, int count);
typedef void ( __cdecl * LeaderboardSetStyle_FUNC) (HLEADERBOARD lb, BOOL showLabel, BOOL showNames, BOOL showValues, BOOL showIcons);
typedef void ( __cdecl * LeaderboardSetValueColor_FUNC) (HLEADERBOARD lb, int red, int green, int blue, int alpha);
typedef void ( __cdecl * LeaderboardSortItemsByLabel_FUNC) (HLEADERBOARD lb, BOOL ascending);
typedef void ( __cdecl * LeaderboardSortItemsByPlayer_FUNC) (HLEADERBOARD lb, BOOL ascending);
typedef void ( __cdecl * LeaderboardSortItemsByValue_FUNC) (HLEADERBOARD lb, BOOL ascending);
typedef HABILITY ( __cdecl * LoadAbilityHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef BOOL ( __cdecl * LoadBoolean_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HBOOLEXPR ( __cdecl * LoadBooleanExprHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HBUTTON ( __cdecl * LoadButtonHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HDEFEATCONDITION ( __cdecl * LoadDefeatConditionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HDESTRUCTABLE ( __cdecl * LoadDestructableHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HDIALOG ( __cdecl * LoadDialogHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HEFFECT ( __cdecl * LoadEffectHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HFOGMODIFIER ( __cdecl * LoadFogModifierHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HFOGSTATE ( __cdecl * LoadFogStateHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HFORCE ( __cdecl * LoadForceHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * LoadGame_FUNC) (CJassString saveFileName, BOOL doScoreScreen);
typedef HGROUP ( __cdecl * LoadGroupHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HHASHTABLE ( __cdecl * LoadHashtableHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HIMAGE ( __cdecl * LoadImageHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef int ( __cdecl * LoadInteger_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HITEM ( __cdecl * LoadItemHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HITEMPOOL ( __cdecl * LoadItemPoolHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HLEADERBOARD ( __cdecl * LoadLeaderboardHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HLIGHTNING ( __cdecl * LoadLightningHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HLOCATION ( __cdecl * LoadLocationHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HMULTIBOARD ( __cdecl * LoadMultiboardHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HMULTIBOARDITEM ( __cdecl * LoadMultiboardItemHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HPLAYER ( __cdecl * LoadPlayerHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HQUEST ( __cdecl * LoadQuestHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HQUESTITEM ( __cdecl * LoadQuestItemHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef DWFP ( __cdecl * LoadReal_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HRECT ( __cdecl * LoadRectHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HREGION ( __cdecl * LoadRegionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HSOUND ( __cdecl * LoadSoundHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef CJassStringSID ( __cdecl * LoadStr_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTEXTTAG ( __cdecl * LoadTextTagHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTIMERDIALOG ( __cdecl * LoadTimerDialogHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTIMER ( __cdecl * LoadTimerHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTRACKABLE ( __cdecl * LoadTrackableHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTRIGGERACTION ( __cdecl * LoadTriggerActionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTRIGGERCONDITION ( __cdecl * LoadTriggerConditionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HEVENT ( __cdecl * LoadTriggerEventHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HTRIGGER ( __cdecl * LoadTriggerHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HUBERSPLAT ( __cdecl * LoadUbersplatHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HUNIT ( __cdecl * LoadUnitHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HUNITPOOL ( __cdecl * LoadUnitPoolHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef HWIDGET ( __cdecl * LoadWidgetHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * LoadZepWave_FUNC) (int arg1, int arg2);
typedef HLOCATION ( __cdecl * Location_FUNC) (float *x, float *y);
typedef int ( __cdecl * MeleeDifficulty_FUNC) ();
typedef BOOL ( __cdecl * MergeUnits_FUNC) (int arg1, int arg2, int arg3, int arg4);
typedef BOOL ( __cdecl * MoveLightning_FUNC) (HLIGHTNING Bolt, BOOL checkVisibility, float *x1, float *y1, float *x2, float *y2);
typedef BOOL ( __cdecl * MoveLightningEx_FUNC) (HLIGHTNING Bolt, BOOL checkVisibility, float *x1, float *y1, float *z1, float *x2, float *y2, float *z2);
typedef void ( __cdecl * MoveLocation_FUNC) (HLOCATION Location, float *newX, float *newY);
typedef void ( __cdecl * MoveRectTo_FUNC) (HRECT Rect, float *newCenterX, float *newCenterY);
typedef void ( __cdecl * MoveRectToLoc_FUNC) (HRECT Rect, HLOCATION newCenterLoc);
typedef void ( __cdecl * MultiboardClear_FUNC) (HMULTIBOARD lb);
typedef void ( __cdecl * MultiboardDisplay_FUNC) (HMULTIBOARD lb, BOOL show);
typedef int ( __cdecl * MultiboardGetColumnCount_FUNC) (HMULTIBOARD lb);
typedef HMULTIBOARDITEM ( __cdecl * MultiboardGetItem_FUNC) (HMULTIBOARD lb, int row, int column);
typedef int ( __cdecl * MultiboardGetRowCount_FUNC) (HMULTIBOARD lb);
typedef CJassStringSID ( __cdecl * MultiboardGetTitleText_FUNC) (HMULTIBOARD lb);
typedef void ( __cdecl * MultiboardMinimize_FUNC) (HMULTIBOARD lb, BOOL minimize);
typedef void ( __cdecl * MultiboardReleaseItem_FUNC) (HMULTIBOARDITEM mbi);
typedef void ( __cdecl * MultiboardSetColumnCount_FUNC) (HMULTIBOARD lb, int count);
typedef void ( __cdecl * MultiboardSetItemIcon_FUNC) (HMULTIBOARDITEM mbi, CJassString iconFileName);
typedef void ( __cdecl * MultiboardSetItemStyle_FUNC) (HMULTIBOARDITEM mbi, BOOL showValue, BOOL showIcon);
typedef void ( __cdecl * MultiboardSetItemValue_FUNC) (HMULTIBOARDITEM mbi, CJassString val);
typedef void ( __cdecl * MultiboardSetItemValueColor_FUNC) (HMULTIBOARDITEM mbi, int red, int green, int blue, int alpha);
typedef void ( __cdecl * MultiboardSetItemWidth_FUNC) (HMULTIBOARDITEM mbi, float *width);
typedef void ( __cdecl * MultiboardSetItemsIcon_FUNC) (HMULTIBOARD lb, CJassString iconPath);
typedef void ( __cdecl * MultiboardSetItemsStyle_FUNC) (HMULTIBOARD lb, BOOL showValues, BOOL showIcons);
typedef void ( __cdecl * MultiboardSetItemsValue_FUNC) (HMULTIBOARD lb, CJassString value);
typedef void ( __cdecl * MultiboardSetItemsValueColor_FUNC) (HMULTIBOARD lb, int red, int green, int blue, int alpha);
typedef void ( __cdecl * MultiboardSetItemsWidth_FUNC) (HMULTIBOARD lb, float *width);
typedef void ( __cdecl * MultiboardSetRowCount_FUNC) (HMULTIBOARD lb, int count);
typedef void ( __cdecl * MultiboardSetTitleText_FUNC) (HMULTIBOARD lb, CJassString label);
typedef void ( __cdecl * MultiboardSetTitleTextColor_FUNC) (HMULTIBOARD lb, int red, int green, int blue, int alpha);
typedef void ( __cdecl * MultiboardSuppressDisplay_FUNC) (BOOL flag);
typedef void ( __cdecl * NewSoundEnvironment_FUNC) (CJassString environmentName);
typedef HBOOLEXPR ( __cdecl * Not_FUNC) (HBOOLEXPR operand);
typedef HBOOLEXPR ( __cdecl * Or_FUNC) (HBOOLEXPR operandA, HBOOLEXPR operandB);
typedef int ( __cdecl * OrderId_FUNC) (CJassString orderIdString);
typedef CJassStringSID ( __cdecl * OrderId2String_FUNC) (int orderId);
typedef void ( __cdecl * PanCameraTo_FUNC) (float *x, float *y);
typedef void ( __cdecl * PanCameraToTimed_FUNC) (float *x, float *y, float *duration);
typedef void ( __cdecl * PanCameraToTimedWithZ_FUNC) (float *x, float *y, float *zOffsetDest, float *duration);
typedef void ( __cdecl * PanCameraToWithZ_FUNC) (float *x, float *y, float *zOffsetDest);
typedef void ( __cdecl * PauseCompAI_FUNC) (HPLAYER p, BOOL pause);
typedef void ( __cdecl * PauseGame_FUNC) (BOOL flag);
typedef void ( __cdecl * PauseTimer_FUNC) (HTIMER Timer);
typedef void ( __cdecl * PauseUnit_FUNC) (HUNIT unit, BOOL flag);
typedef void ( __cdecl * PingMinimap_FUNC) (float *x, float *y, float *duration);
typedef void ( __cdecl * PingMinimapEx_FUNC) (float *x, float *y, float *duration, int red, int green, int blue, BOOL extraEffects);
typedef HITEM ( __cdecl * PlaceRandomItem_FUNC) (HITEMPOOL ItemPool, float *x, float *y);
typedef HUNIT ( __cdecl * PlaceRandomUnit_FUNC) (HUNITPOOL Pool, HPLAYER forWhichPlayer, float *x, float *y, float *facing);
typedef void ( __cdecl * PlayCinematic_FUNC) (CJassString movieName);
typedef void ( __cdecl * PlayModelCinematic_FUNC) (CJassString modelName);
typedef void ( __cdecl * PlayMusic_FUNC) (CJassString musicName);
typedef void ( __cdecl * PlayMusicEx_FUNC) (CJassString musicName, int frommsecs, int fadeinmsecs);
typedef void ( __cdecl * PlayThematicMusic_FUNC) (CJassString musicFileName);
typedef void ( __cdecl * PlayThematicMusicEx_FUNC) (CJassString musicFileName, int frommsecs);
typedef HPLAYER ( __cdecl * Player_FUNC) (int number);
typedef HLEADERBOARD ( __cdecl * PlayerGetLeaderboard_FUNC) (HPLAYER toPlayer);
typedef void ( __cdecl * PlayerSetLeaderboard_FUNC) (HPLAYER toPlayer, HLEADERBOARD lb);
typedef void ( __cdecl * PopLastCommand_FUNC) ();
typedef DWFP ( __cdecl * Pow_FUNC) (float *x, float *power);
typedef void ( __cdecl * Preload_FUNC) (CJassString filename);
typedef void ( __cdecl * PreloadEnd_FUNC) (float *timeout);
typedef void ( __cdecl * PreloadEndEx_FUNC) ();
typedef void ( __cdecl * PreloadGenClear_FUNC) ();
typedef void ( __cdecl * PreloadGenEnd_FUNC) (CJassString filename);
typedef void ( __cdecl * PreloadGenStart_FUNC) ();
typedef void ( __cdecl * PreloadRefresh_FUNC) ();
typedef void ( __cdecl * PreloadStart_FUNC) ();
typedef void ( __cdecl * Preloader_FUNC) (CJassString filename);
typedef void ( __cdecl * PurchaseZeppelin_FUNC) ();
typedef HQUESTITEM ( __cdecl * QuestCreateItem_FUNC) (HQUEST Quest);
typedef void ( __cdecl * QuestItemSetCompleted_FUNC) (HQUESTITEM QuestItem, BOOL completed);
typedef void ( __cdecl * QuestItemSetDescription_FUNC) (HQUESTITEM QuestItem, CJassString description);
typedef void ( __cdecl * QuestSetCompleted_FUNC) (HQUEST Quest, BOOL completed);
typedef void ( __cdecl * QuestSetDescription_FUNC) (HQUEST Quest, CJassString description);
typedef void ( __cdecl * QuestSetDiscovered_FUNC) (HQUEST Quest, BOOL discovered);
typedef void ( __cdecl * QuestSetEnabled_FUNC) (HQUEST Quest, BOOL enabled);
typedef void ( __cdecl * QuestSetFailed_FUNC) (HQUEST Quest, BOOL failed);
typedef void ( __cdecl * QuestSetIconPath_FUNC) (HQUEST Quest, CJassString iconPath);
typedef void ( __cdecl * QuestSetRequired_FUNC) (HQUEST Quest, BOOL required);
typedef void ( __cdecl * QuestSetTitle_FUNC) (HQUEST Quest, CJassString title);
typedef void ( __cdecl * QueueDestructableAnimation_FUNC) (HDESTRUCTABLE d, CJassString Animation);
typedef void ( __cdecl * QueueUnitAnimation_FUNC) (HUNIT unit, CJassString Animation);
typedef int ( __cdecl * R2I_FUNC) (float *r);
typedef CJassStringSID ( __cdecl * R2S_FUNC) (float *r);
typedef CJassStringSID ( __cdecl * R2SW_FUNC) (float *r, int width, int precision);
typedef DWFP ( __cdecl * Rad2Deg_FUNC) (float *radians);
typedef HRECT ( __cdecl * Rect_FUNC) (float *minx, float *miny, float *maxx, float *maxy);
typedef HRECT ( __cdecl * RectFromLoc_FUNC) (HLOCATION min, HLOCATION max);
typedef void ( __cdecl * RecycleGuardPosition_FUNC) (HUNIT hUnit);
typedef void ( __cdecl * RegionAddCell_FUNC) (HREGION Region, float *x, float *y);
typedef void ( __cdecl * RegionAddCellAtLoc_FUNC) (HREGION Region, HLOCATION Location);
typedef void ( __cdecl * RegionAddRect_FUNC) (HREGION Region, HRECT r);
typedef void ( __cdecl * RegionClearCell_FUNC) (HREGION Region, float *x, float *y);
typedef void ( __cdecl * RegionClearCellAtLoc_FUNC) (HREGION Region, HLOCATION Location);
typedef void ( __cdecl * RegionClearRect_FUNC) (HREGION Region, HRECT r);
typedef void ( __cdecl * RegisterStackedSound_FUNC) (HSOUND soundHandle, BOOL byPosition, float *rectwidth, float *rectheight);
typedef void ( __cdecl * ReloadGame_FUNC) ();
typedef BOOL ( __cdecl * ReloadGameCachesFromDisk_FUNC) ();
typedef void ( __cdecl * RemoveAllGuardPositions_FUNC) (HPLAYER num);
typedef void ( __cdecl * RemoveDestructable_FUNC) (HDESTRUCTABLE d);
typedef void ( __cdecl * RemoveGuardPosition_FUNC) (HUNIT hUnit);
typedef void ( __cdecl * RemoveInjuries_FUNC) ();
typedef void ( __cdecl * RemoveItem_FUNC) (HITEM item);
typedef void ( __cdecl * RemoveItemFromAllStock_FUNC) (int itemId);
typedef void ( __cdecl * RemoveItemFromStock_FUNC) (HUNIT unit, int itemId);
typedef void ( __cdecl * RemoveLocation_FUNC) (HLOCATION Location);
typedef void ( __cdecl * RemovePlayer_FUNC) (HPLAYER player, HPLAYERGAMERESULT gameResult);
typedef void ( __cdecl * RemoveRect_FUNC) (HRECT Rect);
typedef void ( __cdecl * RemoveRegion_FUNC) (HREGION Region);
typedef BOOL ( __cdecl * RemoveSaveDirectory_FUNC) (CJassString sourceDirName);
typedef void ( __cdecl * RemoveSavedBoolean_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * RemoveSavedHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * RemoveSavedInteger_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * RemoveSavedReal_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * RemoveSavedString_FUNC) (HHASHTABLE table, int parentKey, int childKey);
typedef void ( __cdecl * RemoveSiege_FUNC) ();
typedef void ( __cdecl * RemoveUnit_FUNC) (HUNIT unit);
typedef void ( __cdecl * RemoveUnitFromAllStock_FUNC) (int unitId);
typedef void ( __cdecl * RemoveUnitFromStock_FUNC) (HUNIT unit, int unitId);
typedef void ( __cdecl * RemoveWeatherEffect_FUNC) (HWEATHEREFFECT Effect);
typedef BOOL ( __cdecl * RenameSaveDirectory_FUNC) (CJassString sourceDirName, CJassString destDirName);
typedef void ( __cdecl * ResetCaptainLocs_FUNC) ();
typedef void ( __cdecl * ResetTerrainFog_FUNC) ();
typedef void ( __cdecl * ResetToGameCamera_FUNC) (float *duration);
typedef void ( __cdecl * ResetTrigger_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * ResetUbersplat_FUNC) (HUBERSPLAT Splat);
typedef void ( __cdecl * ResetUnitLookAt_FUNC) (HUNIT unit);
typedef void ( __cdecl * RestartGame_FUNC) (BOOL doScoreScreen);
typedef HUNIT ( __cdecl * RestoreUnit_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key, HPLAYER forWhichPlayer, float *x, float *y, float *facing);
typedef void ( __cdecl * ResumeMusic_FUNC) ();
typedef void ( __cdecl * ResumeTimer_FUNC) (HTIMER Timer);
typedef void ( __cdecl * ReturnGuardPosts_FUNC) ();
typedef BOOL ( __cdecl * ReviveHero_FUNC) (HUNIT hero, float *x, float *y, BOOL doEyecandy);
typedef BOOL ( __cdecl * ReviveHeroLoc_FUNC) (HUNIT hero, HLOCATION loc, BOOL doEyecandy);
typedef int ( __cdecl * S2I_FUNC) (CJassString s);
typedef DWFP ( __cdecl * S2R_FUNC) (CJassString s);
typedef BOOL ( __cdecl * SaveAbilityHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HABILITY Ability);
typedef BOOL ( __cdecl * SaveAgentHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HAGENT Agent);
typedef void ( __cdecl * SaveBoolean_FUNC) (HHASHTABLE table, int parentKey, int childKey, BOOL value);
typedef BOOL ( __cdecl * SaveBooleanExprHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HBOOLEXPR Boolexpr);
typedef BOOL ( __cdecl * SaveButtonHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HBUTTON Button);
typedef BOOL ( __cdecl * SaveDefeatConditionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HDEFEATCONDITION Defeatcondition);
typedef BOOL ( __cdecl * SaveDestructableHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HDESTRUCTABLE Destructable);
typedef BOOL ( __cdecl * SaveDialogHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HDIALOG Dialog);
typedef BOOL ( __cdecl * SaveEffectHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HEFFECT Effect);
typedef BOOL ( __cdecl * SaveFogModifierHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HFOGMODIFIER FogModifier);
typedef BOOL ( __cdecl * SaveFogStateHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HFOGSTATE FogState);
typedef BOOL ( __cdecl * SaveForceHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HFORCE Force);
typedef void ( __cdecl * SaveGame_FUNC) (CJassString saveFileName);
typedef BOOL ( __cdecl * SaveGameCache_FUNC) (HGAMECACHE Cache);
typedef BOOL ( __cdecl * SaveGameExists_FUNC) (CJassString saveName);
typedef BOOL ( __cdecl * SaveGroupHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HGROUP Group);
typedef BOOL ( __cdecl * SaveHashtableHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HHASHTABLE Hashtable);
typedef BOOL ( __cdecl * SaveImageHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HIMAGE Image);
typedef void ( __cdecl * SaveInteger_FUNC) (HHASHTABLE table, int parentKey, int childKey, int value);
typedef BOOL ( __cdecl * SaveItemHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HITEM item);
typedef BOOL ( __cdecl * SaveItemPoolHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HITEMPOOL Itempool);
typedef BOOL ( __cdecl * SaveLeaderboardHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HLEADERBOARD Leaderboard);
typedef BOOL ( __cdecl * SaveLightningHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HLIGHTNING Lightning);
typedef BOOL ( __cdecl * SaveLocationHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HLOCATION Location);
typedef BOOL ( __cdecl * SaveMultiboardHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HMULTIBOARD Multiboard);
typedef BOOL ( __cdecl * SaveMultiboardItemHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HMULTIBOARDITEM Multiboarditem);
typedef BOOL ( __cdecl * SavePlayerHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HPLAYER player);
typedef BOOL ( __cdecl * SaveQuestHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HQUEST Quest);
typedef BOOL ( __cdecl * SaveQuestItemHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HQUESTITEM Questitem);
typedef void ( __cdecl * SaveReal_FUNC) (HHASHTABLE table, int parentKey, int childKey, float *value);
typedef BOOL ( __cdecl * SaveRectHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HRECT Rect);
typedef BOOL ( __cdecl * SaveRegionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HREGION Region);
typedef BOOL ( __cdecl * SaveSoundHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HSOUND Sound);
typedef BOOL ( __cdecl * SaveStr_FUNC) (HHASHTABLE table, int parentKey, int childKey, CJassString value);
typedef BOOL ( __cdecl * SaveTextTagHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTEXTTAG Texttag);
typedef BOOL ( __cdecl * SaveTimerDialogHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTIMERDIALOG Timerdialog);
typedef BOOL ( __cdecl * SaveTimerHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTIMER Timer);
typedef BOOL ( __cdecl * SaveTrackableHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTRACKABLE Trackable);
typedef BOOL ( __cdecl * SaveTriggerActionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTRIGGERACTION Triggeraction);
typedef BOOL ( __cdecl * SaveTriggerConditionHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTRIGGERCONDITION Triggercondition);
typedef BOOL ( __cdecl * SaveTriggerEventHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HEVENT Event);
typedef BOOL ( __cdecl * SaveTriggerHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HTRIGGER Trigger);
typedef BOOL ( __cdecl * SaveUbersplatHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HUBERSPLAT Ubersplat);
typedef BOOL ( __cdecl * SaveUnitHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HUNIT unit);
typedef BOOL ( __cdecl * SaveUnitPoolHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HUNITPOOL Unitpool);
typedef BOOL ( __cdecl * SaveWidgetHandle_FUNC) (HHASHTABLE table, int parentKey, int childKey, HWIDGET widget);
typedef void ( __cdecl * SelectHeroSkill_FUNC) (HUNIT hero, int abilcode);
typedef void ( __cdecl * SelectUnit_FUNC) (HUNIT unit, BOOL flag);
typedef void ( __cdecl * SetAllItemTypeSlots_FUNC) (int slots);
typedef void ( __cdecl * SetAllUnitTypeSlots_FUNC) (int slots);
typedef void ( __cdecl * SetAllianceTarget_FUNC) (HUNIT arg1);
typedef void ( __cdecl * SetAllyColorFilterState_FUNC) (int state);
typedef void ( __cdecl * SetAltMinimapIcon_FUNC) (CJassString iconPath);
typedef void ( __cdecl * SetAmphibious_FUNC) ();
typedef void ( __cdecl * SetBlight_FUNC) (HPLAYER player, float *x, float *y, float *radius, BOOL addBlight);
typedef void ( __cdecl * SetBlightLoc_FUNC) (HPLAYER player, HLOCATION Location, float *radius, BOOL addBlight);
typedef void ( __cdecl * SetBlightPoint_FUNC) (HPLAYER player, float *x, float *y, BOOL addBlight);
typedef void ( __cdecl * SetBlightRect_FUNC) (HPLAYER player, HRECT r, BOOL addBlight);
typedef void ( __cdecl * SetCameraBounds_FUNC) (float *x1, float *y1, float *x2, float *y2, float *x3, float *y3, float *x4, float *y4);
typedef void ( __cdecl * SetCameraField_FUNC) (HCAMERAFIELD field, float *value, float *duration);
typedef void ( __cdecl * SetCameraOrientController_FUNC) (HUNIT unit, float *xoffset, float *yoffset);
typedef void ( __cdecl * SetCameraPosition_FUNC) (float *x, float *y);
typedef void ( __cdecl * SetCameraQuickPosition_FUNC) (float *x, float *y);
typedef void ( __cdecl * SetCameraRotateMode_FUNC) (float *x, float *y, float *radiansToSweep, float *duration);
typedef void ( __cdecl * SetCameraTargetController_FUNC) (HUNIT unit, float *xoffset, float *yoffset, BOOL inheritOrientation);
typedef void ( __cdecl * SetCampaignAI_FUNC) ();
typedef void ( __cdecl * SetCampaignAvailable_FUNC) (int campaignNumber, BOOL available);
typedef void ( __cdecl * SetCampaignMenuRace_FUNC) (HRACE r);
typedef void ( __cdecl * SetCampaignMenuRaceEx_FUNC) (int campaignIndex);
typedef void ( __cdecl * SetCaptainChanges_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetCaptainHome_FUNC) (int arg1, float *arg2, float *arg3);
typedef void ( __cdecl * SetCineFilterBlendMode_FUNC) (HBLENDMODE Mode);
typedef void ( __cdecl * SetCineFilterDuration_FUNC) (float *duration);
typedef void ( __cdecl * SetCineFilterEndColor_FUNC) (int red, int green, int blue, int alpha);
typedef void ( __cdecl * SetCineFilterEndUV_FUNC) (float *minu, float *minv, float *maxu, float *maxv);
typedef void ( __cdecl * SetCineFilterStartColor_FUNC) (int red, int green, int blue, int alpha);
typedef void ( __cdecl * SetCineFilterStartUV_FUNC) (float *minu, float *minv, float *maxu, float *maxv);
typedef void ( __cdecl * SetCineFilterTexMapFlags_FUNC) (HTEXMAPFLAGS Flags);
typedef void ( __cdecl * SetCineFilterTexture_FUNC) (CJassString filename);
typedef void ( __cdecl * SetCinematicCamera_FUNC) (CJassString cameraModelFile);
typedef void ( __cdecl * SetCinematicScene_FUNC) (int portraitUnitId, HPLAYERCOLOR color, CJassString speakerTitle, CJassString text, float *sceneDuration, float *voiceoverDuration);
typedef void ( __cdecl * SetCreatureDensity_FUNC) (HMAPDENSITY density);
typedef void ( __cdecl * SetCreepCampFilterState_FUNC) (BOOL state);
typedef void ( __cdecl * SetCustomCampaignButtonVisible_FUNC) (int Button, BOOL visible);
typedef void ( __cdecl * SetDayNightModels_FUNC) (CJassString terrainDNCFile, CJassString unitDNCFile);
typedef void ( __cdecl * SetDefaultDifficulty_FUNC) (HGAMEDIFFICULTY g);
typedef void ( __cdecl * SetDefendPlayer_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetDestructableAnimation_FUNC) (HDESTRUCTABLE d, CJassString Animation);
typedef void ( __cdecl * SetDestructableAnimationSpeed_FUNC) (HDESTRUCTABLE d, float *speedFactor);
typedef void ( __cdecl * SetDestructableInvulnerable_FUNC) (HDESTRUCTABLE d, BOOL flag);
typedef void ( __cdecl * SetDestructableLife_FUNC) (HDESTRUCTABLE d, float *life);
typedef void ( __cdecl * SetDestructableMaxLife_FUNC) (HDESTRUCTABLE d, float *max);
typedef void ( __cdecl * SetDestructableOccluderHeight_FUNC) (HDESTRUCTABLE d, float *height);
typedef void ( __cdecl * SetDoodadAnimation_FUNC) (float *x, float *y, float *radius, int doodadID, BOOL nearestOnly, CJassString animName, BOOL animRandom);
typedef void ( __cdecl * SetDoodadAnimationRect_FUNC) (HRECT r, int doodadID, CJassString animName, BOOL animRandom);
typedef void ( __cdecl * SetEdCinematicAvailable_FUNC) (int campaignNumber, BOOL available);
typedef BOOL ( __cdecl * SetExpansion_FUNC) (HUNIT arg1, int arg2);
typedef void ( __cdecl * SetFloatGameState_FUNC) (HFGAMESTATE FloatGameState, float *value);
typedef void ( __cdecl * SetFogStateRadius_FUNC) (HPLAYER forWhichPlayer, HFOGSTATE State, float *centerx, float *centerY, float *radius, BOOL useSharedVision);
typedef void ( __cdecl * SetFogStateRadiusLoc_FUNC) (HPLAYER forWhichPlayer, HFOGSTATE State, HLOCATION center, float *radius, BOOL useSharedVision);
typedef void ( __cdecl * SetFogStateRect_FUNC) (HPLAYER forWhichPlayer, HFOGSTATE State, HRECT where, BOOL useSharedVision);
typedef void ( __cdecl * SetGameDifficulty_FUNC) (HGAMEDIFFICULTY difficulty);
typedef void ( __cdecl * SetGamePlacement_FUNC) (HPLACEMENT PlacementType);
typedef void ( __cdecl * SetGameSpeed_FUNC) (HGAMESPEED speed);
typedef void ( __cdecl * SetGameTypeSupported_FUNC) (HGAMETYPE GameType, BOOL value);
typedef void ( __cdecl * SetGroupsFlee_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetHeroAgi_FUNC) (HUNIT hero, int newAgi, BOOL permanent);
typedef void ( __cdecl * SetHeroInt_FUNC) (HUNIT hero, int newInt, BOOL permanent);
typedef void ( __cdecl * SetHeroLevel_FUNC) (HUNIT hero, int level, BOOL showEyeCandy);
typedef void ( __cdecl * SetHeroLevels_FUNC) (CODE arg1);
typedef void ( __cdecl * SetHeroStr_FUNC) (HUNIT hero, int newStr, BOOL permanent);
typedef void ( __cdecl * SetHeroXP_FUNC) (HUNIT hero, int newXpVal, BOOL showEyeCandy);
typedef void ( __cdecl * SetHeroesBuyItems_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetHeroesFlee_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetHeroesTakeItems_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetIgnoreInjured_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetImageAboveWater_FUNC) (HIMAGE Image, BOOL flag, BOOL useWaterAlpha);
typedef void ( __cdecl * SetImageColor_FUNC) (HIMAGE Image, int red, int green, int blue, int alpha);
typedef void ( __cdecl * SetImageConstantHeight_FUNC) (HIMAGE Image, BOOL flag, float *height);
typedef void ( __cdecl * SetImagePosition_FUNC) (HIMAGE Image, float *x, float *y, float *z);
typedef void ( __cdecl * SetImageRender_FUNC) (HIMAGE Image, BOOL flag);
typedef void ( __cdecl * SetImageRenderAlways_FUNC) (HIMAGE Image, BOOL flag);
typedef void ( __cdecl * SetImageType_FUNC) (HIMAGE Image, int imageType);
typedef void ( __cdecl * SetIntegerGameState_FUNC) (HIGAMESTATE IntegerGameState, int value);
typedef void ( __cdecl * SetIntroShotModel_FUNC) (CJassString introModelPath);
typedef void ( __cdecl * SetIntroShotText_FUNC) (CJassString introText);
typedef void ( __cdecl * SetItemCharges_FUNC) (HITEM item, int charges);
typedef void ( __cdecl * SetItemDropID_FUNC) (HITEM item, int unitId);
typedef void ( __cdecl * SetItemDropOnDeath_FUNC) (HITEM item, BOOL flag);
typedef void ( __cdecl * SetItemDroppable_FUNC) (HITEM i, BOOL flag);
typedef void ( __cdecl * SetItemInvulnerable_FUNC) (HITEM item, BOOL flag);
typedef void ( __cdecl * SetItemPawnable_FUNC) (HITEM i, BOOL flag);
typedef void ( __cdecl * SetItemPlayer_FUNC) (HITEM item, HPLAYER player, BOOL changeColor);
typedef void ( __cdecl * SetItemPosition_FUNC) (HITEM i, float *x, float *y);
typedef void ( __cdecl * SetItemTypeSlots_FUNC) (HUNIT unit, int slots);
typedef void ( __cdecl * SetItemUserData_FUNC) (HITEM item, int data);
typedef void ( __cdecl * SetItemVisible_FUNC) (HITEM item, BOOL show);
typedef BOOL ( __cdecl * SetLightningColor_FUNC) (HLIGHTNING Bolt, float *r, float *g, float *b, float *a);
typedef void ( __cdecl * SetMapDescription_FUNC) (CJassString description);
typedef void ( __cdecl * SetMapFlag_FUNC) (HMAPFLAG MapFlag, BOOL value);
typedef void ( __cdecl * SetMapMusic_FUNC) (CJassString musicName, BOOL random, int index);
typedef void ( __cdecl * SetMapName_FUNC) (CJassString name);
typedef void ( __cdecl * SetMeleeAI_FUNC) ();
typedef void ( __cdecl * SetMissionAvailable_FUNC) (int campaignNumber, int missionNumber, BOOL available);
typedef void ( __cdecl * SetMusicPlayPosition_FUNC) (int millisecs);
typedef void ( __cdecl * SetMusicVolume_FUNC) (int volume);
typedef void ( __cdecl * SetNewHeroes_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetOpCinematicAvailable_FUNC) (int campaignNumber, BOOL available);
typedef void ( __cdecl * SetPeonsRepair_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetPlayerAbilityAvailable_FUNC) (HPLAYER player, int abilid, BOOL avail);
typedef void ( __cdecl * SetPlayerAlliance_FUNC) (HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE AllianceSetting, BOOL value);
typedef void ( __cdecl * SetPlayerColor_FUNC) (HPLAYER player, HPLAYERCOLOR color);
typedef void ( __cdecl * SetPlayerController_FUNC) (HPLAYER player, HMAPCONTROL controlType);
typedef void ( __cdecl * SetPlayerHandicap_FUNC) (HPLAYER player, float *handicap);
typedef void ( __cdecl * SetPlayerHandicapXP_FUNC) (HPLAYER player, float *handicap);
typedef void ( __cdecl * SetPlayerName_FUNC) (HPLAYER player, CJassString name);
typedef void ( __cdecl * SetPlayerOnScoreScreen_FUNC) (HPLAYER player, BOOL flag);
typedef void ( __cdecl * SetPlayerRacePreference_FUNC) (HPLAYER player, HRACEPREFERENCE RacePreference);
typedef void ( __cdecl * SetPlayerRaceSelectable_FUNC) (HPLAYER player, BOOL value);
typedef void ( __cdecl * SetPlayerStartLocation_FUNC) (HPLAYER player, int startLocIndex);
typedef void ( __cdecl * SetPlayerState_FUNC) (HPLAYER player, HPLAYERSTATE PlayerState, int value);
typedef void ( __cdecl * SetPlayerTaxRate_FUNC) (HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE Resource, int rate);
typedef void ( __cdecl * SetPlayerTeam_FUNC) (HPLAYER player, int Team);
typedef void ( __cdecl * SetPlayerTechMaxAllowed_FUNC) (HPLAYER player, int techid, int maximum);
typedef void ( __cdecl * SetPlayerTechResearched_FUNC) (HPLAYER player, int techid, int setToLevel);
typedef void ( __cdecl * SetPlayerUnitsOwner_FUNC) (HPLAYER player, int newOwner);
typedef void ( __cdecl * SetPlayers_FUNC) (int playercount);
typedef BOOL ( __cdecl * SetProduce_FUNC) (int arg1, int arg2, int arg3);
typedef void ( __cdecl * SetRandomPaths_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetRandomSeed_FUNC) (int seed);
typedef void ( __cdecl * SetRect_FUNC) (HRECT Rect, float *minx, float *miny, float *maxx, float *maxy);
typedef void ( __cdecl * SetRectFromLoc_FUNC) (HRECT Rect, HLOCATION min, HLOCATION max);
typedef void ( __cdecl * SetReplacementCount_FUNC) (int arg1);
typedef void ( __cdecl * SetReservedLocalHeroButtons_FUNC) (int reserved);
typedef void ( __cdecl * SetResourceAmount_FUNC) (HUNIT unit, int amount);
typedef void ( __cdecl * SetResourceDensity_FUNC) (HMAPDENSITY density);
typedef void ( __cdecl * SetSkyModel_FUNC) (CJassString skyModelFile);
typedef void ( __cdecl * SetSlowChopping_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetSmartArtillery_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetSoundChannel_FUNC) (HSOUND soundHandle, int channel);
typedef void ( __cdecl * SetSoundConeAngles_FUNC) (HSOUND soundHandle, float *inside, float *outside, int outsideVolume);
typedef void ( __cdecl * SetSoundConeOrientation_FUNC) (HSOUND soundHandle, float *x, float *y, float *z);
typedef void ( __cdecl * SetSoundDistanceCutoff_FUNC) (HSOUND soundHandle, float *cutoff);
typedef void ( __cdecl * SetSoundDistances_FUNC) (HSOUND soundHandle, float *minDist, float *maxDist);
typedef void ( __cdecl * SetSoundDuration_FUNC) (HSOUND soundHandle, int duration);
typedef void ( __cdecl * SetSoundParamsFromLabel_FUNC) (HSOUND soundHandle, CJassString soundLabel);
typedef void ( __cdecl * SetSoundPitch_FUNC) (HSOUND soundHandle, float *pitch);
typedef void ( __cdecl * SetSoundPlayPosition_FUNC) (HSOUND soundHandle, int millisecs);
typedef void ( __cdecl * SetSoundPosition_FUNC) (HSOUND soundHandle, float *x, float *y, float *z);
typedef void ( __cdecl * SetSoundVelocity_FUNC) (HSOUND soundHandle, float *x, float *y, float *z);
typedef void ( __cdecl * SetSoundVolume_FUNC) (HSOUND soundHandle, int volume);
typedef void ( __cdecl * SetStackedSound_FUNC) (CJassString arg1, float *arg2, float *arg3);
typedef void ( __cdecl * SetStackedSoundRect_FUNC) (CJassString arg1, HRECT arg2);
typedef void ( __cdecl * SetStagePoint_FUNC) (float *arg1, float *arg2);
typedef void ( __cdecl * SetStartLocPrio_FUNC) (int StartLoc, int prioSlotIndex, int otherStartLocIndex, HSTARTLOCPRIO priority);
typedef void ( __cdecl * SetStartLocPrioCount_FUNC) (int StartLoc, int prioSlotCount);
typedef void ( __cdecl * SetTargetHeroes_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetTeams_FUNC) (int teamcount);
typedef void ( __cdecl * SetTerrainFog_FUNC) (float *a, float *b, float *c, float *d, float *e);
typedef void ( __cdecl * SetTerrainFogEx_FUNC) (int style, float *zstart, float *zend, float *density, float *red, float *green, float *blue);
typedef void ( __cdecl * SetTerrainPathable_FUNC) (float *x, float *y, HPATHINGTYPE t, BOOL flag);
typedef void ( __cdecl * SetTerrainType_FUNC) (float *x, float *y, int terrainType, int variation, int area, int shape);
typedef void ( __cdecl * SetTextTagAge_FUNC) (HTEXTTAG t, float *age);
typedef void ( __cdecl * SetTextTagColor_FUNC) (HTEXTTAG t, int red, int green, int blue, int alpha);
typedef void ( __cdecl * SetTextTagFadepoint_FUNC) (HTEXTTAG t, float *fadepoint);
typedef void ( __cdecl * SetTextTagLifespan_FUNC) (HTEXTTAG t, float *lifespan);
typedef void ( __cdecl * SetTextTagPermanent_FUNC) (HTEXTTAG t, BOOL flag);
typedef void ( __cdecl * SetTextTagPos_FUNC) (HTEXTTAG t, float *x, float *y, float *heightOffset);
typedef void ( __cdecl * SetTextTagPosUnit_FUNC) (HTEXTTAG t, HUNIT unit, float *heightOffset);
typedef void ( __cdecl * SetTextTagSuspended_FUNC) (HTEXTTAG t, BOOL flag);
typedef void ( __cdecl * SetTextTagText_FUNC) (HTEXTTAG t, CJassString s, float *height);
typedef void ( __cdecl * SetTextTagVelocity_FUNC) (HTEXTTAG t, float *xvel, float *yvel);
typedef void ( __cdecl * SetTextTagVisibility_FUNC) (HTEXTTAG t, BOOL flag);
typedef void ( __cdecl * SetThematicMusicPlayPosition_FUNC) (int millisecs);
typedef void ( __cdecl * SetTimeOfDayScale_FUNC) (float *r);
typedef void ( __cdecl * SetTutorialCleared_FUNC) (BOOL cleared);
typedef void ( __cdecl * SetUbersplatRender_FUNC) (HUBERSPLAT Splat, BOOL flag);
typedef void ( __cdecl * SetUbersplatRenderAlways_FUNC) (HUBERSPLAT Splat, BOOL flag);
typedef int ( __cdecl * SetUnitAbilityLevel_FUNC) (HUNIT unit, int abilcode, int level);
typedef void ( __cdecl * SetUnitAcquireRange_FUNC) (HUNIT unit, float *newAcquireRange);
typedef void ( __cdecl * SetUnitAnimation_FUNC) (HUNIT unit, CJassString Animation);
typedef void ( __cdecl * SetUnitAnimationByIndex_FUNC) (HUNIT unit, int Animation);
typedef void ( __cdecl * SetUnitAnimationWithRarity_FUNC) (HUNIT unit, CJassString Animation, HRARITYCONTROL rarity);
typedef void ( __cdecl * SetUnitBlendTime_FUNC) (HUNIT unit, float *blendTime);
typedef void ( __cdecl * SetUnitColor_FUNC) (HUNIT unit, HPLAYERCOLOR Color);
typedef void ( __cdecl * SetUnitCreepGuard_FUNC) (HUNIT unit, BOOL creepGuard);
typedef void ( __cdecl * SetUnitExploded_FUNC) (HUNIT unit, BOOL exploded);
typedef void ( __cdecl * SetUnitFacing_FUNC) (HUNIT unit, float *facingAngle);
typedef void ( __cdecl * SetUnitFacingTimed_FUNC) (HUNIT unit, float *facingAngle, float *duration);
typedef void ( __cdecl * SetUnitFlyHeight_FUNC) (HUNIT unit, float *newHeight, float *rate);
typedef void ( __cdecl * SetUnitFog_FUNC) (float *a, float *b, float *c, float *d, float *e);
typedef void ( __cdecl * SetUnitInvulnerable_FUNC) (HUNIT unit, BOOL flag);
typedef void ( __cdecl * SetUnitLookAt_FUNC) (HUNIT unit, CJassString Bone, HUNIT lookAtTarget, float *offsetX, float *offsetY, float *offsetZ);
typedef void ( __cdecl * SetUnitMoveSpeed_FUNC) (HUNIT unit, float *newSpeed);
typedef void ( __cdecl * SetUnitOwner_FUNC) (HUNIT unit, HPLAYER player, BOOL changeColor);
typedef void ( __cdecl * SetUnitPathing_FUNC) (HUNIT unit, BOOL flag);
typedef void ( __cdecl * SetUnitPosition_FUNC) (HUNIT unit, float *newX, float *newY);
typedef void ( __cdecl * SetUnitPositionLoc_FUNC) (HUNIT unit, HLOCATION Location);
typedef void ( __cdecl * SetUnitPropWindow_FUNC) (HUNIT unit, float *newPropWindowAngle);
typedef void ( __cdecl * SetUnitRescuable_FUNC) (HUNIT unit, HPLAYER byWhichPlayer, BOOL flag);
typedef void ( __cdecl * SetUnitRescueRange_FUNC) (HUNIT unit, float *range);
typedef void ( __cdecl * SetUnitScale_FUNC) (HUNIT unit, float *scaleX, float *scaleY, float *scaleZ);
typedef void ( __cdecl * SetUnitState_FUNC) (HUNIT unit, HUNITSTATE UnitState, float *newVal);
typedef void ( __cdecl * SetUnitTimeScale_FUNC) (HUNIT unit, float *timeScale);
typedef void ( __cdecl * SetUnitTurnSpeed_FUNC) (HUNIT unit, float *newTurnSpeed);
typedef void ( __cdecl * SetUnitTypeSlots_FUNC) (HUNIT unit, int slots);
typedef void ( __cdecl * SetUnitUseFood_FUNC) (HUNIT unit, BOOL useFood);
typedef void ( __cdecl * SetUnitUserData_FUNC) (HUNIT unit, int data);
typedef void ( __cdecl * SetUnitVertexColor_FUNC) (HUNIT unit, int red, int green, int blue, int alpha);
typedef void ( __cdecl * SetUnitX_FUNC) (HUNIT unit, float *newX);
typedef void ( __cdecl * SetUnitY_FUNC) (HUNIT unit, float *newY);
typedef void ( __cdecl * SetUnitsFlee_FUNC) (BOOL arg1);
typedef BOOL ( __cdecl * SetUpgrade_FUNC) (int arg1);
typedef void ( __cdecl * SetWatchMegaTargets_FUNC) (BOOL arg1);
typedef void ( __cdecl * SetWaterBaseColor_FUNC) (int red, int green, int blue, int alpha);
typedef void ( __cdecl * SetWaterDeforms_FUNC) (BOOL val);
typedef void ( __cdecl * SetWidgetLife_FUNC) (HWIDGET widget, float *newLife);
typedef void ( __cdecl * ShiftTownSpot_FUNC) (float *arg1, float *arg2);
typedef void ( __cdecl * ShowDestructable_FUNC) (HDESTRUCTABLE d, BOOL flag);
typedef void ( __cdecl * ShowImage_FUNC) (HIMAGE Image, BOOL flag);
typedef void ( __cdecl * ShowInterface_FUNC) (BOOL flag, float *fadeDuration);
typedef void ( __cdecl * ShowUbersplat_FUNC) (HUBERSPLAT Splat, BOOL flag);
typedef void ( __cdecl * ShowUnit_FUNC) (HUNIT unit, BOOL show);
typedef DWFP ( __cdecl * Sin_FUNC) (float *radians);
typedef void ( __cdecl * Sleep_FUNC) (float *arg1);
typedef DWFP ( __cdecl * SquareRoot_FUNC) (float *x);
typedef void ( __cdecl * StartCampaignAI_FUNC) (HPLAYER num, CJassString script);
typedef void ( __cdecl * StartGetEnemyBase_FUNC) ();
typedef void ( __cdecl * StartMeleeAI_FUNC) (HPLAYER num, CJassString script);
typedef void ( __cdecl * StartSound_FUNC) (HSOUND soundHandle);
typedef void ( __cdecl * StartThread_FUNC) (CODE arg1);
typedef void ( __cdecl * StopCamera_FUNC) ();
typedef void ( __cdecl * StopGathering_FUNC) ();
typedef void ( __cdecl * StopMusic_FUNC) (BOOL fadeOut);
typedef void ( __cdecl * StopSound_FUNC) (HSOUND soundHandle, BOOL killWhenDone, BOOL fadeOut);
typedef void ( __cdecl * StoreBoolean_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key, BOOL value);
typedef void ( __cdecl * StoreInteger_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key, int value);
typedef void ( __cdecl * StoreReal_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key, float *value);
typedef BOOL ( __cdecl * StoreString_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key, CJassString value);
typedef BOOL ( __cdecl * StoreUnit_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key, HUNIT unit);
typedef CJassStringSID ( __cdecl * StringCase_FUNC) (CJassString source, BOOL upper);
typedef int ( __cdecl * StringHash_FUNC) (CJassString s);
typedef int ( __cdecl * StringLength_FUNC) (CJassString s);
typedef CJassStringSID ( __cdecl * SubString_FUNC) (CJassString source, int start, int end);
typedef BOOL ( __cdecl * SuicidePlayer_FUNC) (HPLAYER arg1, BOOL arg2);
typedef BOOL ( __cdecl * SuicidePlayerUnits_FUNC) (HPLAYER arg1, BOOL arg2);
typedef void ( __cdecl * SuicideUnit_FUNC) (int arg1, int arg2);
typedef void ( __cdecl * SuicideUnitEx_FUNC) (int arg1, int arg2, int arg3);
typedef void ( __cdecl * SuspendHeroXP_FUNC) (HUNIT hero, BOOL flag);
typedef void ( __cdecl * SuspendTimeOfDay_FUNC) (BOOL b);
typedef void ( __cdecl * SyncSelections_FUNC) ();
typedef void ( __cdecl * SyncStoredBoolean_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * SyncStoredInteger_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * SyncStoredReal_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * SyncStoredString_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef void ( __cdecl * SyncStoredUnit_FUNC) (HGAMECACHE cache, CJassString missionKey, CJassString key);
typedef DWFP ( __cdecl * Tan_FUNC) (float *radians);
typedef void ( __cdecl * TeleportCaptain_FUNC) (float *arg1, float *arg2);
typedef HTERRAINDEFORMATION ( __cdecl * TerrainDeformCrater_FUNC) (float *x, float *y, float *radius, float *depth, int duration, BOOL permanent);
typedef HTERRAINDEFORMATION ( __cdecl * TerrainDeformRandom_FUNC) (float *x, float *y, float *radius, float *minDelta, float *maxDelta, int duration, int updateInterval);
typedef HTERRAINDEFORMATION ( __cdecl * TerrainDeformRipple_FUNC) (float *x, float *y, float *radius, float *depth, int duration, int count, float *spaceWaves, float *timeWaves, float *radiusStartPct, BOOL limitNeg);
typedef void ( __cdecl * TerrainDeformStop_FUNC) (HTERRAINDEFORMATION deformation, int duration);
typedef void ( __cdecl * TerrainDeformStopAll_FUNC) ();
typedef HTERRAINDEFORMATION ( __cdecl * TerrainDeformWave_FUNC) (float *x, float *y, float *dirX, float *dirY, float *distance, float *speed, float *radius, float *depth, int trailTime, int count);
typedef void ( __cdecl * TimerDialogDisplay_FUNC) (HTIMERDIALOG Dialog, BOOL display);
typedef void ( __cdecl * TimerDialogSetRealTimeRemaining_FUNC) (HTIMERDIALOG Dialog, float *timeRemaining);
typedef void ( __cdecl * TimerDialogSetSpeed_FUNC) (HTIMERDIALOG Dialog, float *speedMultFactor);
typedef void ( __cdecl * TimerDialogSetTimeColor_FUNC) (HTIMERDIALOG Dialog, int red, int green, int blue, int alpha);
typedef void ( __cdecl * TimerDialogSetTitle_FUNC) (HTIMERDIALOG Dialog, CJassString title);
typedef void ( __cdecl * TimerDialogSetTitleColor_FUNC) (HTIMERDIALOG Dialog, int red, int green, int blue, int alpha);
typedef DWFP ( __cdecl * TimerGetElapsed_FUNC) (HTIMER Timer);
typedef DWFP ( __cdecl * TimerGetRemaining_FUNC) (HTIMER Timer);
typedef DWFP ( __cdecl * TimerGetTimeout_FUNC) (HTIMER Timer);
typedef void ( __cdecl * TimerStart_FUNC) (HTIMER Timer, float *timeout, BOOL periodic, CODE handlerFunc);
typedef BOOL ( __cdecl * TownHasHall_FUNC) (int arg1);
typedef BOOL ( __cdecl * TownHasMine_FUNC) (int arg1);
typedef BOOL ( __cdecl * TownThreatened_FUNC) ();
typedef int ( __cdecl * TownWithMine_FUNC) ();
typedef HTRIGGERACTION ( __cdecl * TriggerAddAction_FUNC) (HTRIGGER Trigger, CODE actionFunc);
typedef HTRIGGERCONDITION ( __cdecl * TriggerAddCondition_FUNC) (HTRIGGER Trigger, HBOOLEXPR condition);
typedef void ( __cdecl * TriggerClearActions_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * TriggerClearConditions_FUNC) (HTRIGGER Trigger);
typedef BOOL ( __cdecl * TriggerEvaluate_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * TriggerExecute_FUNC) (HTRIGGER Trigger);
typedef void ( __cdecl * TriggerExecuteWait_FUNC) (HTRIGGER Trigger);
typedef HEVENT ( __cdecl * TriggerRegisterDeathEvent_FUNC) (HTRIGGER Trigger, HWIDGET widget);
typedef HEVENT ( __cdecl * TriggerRegisterDialogButtonEvent_FUNC) (HTRIGGER Trigger, HBUTTON Button);
typedef HEVENT ( __cdecl * TriggerRegisterDialogEvent_FUNC) (HTRIGGER Trigger, HDIALOG Dialog);
typedef HEVENT ( __cdecl * TriggerRegisterEnterRegion_FUNC) (HTRIGGER Trigger, HREGION Region, HBOOLEXPR filter);
typedef HEVENT ( __cdecl * TriggerRegisterFilterUnitEvent_FUNC) (HTRIGGER Trigger, HUNIT unit, HUNITEVENT Event, HBOOLEXPR filter);
typedef HEVENT ( __cdecl * TriggerRegisterGameEvent_FUNC) (HTRIGGER Trigger, HGAMEEVENT GameEvent);
typedef HEVENT ( __cdecl * TriggerRegisterGameStateEvent_FUNC) (HTRIGGER Trigger, HGAMESTATE State, HLIMITOP opcode, float *limitval);
typedef HEVENT ( __cdecl * TriggerRegisterLeaveRegion_FUNC) (HTRIGGER Trigger, HREGION Region, HBOOLEXPR filter);
typedef HEVENT ( __cdecl * TriggerRegisterPlayerAllianceChange_FUNC) (HTRIGGER Trigger, HPLAYER player, HALLIANCETYPE Alliance);
typedef HEVENT ( __cdecl * TriggerRegisterPlayerChatEvent_FUNC) (HTRIGGER Trigger, HPLAYER player, CJassString chatMessageToDetect, BOOL exactMatchOnly);
typedef HEVENT ( __cdecl * TriggerRegisterPlayerEvent_FUNC) (HTRIGGER Trigger, HPLAYER player, HPLAYEREVENT PlayerEvent);
typedef HEVENT ( __cdecl * TriggerRegisterPlayerStateEvent_FUNC) (HTRIGGER Trigger, HPLAYER player, HPLAYERSTATE State, HLIMITOP opcode, float *limitval);
typedef HEVENT ( __cdecl * TriggerRegisterPlayerUnitEvent_FUNC) (HTRIGGER Trigger, HPLAYER player, HPLAYERUNITEVENT PlayerUnitEvent, HBOOLEXPR filter);
typedef HEVENT ( __cdecl * TriggerRegisterTimerEvent_FUNC) (HTRIGGER Trigger, float *timeout, BOOL periodic);
typedef HEVENT ( __cdecl * TriggerRegisterTimerExpireEvent_FUNC) (HTRIGGER Trigger, HTIMER t);
typedef HEVENT ( __cdecl * TriggerRegisterTrackableHitEvent_FUNC) (HTRIGGER Trigger, HTRACKABLE t);
typedef HEVENT ( __cdecl * TriggerRegisterTrackableTrackEvent_FUNC) (HTRIGGER Trigger, HTRACKABLE t);
typedef HEVENT ( __cdecl * TriggerRegisterUnitEvent_FUNC) (HTRIGGER Trigger, HUNIT unit, HUNITEVENT Event);
typedef HEVENT ( __cdecl * TriggerRegisterUnitInRange_FUNC) (HTRIGGER Trigger, HUNIT unit, float *range, HBOOLEXPR filter);
typedef HEVENT ( __cdecl * TriggerRegisterUnitStateEvent_FUNC) (HTRIGGER Trigger, HUNIT unit, HUNITSTATE State, HLIMITOP opcode, float *limitval);
typedef HEVENT ( __cdecl * TriggerRegisterVariableEvent_FUNC) (HTRIGGER Trigger, CJassString varName, HLIMITOP opcode, float *limitval);
typedef void ( __cdecl * TriggerRemoveAction_FUNC) (HTRIGGER Trigger, HTRIGGERACTION Action);
typedef void ( __cdecl * TriggerRemoveCondition_FUNC) (HTRIGGER Trigger, HTRIGGERCONDITION Condition);
typedef void ( __cdecl * TriggerSleepAction_FUNC) (float *timeout);
typedef void ( __cdecl * TriggerSyncReady_FUNC) ();
typedef void ( __cdecl * TriggerSyncStart_FUNC) ();
typedef void ( __cdecl * TriggerWaitForSound_FUNC) (HSOUND s, float *offset);
typedef void ( __cdecl * TriggerWaitOnSleeps_FUNC) (HTRIGGER Trigger, BOOL flag);
typedef BOOL ( __cdecl * UnitAddAbility_FUNC) (HUNIT unit, int AbilID);
typedef void ( __cdecl * UnitAddIndicator_FUNC) (HUNIT unit, int red, int green, int blue, int alpha);
typedef BOOL ( __cdecl * UnitAddItem_FUNC) (HUNIT unit, HITEM item);
typedef HITEM ( __cdecl * UnitAddItemById_FUNC) (HUNIT unit, int itemId);
typedef BOOL ( __cdecl * UnitAddItemToSlotById_FUNC) (HUNIT unit, int itemId, int itemSlot);
typedef void ( __cdecl * UnitAddSleep_FUNC) (HUNIT unit, BOOL add);
typedef void ( __cdecl * UnitAddSleepPerm_FUNC) (HUNIT unit, BOOL add);
typedef BOOL ( __cdecl * UnitAddType_FUNC) (HUNIT unit, HUNITTYPE UnitType);
typedef BOOL ( __cdecl * UnitAlive_FUNC) (HUNIT arg1);
typedef void ( __cdecl * UnitApplyTimedLife_FUNC) (HUNIT unit, int buffId, float *duration);
typedef BOOL ( __cdecl * UnitCanSleep_FUNC) (HUNIT unit);
typedef BOOL ( __cdecl * UnitCanSleepPerm_FUNC) (HUNIT unit);
typedef int ( __cdecl * UnitCountBuffsEx_FUNC) (HUNIT unit, BOOL removePositive, BOOL removeNegative, BOOL magic, BOOL physical, BOOL timedLife, BOOL aura, BOOL autoDispel);
typedef BOOL ( __cdecl * UnitDamagePoint_FUNC) (HUNIT unit, float *delay, float *radius, float *x, float *y, float *amount, BOOL attack, BOOL ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
typedef BOOL ( __cdecl * UnitDamageTarget_FUNC) (HUNIT unit, HWIDGET target, float *amount, BOOL attack, BOOL ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
typedef BOOL ( __cdecl * UnitDropItemPoint_FUNC) (HUNIT unit, HITEM item, float *x, float *y);
typedef BOOL ( __cdecl * UnitDropItemSlot_FUNC) (HUNIT unit, HITEM item, int slot);
typedef BOOL ( __cdecl * UnitDropItemTarget_FUNC) (HUNIT unit, HITEM item, HWIDGET target);
typedef BOOL ( __cdecl * UnitHasBuffsEx_FUNC) (HUNIT unit, BOOL removePositive, BOOL removeNegative, BOOL magic, BOOL physical, BOOL timedLife, BOOL aura, BOOL autoDispel);
typedef BOOL ( __cdecl * UnitHasItem_FUNC) (HUNIT unit, HITEM item);
typedef int ( __cdecl * UnitId_FUNC) (CJassString unitIdString);
typedef CJassStringSID ( __cdecl * UnitId2String_FUNC) (int unitId);
typedef BOOL ( __cdecl * UnitIgnoreAlarm_FUNC) (HUNIT unit, BOOL flag);
typedef BOOL ( __cdecl * UnitIgnoreAlarmToggled_FUNC) (HUNIT unit);
typedef int ( __cdecl * UnitInventorySize_FUNC) (HUNIT unit);
typedef BOOL ( __cdecl * UnitInvis_FUNC) (HUNIT arg1);
typedef BOOL ( __cdecl * UnitIsSleeping_FUNC) (HUNIT unit);
typedef HITEM ( __cdecl * UnitItemInSlot_FUNC) (HUNIT unit, int itemSlot);
typedef BOOL ( __cdecl * UnitMakeAbilityPermanent_FUNC) (HUNIT unit, BOOL permanent, int AbilID);
typedef BOOL ( __cdecl * UnitModifySkillPoints_FUNC) (HUNIT hero, int skillPointDelta);
typedef void ( __cdecl * UnitPauseTimedLife_FUNC) (HUNIT unit, BOOL flag);
typedef void ( __cdecl * UnitPoolAddUnitType_FUNC) (HUNITPOOL Pool, int unitId, float *weight);
typedef void ( __cdecl * UnitPoolRemoveUnitType_FUNC) (HUNITPOOL Pool, int unitId);
typedef BOOL ( __cdecl * UnitRemoveAbility_FUNC) (HUNIT unit, int AbilID);
typedef void ( __cdecl * UnitRemoveBuffs_FUNC) (HUNIT unit, BOOL removePositive, BOOL removeNegative);
typedef void ( __cdecl * UnitRemoveBuffsEx_FUNC) (HUNIT unit, BOOL removePositive, BOOL removeNegative, BOOL magic, BOOL physical, BOOL timedLife, BOOL aura, BOOL autoDispel);
typedef void ( __cdecl * UnitRemoveItem_FUNC) (HUNIT unit, HITEM item);
typedef HITEM ( __cdecl * UnitRemoveItemFromSlot_FUNC) (HUNIT unit, int itemSlot);
typedef BOOL ( __cdecl * UnitRemoveType_FUNC) (HUNIT unit, HUNITTYPE UnitType);
typedef void ( __cdecl * UnitResetCooldown_FUNC) (HUNIT unit);
typedef void ( __cdecl * UnitSetConstructionProgress_FUNC) (HUNIT unit, int constructionPercentage);
typedef void ( __cdecl * UnitSetUpgradeProgress_FUNC) (HUNIT unit, int upgradePercentage);
typedef void ( __cdecl * UnitSetUsesAltIcon_FUNC) (HUNIT unit, BOOL flag);
typedef void ( __cdecl * UnitShareVision_FUNC) (HUNIT unit, HPLAYER player, BOOL share);
typedef BOOL ( __cdecl * UnitStripHeroLevel_FUNC) (HUNIT hero, int howManyLevels);
typedef void ( __cdecl * UnitSuspendDecay_FUNC) (HUNIT unit, BOOL suspend);
typedef BOOL ( __cdecl * UnitUseItem_FUNC) (HUNIT unit, HITEM item);
typedef BOOL ( __cdecl * UnitUseItemPoint_FUNC) (HUNIT unit, HITEM item, float *x, float *y);
typedef BOOL ( __cdecl * UnitUseItemTarget_FUNC) (HUNIT unit, HITEM item, HWIDGET target);
typedef void ( __cdecl * UnitWakeUp_FUNC) (HUNIT unit);
typedef void ( __cdecl * UnregisterStackedSound_FUNC) (HSOUND soundHandle, BOOL byPosition, float *rectwidth, float *rectheight);
typedef void ( __cdecl * Unsummon_FUNC) (HUNIT arg1);
typedef BOOL ( __cdecl * VersionCompatible_FUNC) (HVERSION Version);
typedef HVERSION ( __cdecl * VersionGet_FUNC) ();
typedef BOOL ( __cdecl * VersionSupported_FUNC) (HVERSION Version);
typedef void ( __cdecl * VolumeGroupReset_FUNC) ();
typedef void ( __cdecl * VolumeGroupSetVolume_FUNC) (HVOLUMEGROUP vgroup, float *scale);
typedef BOOL ( __cdecl * WaitGetEnemyBase_FUNC) ();
typedef void ( __cdecl * WaygateActivate_FUNC) (HUNIT waygate, BOOL activate);
typedef DWFP ( __cdecl * WaygateGetDestinationX_FUNC) (HUNIT waygate);
typedef DWFP ( __cdecl * WaygateGetDestinationY_FUNC) (HUNIT waygate);
typedef BOOL ( __cdecl * WaygateIsActive_FUNC) (HUNIT waygate);
typedef void ( __cdecl * WaygateSetDestination_FUNC) (HUNIT waygate, float *x, float *y);
extern AbilityId_FUNC AbilityId_org;
extern AbilityId_FUNC AbilityId_ptr;
extern int _cdecl AbilityId_my(CJassString abilityIdString);
extern AbilityId2String_FUNC AbilityId2String_org;
extern AbilityId2String_FUNC AbilityId2String_ptr;
extern CJassStringSID _cdecl AbilityId2String_my(int AbilID);
extern Acos_FUNC Acos_org;
extern Acos_FUNC Acos_ptr;
extern DWFP _cdecl Acos_my(float *x);
extern AddAssault_FUNC AddAssault_org;
extern AddAssault_FUNC AddAssault_ptr;
extern BOOL _cdecl AddAssault_my(int arg1, int arg2);
extern AddDefenders_FUNC AddDefenders_org;
extern AddDefenders_FUNC AddDefenders_ptr;
extern BOOL _cdecl AddDefenders_my(int arg1, int arg2);
extern AddGuardPost_FUNC AddGuardPost_org;
extern AddGuardPost_FUNC AddGuardPost_ptr;
extern void _cdecl AddGuardPost_my(int arg1, float *arg2, float *arg3);
extern AddHeroXP_FUNC AddHeroXP_org;
extern AddHeroXP_FUNC AddHeroXP_ptr;
extern void _cdecl AddHeroXP_my(HUNIT hero, int xpToAdd, BOOL showEyeCandy);
extern AddIndicator_FUNC AddIndicator_org;
extern AddIndicator_FUNC AddIndicator_ptr;
extern void _cdecl AddIndicator_my(HWIDGET widget, int red, int green, int blue, int alpha);
extern AddItemToAllStock_FUNC AddItemToAllStock_org;
extern AddItemToAllStock_FUNC AddItemToAllStock_ptr;
extern void _cdecl AddItemToAllStock_my(int itemId, int currentStock, int stockMax);
extern AddItemToStock_FUNC AddItemToStock_org;
extern AddItemToStock_FUNC AddItemToStock_ptr;
extern void _cdecl AddItemToStock_my(HUNIT unit, int itemId, int currentStock, int stockMax);
extern AddLightning_FUNC AddLightning_org;
extern AddLightning_FUNC AddLightning_ptr;
extern HLIGHTNING _cdecl AddLightning_my(CJassString codeName, BOOL checkVisibility, float *x1, float *y1, float *x2, float *y2);
extern AddLightningEx_FUNC AddLightningEx_org;
extern AddLightningEx_FUNC AddLightningEx_ptr;
extern HLIGHTNING _cdecl AddLightningEx_my(CJassString codeName, BOOL checkVisibility, float *x1, float *y1, float *z1, float *x2, float *y2, float *z2);
extern AddPlayerTechResearched_FUNC AddPlayerTechResearched_org;
extern AddPlayerTechResearched_FUNC AddPlayerTechResearched_ptr;
extern void _cdecl AddPlayerTechResearched_my(HPLAYER player, int techid, int levels);
extern AddResourceAmount_FUNC AddResourceAmount_org;
extern AddResourceAmount_FUNC AddResourceAmount_ptr;
extern void _cdecl AddResourceAmount_my(HUNIT unit, int amount);
extern AddSpecialEffect_FUNC AddSpecialEffect_org;
extern AddSpecialEffect_FUNC AddSpecialEffect_ptr;
extern HEFFECT _cdecl AddSpecialEffect_my(CJassString modelName, float *x, float *y);
extern AddSpecialEffectLoc_FUNC AddSpecialEffectLoc_org;
extern AddSpecialEffectLoc_FUNC AddSpecialEffectLoc_ptr;
extern HEFFECT _cdecl AddSpecialEffectLoc_my(CJassString modelName, HLOCATION where);
extern AddSpecialEffectTarget_FUNC AddSpecialEffectTarget_org;
extern AddSpecialEffectTarget_FUNC AddSpecialEffectTarget_ptr;
extern HEFFECT _cdecl AddSpecialEffectTarget_my(CJassString modelName, HWIDGET targetWidget, CJassString attachPointName);
extern AddSpellEffect_FUNC AddSpellEffect_org;
extern AddSpellEffect_FUNC AddSpellEffect_ptr;
extern HEFFECT _cdecl AddSpellEffect_my(CJassString abilityString, HEFFECTTYPE t, float *x, float *y);
extern AddSpellEffectById_FUNC AddSpellEffectById_org;
extern AddSpellEffectById_FUNC AddSpellEffectById_ptr;
extern HEFFECT _cdecl AddSpellEffectById_my(int AbilID, HEFFECTTYPE t, float *x, float *y);
extern AddSpellEffectByIdLoc_FUNC AddSpellEffectByIdLoc_org;
extern AddSpellEffectByIdLoc_FUNC AddSpellEffectByIdLoc_ptr;
extern HEFFECT _cdecl AddSpellEffectByIdLoc_my(int AbilID, HEFFECTTYPE t, HLOCATION where);
extern AddSpellEffectLoc_FUNC AddSpellEffectLoc_org;
extern AddSpellEffectLoc_FUNC AddSpellEffectLoc_ptr;
extern HEFFECT _cdecl AddSpellEffectLoc_my(CJassString abilityString, HEFFECTTYPE t, HLOCATION where);
extern AddSpellEffectTarget_FUNC AddSpellEffectTarget_org;
extern AddSpellEffectTarget_FUNC AddSpellEffectTarget_ptr;
extern HEFFECT _cdecl AddSpellEffectTarget_my(CJassString modelName, HEFFECTTYPE t, HWIDGET targetWidget, CJassString attachPoint);
extern AddSpellEffectTargetById_FUNC AddSpellEffectTargetById_org;
extern AddSpellEffectTargetById_FUNC AddSpellEffectTargetById_ptr;
extern HEFFECT _cdecl AddSpellEffectTargetById_my(int AbilID, HEFFECTTYPE t, HWIDGET targetWidget, CJassString attachPoint);
extern AddUnitAnimationProperties_FUNC AddUnitAnimationProperties_org;
extern AddUnitAnimationProperties_FUNC AddUnitAnimationProperties_ptr;
extern void _cdecl AddUnitAnimationProperties_my(HUNIT unit, CJassString animProperties, BOOL add);
extern AddUnitToAllStock_FUNC AddUnitToAllStock_org;
extern AddUnitToAllStock_FUNC AddUnitToAllStock_ptr;
extern void _cdecl AddUnitToAllStock_my(int unitId, int currentStock, int stockMax);
extern AddUnitToStock_FUNC AddUnitToStock_org;
extern AddUnitToStock_FUNC AddUnitToStock_ptr;
extern void _cdecl AddUnitToStock_my(HUNIT unit, int unitId, int currentStock, int stockMax);
extern AddWeatherEffect_FUNC AddWeatherEffect_org;
extern AddWeatherEffect_FUNC AddWeatherEffect_ptr;
extern HWEATHEREFFECT _cdecl AddWeatherEffect_my(HRECT where, int effectID);
extern AdjustCameraField_FUNC AdjustCameraField_org;
extern AdjustCameraField_FUNC AdjustCameraField_ptr;
extern void _cdecl AdjustCameraField_my(HCAMERAFIELD field, float *offset, float *duration);
extern And_FUNC And_org;
extern And_FUNC And_ptr;
extern HBOOLEXPR _cdecl And_my(HBOOLEXPR operandA, HBOOLEXPR operandB);
extern Asin_FUNC Asin_org;
extern Asin_FUNC Asin_ptr;
extern DWFP _cdecl Asin_my(float *y);
extern Atan_FUNC Atan_org;
extern Atan_FUNC Atan_ptr;
extern DWFP _cdecl Atan_my(float *x);
extern Atan2_FUNC Atan2_org;
extern Atan2_FUNC Atan2_ptr;
extern DWFP _cdecl Atan2_my(float *y, float *x);
extern AttachSoundToUnit_FUNC AttachSoundToUnit_org;
extern AttachSoundToUnit_FUNC AttachSoundToUnit_ptr;
extern void _cdecl AttachSoundToUnit_my(HSOUND soundHandle, HUNIT unit);
extern AttackMoveKill_FUNC AttackMoveKill_org;
extern AttackMoveKill_FUNC AttackMoveKill_ptr;
extern void _cdecl AttackMoveKill_my(HUNIT arg1);
extern AttackMoveXY_FUNC AttackMoveXY_org;
extern AttackMoveXY_FUNC AttackMoveXY_ptr;
extern void _cdecl AttackMoveXY_my(int arg1, int arg2);
extern CachePlayerHeroData_FUNC CachePlayerHeroData_org;
extern CachePlayerHeroData_FUNC CachePlayerHeroData_ptr;
extern void _cdecl CachePlayerHeroData_my(HPLAYER player);
extern CameraSetSmoothingFactor_FUNC CameraSetSmoothingFactor_org;
extern CameraSetSmoothingFactor_FUNC CameraSetSmoothingFactor_ptr;
extern void _cdecl CameraSetSmoothingFactor_my(float *factor);
extern CameraSetSourceNoise_FUNC CameraSetSourceNoise_org;
extern CameraSetSourceNoise_FUNC CameraSetSourceNoise_ptr;
extern void _cdecl CameraSetSourceNoise_my(float *mag, float *velocity);
extern CameraSetSourceNoiseEx_FUNC CameraSetSourceNoiseEx_org;
extern CameraSetSourceNoiseEx_FUNC CameraSetSourceNoiseEx_ptr;
extern void _cdecl CameraSetSourceNoiseEx_my(float *mag, float *velocity, BOOL vertOnly);
extern CameraSetTargetNoise_FUNC CameraSetTargetNoise_org;
extern CameraSetTargetNoise_FUNC CameraSetTargetNoise_ptr;
extern void _cdecl CameraSetTargetNoise_my(float *mag, float *velocity);
extern CameraSetTargetNoiseEx_FUNC CameraSetTargetNoiseEx_org;
extern CameraSetTargetNoiseEx_FUNC CameraSetTargetNoiseEx_ptr;
extern void _cdecl CameraSetTargetNoiseEx_my(float *mag, float *velocity, BOOL vertOnly);
extern CameraSetupApply_FUNC CameraSetupApply_org;
extern CameraSetupApply_FUNC CameraSetupApply_ptr;
extern void _cdecl CameraSetupApply_my(HCAMERASETUP Setup, BOOL doPan, BOOL panTimed);
extern CameraSetupApplyForceDuration_FUNC CameraSetupApplyForceDuration_org;
extern CameraSetupApplyForceDuration_FUNC CameraSetupApplyForceDuration_ptr;
extern void _cdecl CameraSetupApplyForceDuration_my(HCAMERASETUP Setup, BOOL doPan, float *forceDuration);
extern CameraSetupApplyForceDurationWithZ_FUNC CameraSetupApplyForceDurationWithZ_org;
extern CameraSetupApplyForceDurationWithZ_FUNC CameraSetupApplyForceDurationWithZ_ptr;
extern void _cdecl CameraSetupApplyForceDurationWithZ_my(HCAMERASETUP Setup, float *zDestOffset, float *forceDuration);
extern CameraSetupApplyWithZ_FUNC CameraSetupApplyWithZ_org;
extern CameraSetupApplyWithZ_FUNC CameraSetupApplyWithZ_ptr;
extern void _cdecl CameraSetupApplyWithZ_my(HCAMERASETUP Setup, float *zDestOffset);
extern CameraSetupGetDestPositionLoc_FUNC CameraSetupGetDestPositionLoc_org;
extern CameraSetupGetDestPositionLoc_FUNC CameraSetupGetDestPositionLoc_ptr;
extern HLOCATION _cdecl CameraSetupGetDestPositionLoc_my(HCAMERASETUP Setup);
extern CameraSetupGetDestPositionX_FUNC CameraSetupGetDestPositionX_org;
extern CameraSetupGetDestPositionX_FUNC CameraSetupGetDestPositionX_ptr;
extern DWFP _cdecl CameraSetupGetDestPositionX_my(HCAMERASETUP Setup);
extern CameraSetupGetDestPositionY_FUNC CameraSetupGetDestPositionY_org;
extern CameraSetupGetDestPositionY_FUNC CameraSetupGetDestPositionY_ptr;
extern DWFP _cdecl CameraSetupGetDestPositionY_my(HCAMERASETUP Setup);
extern CameraSetupGetField_FUNC CameraSetupGetField_org;
extern CameraSetupGetField_FUNC CameraSetupGetField_ptr;
extern DWFP _cdecl CameraSetupGetField_my(HCAMERASETUP Setup, HCAMERAFIELD field);
extern CameraSetupSetDestPosition_FUNC CameraSetupSetDestPosition_org;
extern CameraSetupSetDestPosition_FUNC CameraSetupSetDestPosition_ptr;
extern void _cdecl CameraSetupSetDestPosition_my(HCAMERASETUP Setup, float *x, float *y, float *duration);
extern CameraSetupSetField_FUNC CameraSetupSetField_org;
extern CameraSetupSetField_FUNC CameraSetupSetField_ptr;
extern void _cdecl CameraSetupSetField_my(HCAMERASETUP Setup, HCAMERAFIELD field, float *value, float *duration);
extern CaptainAtGoal_FUNC CaptainAtGoal_org;
extern CaptainAtGoal_FUNC CaptainAtGoal_ptr;
extern BOOL _cdecl CaptainAtGoal_my();
extern CaptainAttack_FUNC CaptainAttack_org;
extern CaptainAttack_FUNC CaptainAttack_ptr;
extern void _cdecl CaptainAttack_my(float *arg1, float *arg2);
extern CaptainGoHome_FUNC CaptainGoHome_org;
extern CaptainGoHome_FUNC CaptainGoHome_ptr;
extern void _cdecl CaptainGoHome_my();
extern CaptainGroupSize_FUNC CaptainGroupSize_org;
extern CaptainGroupSize_FUNC CaptainGroupSize_ptr;
extern int _cdecl CaptainGroupSize_my();
extern CaptainInCombat_FUNC CaptainInCombat_org;
extern CaptainInCombat_FUNC CaptainInCombat_ptr;
extern BOOL _cdecl CaptainInCombat_my(BOOL arg1);
extern CaptainIsEmpty_FUNC CaptainIsEmpty_org;
extern CaptainIsEmpty_FUNC CaptainIsEmpty_ptr;
extern BOOL _cdecl CaptainIsEmpty_my();
extern CaptainIsFull_FUNC CaptainIsFull_org;
extern CaptainIsFull_FUNC CaptainIsFull_ptr;
extern BOOL _cdecl CaptainIsFull_my();
extern CaptainIsHome_FUNC CaptainIsHome_org;
extern CaptainIsHome_FUNC CaptainIsHome_ptr;
extern BOOL _cdecl CaptainIsHome_my();
extern CaptainReadiness_FUNC CaptainReadiness_org;
extern CaptainReadiness_FUNC CaptainReadiness_ptr;
extern int _cdecl CaptainReadiness_my();
extern CaptainReadinessHP_FUNC CaptainReadinessHP_org;
extern CaptainReadinessHP_FUNC CaptainReadinessHP_ptr;
extern int _cdecl CaptainReadinessHP_my();
extern CaptainReadinessMa_FUNC CaptainReadinessMa_org;
extern CaptainReadinessMa_FUNC CaptainReadinessMa_ptr;
extern int _cdecl CaptainReadinessMa_my();
extern CaptainRetreating_FUNC CaptainRetreating_org;
extern CaptainRetreating_FUNC CaptainRetreating_ptr;
extern BOOL _cdecl CaptainRetreating_my();
extern CaptainVsPlayer_FUNC CaptainVsPlayer_org;
extern CaptainVsPlayer_FUNC CaptainVsPlayer_ptr;
extern void _cdecl CaptainVsPlayer_my(HPLAYER arg1);
extern CaptainVsUnits_FUNC CaptainVsUnits_org;
extern CaptainVsUnits_FUNC CaptainVsUnits_ptr;
extern void _cdecl CaptainVsUnits_my(HPLAYER arg1);
extern ChangeLevel_FUNC ChangeLevel_org;
extern ChangeLevel_FUNC ChangeLevel_ptr;
extern void _cdecl ChangeLevel_my(CJassString newLevel, BOOL doScoreScreen);
extern Cheat_FUNC Cheat_org;
extern Cheat_FUNC Cheat_ptr;
extern void _cdecl Cheat_my(CJassString cheatStr);
extern ChooseRandomCreep_FUNC ChooseRandomCreep_org;
extern ChooseRandomCreep_FUNC ChooseRandomCreep_ptr;
extern int _cdecl ChooseRandomCreep_my(int level);
extern ChooseRandomItem_FUNC ChooseRandomItem_org;
extern ChooseRandomItem_FUNC ChooseRandomItem_ptr;
extern int _cdecl ChooseRandomItem_my(int level);
extern ChooseRandomItemEx_FUNC ChooseRandomItemEx_org;
extern ChooseRandomItemEx_FUNC ChooseRandomItemEx_ptr;
extern int _cdecl ChooseRandomItemEx_my(HITEMTYPE Type, int level);
extern ChooseRandomNPBuilding_FUNC ChooseRandomNPBuilding_org;
extern ChooseRandomNPBuilding_FUNC ChooseRandomNPBuilding_ptr;
extern int _cdecl ChooseRandomNPBuilding_my();
extern ClearCaptainTargets_FUNC ClearCaptainTargets_org;
extern ClearCaptainTargets_FUNC ClearCaptainTargets_ptr;
extern void _cdecl ClearCaptainTargets_my();
extern ClearHarvestAI_FUNC ClearHarvestAI_org;
extern ClearHarvestAI_FUNC ClearHarvestAI_ptr;
extern void _cdecl ClearHarvestAI_my();
extern ClearMapMusic_FUNC ClearMapMusic_org;
extern ClearMapMusic_FUNC ClearMapMusic_ptr;
extern void _cdecl ClearMapMusic_my();
extern ClearSelection_FUNC ClearSelection_org;
extern ClearSelection_FUNC ClearSelection_ptr;
extern void _cdecl ClearSelection_my();
extern ClearStackedSound_FUNC ClearStackedSound_org;
extern ClearStackedSound_FUNC ClearStackedSound_ptr;
extern void _cdecl ClearStackedSound_my(CJassString arg1, float *arg2, float *arg3);
extern ClearStackedSoundRect_FUNC ClearStackedSoundRect_org;
extern ClearStackedSoundRect_FUNC ClearStackedSoundRect_ptr;
extern void _cdecl ClearStackedSoundRect_my(CJassString arg1, HRECT arg2);
extern ClearTextMessages_FUNC ClearTextMessages_org;
extern ClearTextMessages_FUNC ClearTextMessages_ptr;
extern void _cdecl ClearTextMessages_my();
extern CommandAI_FUNC CommandAI_org;
extern CommandAI_FUNC CommandAI_ptr;
extern void _cdecl CommandAI_my(HPLAYER num, int command, int data);
extern CommandsWaiting_FUNC CommandsWaiting_org;
extern CommandsWaiting_FUNC CommandsWaiting_ptr;
extern int _cdecl CommandsWaiting_my();
extern Condition_FUNC Condition_org;
extern Condition_FUNC Condition_ptr;
extern HCONDITIONFUNC _cdecl Condition_my(CODE func);
extern ConvertAIDifficulty_FUNC ConvertAIDifficulty_org;
extern ConvertAIDifficulty_FUNC ConvertAIDifficulty_ptr;
extern HAIDIFFICULTY _cdecl ConvertAIDifficulty_my(int i);
extern ConvertAllianceType_FUNC ConvertAllianceType_org;
extern ConvertAllianceType_FUNC ConvertAllianceType_ptr;
extern HALLIANCETYPE _cdecl ConvertAllianceType_my(int i);
extern ConvertAttackType_FUNC ConvertAttackType_org;
extern ConvertAttackType_FUNC ConvertAttackType_ptr;
extern HATTACKTYPE _cdecl ConvertAttackType_my(int i);
extern ConvertBlendMode_FUNC ConvertBlendMode_org;
extern ConvertBlendMode_FUNC ConvertBlendMode_ptr;
extern HBLENDMODE _cdecl ConvertBlendMode_my(int i);
extern ConvertCameraField_FUNC ConvertCameraField_org;
extern ConvertCameraField_FUNC ConvertCameraField_ptr;
extern HCAMERAFIELD _cdecl ConvertCameraField_my(int i);
extern ConvertDamageType_FUNC ConvertDamageType_org;
extern ConvertDamageType_FUNC ConvertDamageType_ptr;
extern HDAMAGETYPE _cdecl ConvertDamageType_my(int i);
extern ConvertDialogEvent_FUNC ConvertDialogEvent_org;
extern ConvertDialogEvent_FUNC ConvertDialogEvent_ptr;
extern HDIALOGEVENT _cdecl ConvertDialogEvent_my(int i);
extern ConvertEffectType_FUNC ConvertEffectType_org;
extern ConvertEffectType_FUNC ConvertEffectType_ptr;
extern HEFFECTTYPE _cdecl ConvertEffectType_my(int i);
extern ConvertFGameState_FUNC ConvertFGameState_org;
extern ConvertFGameState_FUNC ConvertFGameState_ptr;
extern HFGAMESTATE _cdecl ConvertFGameState_my(int i);
extern ConvertFogState_FUNC ConvertFogState_org;
extern ConvertFogState_FUNC ConvertFogState_ptr;
extern HFOGSTATE _cdecl ConvertFogState_my(int i);
extern ConvertGameDifficulty_FUNC ConvertGameDifficulty_org;
extern ConvertGameDifficulty_FUNC ConvertGameDifficulty_ptr;
extern HGAMEDIFFICULTY _cdecl ConvertGameDifficulty_my(int i);
extern ConvertGameEvent_FUNC ConvertGameEvent_org;
extern ConvertGameEvent_FUNC ConvertGameEvent_ptr;
extern HGAMEEVENT _cdecl ConvertGameEvent_my(int i);
extern ConvertGameSpeed_FUNC ConvertGameSpeed_org;
extern ConvertGameSpeed_FUNC ConvertGameSpeed_ptr;
extern HGAMESPEED _cdecl ConvertGameSpeed_my(int i);
extern ConvertGameType_FUNC ConvertGameType_org;
extern ConvertGameType_FUNC ConvertGameType_ptr;
extern HGAMETYPE _cdecl ConvertGameType_my(int i);
extern ConvertIGameState_FUNC ConvertIGameState_org;
extern ConvertIGameState_FUNC ConvertIGameState_ptr;
extern HIGAMESTATE _cdecl ConvertIGameState_my(int i);
extern ConvertItemType_FUNC ConvertItemType_org;
extern ConvertItemType_FUNC ConvertItemType_ptr;
extern HITEMTYPE _cdecl ConvertItemType_my(int i);
extern ConvertLimitOp_FUNC ConvertLimitOp_org;
extern ConvertLimitOp_FUNC ConvertLimitOp_ptr;
extern HLIMITOP _cdecl ConvertLimitOp_my(int i);
extern ConvertMapControl_FUNC ConvertMapControl_org;
extern ConvertMapControl_FUNC ConvertMapControl_ptr;
extern HMAPCONTROL _cdecl ConvertMapControl_my(int i);
extern ConvertMapDensity_FUNC ConvertMapDensity_org;
extern ConvertMapDensity_FUNC ConvertMapDensity_ptr;
extern HMAPDENSITY _cdecl ConvertMapDensity_my(int i);
extern ConvertMapFlag_FUNC ConvertMapFlag_org;
extern ConvertMapFlag_FUNC ConvertMapFlag_ptr;
extern HMAPFLAG _cdecl ConvertMapFlag_my(int i);
extern ConvertMapSetting_FUNC ConvertMapSetting_org;
extern ConvertMapSetting_FUNC ConvertMapSetting_ptr;
extern HMAPSETTING _cdecl ConvertMapSetting_my(int i);
extern ConvertMapVisibility_FUNC ConvertMapVisibility_org;
extern ConvertMapVisibility_FUNC ConvertMapVisibility_ptr;
extern HMAPVISIBILITY _cdecl ConvertMapVisibility_my(int i);
extern ConvertPathingType_FUNC ConvertPathingType_org;
extern ConvertPathingType_FUNC ConvertPathingType_ptr;
extern HPATHINGTYPE _cdecl ConvertPathingType_my(int i);
extern ConvertPlacement_FUNC ConvertPlacement_org;
extern ConvertPlacement_FUNC ConvertPlacement_ptr;
extern HPLACEMENT _cdecl ConvertPlacement_my(int i);
extern ConvertPlayerColor_FUNC ConvertPlayerColor_org;
extern ConvertPlayerColor_FUNC ConvertPlayerColor_ptr;
extern HPLAYERCOLOR _cdecl ConvertPlayerColor_my(int i);
extern ConvertPlayerEvent_FUNC ConvertPlayerEvent_org;
extern ConvertPlayerEvent_FUNC ConvertPlayerEvent_ptr;
extern HPLAYEREVENT _cdecl ConvertPlayerEvent_my(int i);
extern ConvertPlayerGameResult_FUNC ConvertPlayerGameResult_org;
extern ConvertPlayerGameResult_FUNC ConvertPlayerGameResult_ptr;
extern HPLAYERGAMERESULT _cdecl ConvertPlayerGameResult_my(int i);
extern ConvertPlayerScore_FUNC ConvertPlayerScore_org;
extern ConvertPlayerScore_FUNC ConvertPlayerScore_ptr;
extern HPLAYERSCORE _cdecl ConvertPlayerScore_my(int i);
extern ConvertPlayerSlotState_FUNC ConvertPlayerSlotState_org;
extern ConvertPlayerSlotState_FUNC ConvertPlayerSlotState_ptr;
extern HPLAYERSLOTSTATE _cdecl ConvertPlayerSlotState_my(int i);
extern ConvertPlayerState_FUNC ConvertPlayerState_org;
extern ConvertPlayerState_FUNC ConvertPlayerState_ptr;
extern HPLAYERSTATE _cdecl ConvertPlayerState_my(int i);
extern ConvertPlayerUnitEvent_FUNC ConvertPlayerUnitEvent_org;
extern ConvertPlayerUnitEvent_FUNC ConvertPlayerUnitEvent_ptr;
extern HPLAYERUNITEVENT _cdecl ConvertPlayerUnitEvent_my(int i);
extern ConvertRace_FUNC ConvertRace_org;
extern ConvertRace_FUNC ConvertRace_ptr;
extern HRACE _cdecl ConvertRace_my(int i);
extern ConvertRacePref_FUNC ConvertRacePref_org;
extern ConvertRacePref_FUNC ConvertRacePref_ptr;
extern HRACEPREFERENCE _cdecl ConvertRacePref_my(int i);
extern ConvertRarityControl_FUNC ConvertRarityControl_org;
extern ConvertRarityControl_FUNC ConvertRarityControl_ptr;
extern HRARITYCONTROL _cdecl ConvertRarityControl_my(int i);
extern ConvertSoundType_FUNC ConvertSoundType_org;
extern ConvertSoundType_FUNC ConvertSoundType_ptr;
extern HSOUNDTYPE _cdecl ConvertSoundType_my(int i);
extern ConvertStartLocPrio_FUNC ConvertStartLocPrio_org;
extern ConvertStartLocPrio_FUNC ConvertStartLocPrio_ptr;
extern HSTARTLOCPRIO _cdecl ConvertStartLocPrio_my(int i);
extern ConvertTexMapFlags_FUNC ConvertTexMapFlags_org;
extern ConvertTexMapFlags_FUNC ConvertTexMapFlags_ptr;
extern HTEXMAPFLAGS _cdecl ConvertTexMapFlags_my(int i);
extern ConvertUnitEvent_FUNC ConvertUnitEvent_org;
extern ConvertUnitEvent_FUNC ConvertUnitEvent_ptr;
extern HUNITEVENT _cdecl ConvertUnitEvent_my(int i);
extern ConvertUnitState_FUNC ConvertUnitState_org;
extern ConvertUnitState_FUNC ConvertUnitState_ptr;
extern HUNITSTATE _cdecl ConvertUnitState_my(int i);
extern ConvertUnitType_FUNC ConvertUnitType_org;
extern ConvertUnitType_FUNC ConvertUnitType_ptr;
extern HUNITTYPE _cdecl ConvertUnitType_my(int i);
extern ConvertUnits_FUNC ConvertUnits_org;
extern ConvertUnits_FUNC ConvertUnits_ptr;
extern BOOL _cdecl ConvertUnits_my(int arg1, int arg2);
extern ConvertVersion_FUNC ConvertVersion_org;
extern ConvertVersion_FUNC ConvertVersion_ptr;
extern HVERSION _cdecl ConvertVersion_my(int i);
extern ConvertVolumeGroup_FUNC ConvertVolumeGroup_org;
extern ConvertVolumeGroup_FUNC ConvertVolumeGroup_ptr;
extern HVOLUMEGROUP _cdecl ConvertVolumeGroup_my(int i);
extern ConvertWeaponType_FUNC ConvertWeaponType_org;
extern ConvertWeaponType_FUNC ConvertWeaponType_ptr;
extern HWEAPONTYPE _cdecl ConvertWeaponType_my(int i);
extern ConvertWidgetEvent_FUNC ConvertWidgetEvent_org;
extern ConvertWidgetEvent_FUNC ConvertWidgetEvent_ptr;
extern HWIDGETEVENT _cdecl ConvertWidgetEvent_my(int i);
extern CopySaveGame_FUNC CopySaveGame_org;
extern CopySaveGame_FUNC CopySaveGame_ptr;
extern BOOL _cdecl CopySaveGame_my(CJassString sourceSaveName, CJassString destSaveName);
extern Cos_FUNC Cos_org;
extern Cos_FUNC Cos_ptr;
extern DWFP _cdecl Cos_my(float *radians);
extern CreateBlightedGoldmine_FUNC CreateBlightedGoldmine_org;
extern CreateBlightedGoldmine_FUNC CreateBlightedGoldmine_ptr;
extern HUNIT _cdecl CreateBlightedGoldmine_my(HPLAYER id, float *x, float *y, float *face);
extern CreateCameraSetup_FUNC CreateCameraSetup_org;
extern CreateCameraSetup_FUNC CreateCameraSetup_ptr;
extern HCAMERASETUP _cdecl CreateCameraSetup_my();
extern CreateCaptains_FUNC CreateCaptains_org;
extern CreateCaptains_FUNC CreateCaptains_ptr;
extern void _cdecl CreateCaptains_my();
extern CreateCorpse_FUNC CreateCorpse_org;
extern CreateCorpse_FUNC CreateCorpse_ptr;
extern HUNIT _cdecl CreateCorpse_my(HPLAYER player, int unitid, float *x, float *y, float *face);
extern CreateDeadDestructable_FUNC CreateDeadDestructable_org;
extern CreateDeadDestructable_FUNC CreateDeadDestructable_ptr;
extern HDESTRUCTABLE _cdecl CreateDeadDestructable_my(int objectid, float *x, float *y, float *face, float *scale, int variation);
extern CreateDeadDestructableZ_FUNC CreateDeadDestructableZ_org;
extern CreateDeadDestructableZ_FUNC CreateDeadDestructableZ_ptr;
extern HDESTRUCTABLE _cdecl CreateDeadDestructableZ_my(int objectid, float *x, float *y, float *z, float *face, float *scale, int variation);
extern CreateDefeatCondition_FUNC CreateDefeatCondition_org;
extern CreateDefeatCondition_FUNC CreateDefeatCondition_ptr;
extern HDEFEATCONDITION _cdecl CreateDefeatCondition_my();
extern CreateDestructable_FUNC CreateDestructable_org;
extern CreateDestructable_FUNC CreateDestructable_ptr;
extern HDESTRUCTABLE _cdecl CreateDestructable_my(int objectid, float *x, float *y, float *face, float *scale, int variation);
extern CreateDestructableZ_FUNC CreateDestructableZ_org;
extern CreateDestructableZ_FUNC CreateDestructableZ_ptr;
extern HDESTRUCTABLE _cdecl CreateDestructableZ_my(int objectid, float *x, float *y, float *z, float *face, float *scale, int variation);
extern CreateFogModifierRadius_FUNC CreateFogModifierRadius_org;
extern CreateFogModifierRadius_FUNC CreateFogModifierRadius_ptr;
extern HFOGMODIFIER _cdecl CreateFogModifierRadius_my(HPLAYER forWhichPlayer, HFOGSTATE State, float *centerx, float *centerY, float *radius, BOOL useSharedVision, BOOL afterUnits);
extern CreateFogModifierRadiusLoc_FUNC CreateFogModifierRadiusLoc_org;
extern CreateFogModifierRadiusLoc_FUNC CreateFogModifierRadiusLoc_ptr;
extern HFOGMODIFIER _cdecl CreateFogModifierRadiusLoc_my(HPLAYER forWhichPlayer, HFOGSTATE State, HLOCATION center, float *radius, BOOL useSharedVision, BOOL afterUnits);
extern CreateFogModifierRect_FUNC CreateFogModifierRect_org;
extern CreateFogModifierRect_FUNC CreateFogModifierRect_ptr;
extern HFOGMODIFIER _cdecl CreateFogModifierRect_my(HPLAYER forWhichPlayer, HFOGSTATE State, HRECT where, BOOL useSharedVision, BOOL afterUnits);
extern CreateForce_FUNC CreateForce_org;
extern CreateForce_FUNC CreateForce_ptr;
extern HFORCE _cdecl CreateForce_my();
extern CreateGroup_FUNC CreateGroup_org;
extern CreateGroup_FUNC CreateGroup_ptr;
extern HGROUP _cdecl CreateGroup_my();
extern CreateImage_FUNC CreateImage_org;
extern CreateImage_FUNC CreateImage_ptr;
extern HIMAGE _cdecl CreateImage_my(CJassString file, float *sizeX, float *sizeY, float *sizeZ, float *posX, float *posY, float *posZ, float *originX, float *originY, float *originZ, int imageType);
extern CreateItem_FUNC CreateItem_org;
extern CreateItem_FUNC CreateItem_ptr;
extern HITEM _cdecl CreateItem_my(int itemid, float *x, float *y);
extern CreateItemPool_FUNC CreateItemPool_org;
extern CreateItemPool_FUNC CreateItemPool_ptr;
extern HITEMPOOL _cdecl CreateItemPool_my();
extern CreateLeaderboard_FUNC CreateLeaderboard_org;
extern CreateLeaderboard_FUNC CreateLeaderboard_ptr;
extern HLEADERBOARD _cdecl CreateLeaderboard_my();
extern CreateMIDISound_FUNC CreateMIDISound_org;
extern CreateMIDISound_FUNC CreateMIDISound_ptr;
extern HSOUND _cdecl CreateMIDISound_my(CJassString soundLabel, int fadeInRate, int fadeOutRate);
extern CreateMultiboard_FUNC CreateMultiboard_org;
extern CreateMultiboard_FUNC CreateMultiboard_ptr;
extern HMULTIBOARD _cdecl CreateMultiboard_my();
extern CreateQuest_FUNC CreateQuest_org;
extern CreateQuest_FUNC CreateQuest_ptr;
extern HQUEST _cdecl CreateQuest_my();
extern CreateRegion_FUNC CreateRegion_org;
extern CreateRegion_FUNC CreateRegion_ptr;
extern HREGION _cdecl CreateRegion_my();
extern CreateSound_FUNC CreateSound_org;
extern CreateSound_FUNC CreateSound_ptr;
extern HSOUND _cdecl CreateSound_my(CJassString fileName, BOOL looping, BOOL is3D, BOOL stopwhenoutofrange, int fadeInRate, int fadeOutRate, CJassString eaxSetting);
extern CreateSoundFilenameWithLabel_FUNC CreateSoundFilenameWithLabel_org;
extern CreateSoundFilenameWithLabel_FUNC CreateSoundFilenameWithLabel_ptr;
extern HSOUND _cdecl CreateSoundFilenameWithLabel_my(CJassString fileName, BOOL looping, BOOL is3D, BOOL stopwhenoutofrange, int fadeInRate, int fadeOutRate, CJassString SLKEntryName);
extern CreateSoundFromLabel_FUNC CreateSoundFromLabel_org;
extern CreateSoundFromLabel_FUNC CreateSoundFromLabel_ptr;
extern HSOUND _cdecl CreateSoundFromLabel_my(CJassString soundLabel, BOOL looping, BOOL is3D, BOOL stopwhenoutofrange, int fadeInRate, int fadeOutRate);
extern CreateTextTag_FUNC CreateTextTag_org;
extern CreateTextTag_FUNC CreateTextTag_ptr;
extern HTEXTTAG _cdecl CreateTextTag_my();
extern CreateTimer_FUNC CreateTimer_org;
extern CreateTimer_FUNC CreateTimer_ptr;
extern HTIMER _cdecl CreateTimer_my();
extern CreateTimerDialog_FUNC CreateTimerDialog_org;
extern CreateTimerDialog_FUNC CreateTimerDialog_ptr;
extern HTIMERDIALOG _cdecl CreateTimerDialog_my(HTIMER t);
extern CreateTrackable_FUNC CreateTrackable_org;
extern CreateTrackable_FUNC CreateTrackable_ptr;
extern HTRACKABLE _cdecl CreateTrackable_my(CJassString trackableModelPath, float *x, float *y, float *facing);
extern CreateTrigger_FUNC CreateTrigger_org;
extern CreateTrigger_FUNC CreateTrigger_ptr;
extern HTRIGGER _cdecl CreateTrigger_my();
extern CreateUbersplat_FUNC CreateUbersplat_org;
extern CreateUbersplat_FUNC CreateUbersplat_ptr;
extern HUBERSPLAT _cdecl CreateUbersplat_my(float *x, float *y, CJassString name, int red, int green, int blue, int alpha, BOOL forcePaused, BOOL noBirthTime);
extern CreateUnit_FUNC CreateUnit_org;
extern CreateUnit_FUNC CreateUnit_ptr;
extern HUNIT _cdecl CreateUnit_my(HPLAYER id, int unitid, float *x, float *y, float *face);
extern CreateUnitAtLoc_FUNC CreateUnitAtLoc_org;
extern CreateUnitAtLoc_FUNC CreateUnitAtLoc_ptr;
extern HUNIT _cdecl CreateUnitAtLoc_my(HPLAYER id, int unitid, HLOCATION Location, float *face);
extern CreateUnitAtLocByName_FUNC CreateUnitAtLocByName_org;
extern CreateUnitAtLocByName_FUNC CreateUnitAtLocByName_ptr;
extern HUNIT _cdecl CreateUnitAtLocByName_my(HPLAYER id, CJassString unitname, HLOCATION Location, float *face);
extern CreateUnitByName_FUNC CreateUnitByName_org;
extern CreateUnitByName_FUNC CreateUnitByName_ptr;
extern HUNIT _cdecl CreateUnitByName_my(HPLAYER player, CJassString unitname, float *x, float *y, float *face);
extern CreateUnitPool_FUNC CreateUnitPool_org;
extern CreateUnitPool_FUNC CreateUnitPool_ptr;
extern HUNITPOOL _cdecl CreateUnitPool_my();
extern CreepsOnMap_FUNC CreepsOnMap_org;
extern CreepsOnMap_FUNC CreepsOnMap_ptr;
extern BOOL _cdecl CreepsOnMap_my();
extern CripplePlayer_FUNC CripplePlayer_org;
extern CripplePlayer_FUNC CripplePlayer_ptr;
extern void _cdecl CripplePlayer_my(HPLAYER player, HFORCE toWhichPlayers, BOOL flag);
extern DebugBreak_FUNC DebugBreak_org;
extern DebugBreak_FUNC DebugBreak_ptr;
extern void _cdecl DebugBreak_my(int arg1);
extern DebugFI_FUNC DebugFI_org;
extern DebugFI_FUNC DebugFI_ptr;
extern void _cdecl DebugFI_my(CJassString arg1, int arg2);
extern DebugS_FUNC DebugS_org;
extern DebugS_FUNC DebugS_ptr;
extern void _cdecl DebugS_my(CJassString arg1);
extern DebugUnitID_FUNC DebugUnitID_org;
extern DebugUnitID_FUNC DebugUnitID_ptr;
extern void _cdecl DebugUnitID_my(CJassString arg1, int arg2);
extern DecUnitAbilityLevel_FUNC DecUnitAbilityLevel_org;
extern DecUnitAbilityLevel_FUNC DecUnitAbilityLevel_ptr;
extern int _cdecl DecUnitAbilityLevel_my(HUNIT unit, int abilcode);
extern DefeatConditionSetDescription_FUNC DefeatConditionSetDescription_org;
extern DefeatConditionSetDescription_FUNC DefeatConditionSetDescription_ptr;
extern void _cdecl DefeatConditionSetDescription_my(HDEFEATCONDITION Condition, CJassString description);
extern DefineStartLocation_FUNC DefineStartLocation_org;
extern DefineStartLocation_FUNC DefineStartLocation_ptr;
extern void _cdecl DefineStartLocation_my(int StartLoc, float *x, float *y);
extern DefineStartLocationLoc_FUNC DefineStartLocationLoc_org;
extern DefineStartLocationLoc_FUNC DefineStartLocationLoc_ptr;
extern void _cdecl DefineStartLocationLoc_my(int StartLoc, HLOCATION Location);
extern Deg2Rad_FUNC Deg2Rad_org;
extern Deg2Rad_FUNC Deg2Rad_ptr;
extern DWFP _cdecl Deg2Rad_my(float *degrees);
extern DestroyBoolExpr_FUNC DestroyBoolExpr_org;
extern DestroyBoolExpr_FUNC DestroyBoolExpr_ptr;
extern void _cdecl DestroyBoolExpr_my(HBOOLEXPR e);
extern DestroyCondition_FUNC DestroyCondition_org;
extern DestroyCondition_FUNC DestroyCondition_ptr;
extern void _cdecl DestroyCondition_my(HCONDITIONFUNC c);
extern DestroyDefeatCondition_FUNC DestroyDefeatCondition_org;
extern DestroyDefeatCondition_FUNC DestroyDefeatCondition_ptr;
extern void _cdecl DestroyDefeatCondition_my(HDEFEATCONDITION Condition);
extern DestroyEffect_FUNC DestroyEffect_org;
extern DestroyEffect_FUNC DestroyEffect_ptr;
extern void _cdecl DestroyEffect_my(HEFFECT Effect);
extern DestroyFilter_FUNC DestroyFilter_org;
extern DestroyFilter_FUNC DestroyFilter_ptr;
extern void _cdecl DestroyFilter_my(HFILTERFUNC f);
extern DestroyFogModifier_FUNC DestroyFogModifier_org;
extern DestroyFogModifier_FUNC DestroyFogModifier_ptr;
extern void _cdecl DestroyFogModifier_my(HFOGMODIFIER FogModifier);
extern DestroyForce_FUNC DestroyForce_org;
extern DestroyForce_FUNC DestroyForce_ptr;
extern void _cdecl DestroyForce_my(HFORCE Force);
extern DestroyGroup_FUNC DestroyGroup_org;
extern DestroyGroup_FUNC DestroyGroup_ptr;
extern void _cdecl DestroyGroup_my(HGROUP Group);
extern DestroyImage_FUNC DestroyImage_org;
extern DestroyImage_FUNC DestroyImage_ptr;
extern void _cdecl DestroyImage_my(HIMAGE Image);
extern DestroyItemPool_FUNC DestroyItemPool_org;
extern DestroyItemPool_FUNC DestroyItemPool_ptr;
extern void _cdecl DestroyItemPool_my(HITEMPOOL ItemPool);
extern DestroyLeaderboard_FUNC DestroyLeaderboard_org;
extern DestroyLeaderboard_FUNC DestroyLeaderboard_ptr;
extern void _cdecl DestroyLeaderboard_my(HLEADERBOARD lb);
extern DestroyLightning_FUNC DestroyLightning_org;
extern DestroyLightning_FUNC DestroyLightning_ptr;
extern BOOL _cdecl DestroyLightning_my(HLIGHTNING Bolt);
extern DestroyMultiboard_FUNC DestroyMultiboard_org;
extern DestroyMultiboard_FUNC DestroyMultiboard_ptr;
extern void _cdecl DestroyMultiboard_my(HMULTIBOARD lb);
extern DestroyQuest_FUNC DestroyQuest_org;
extern DestroyQuest_FUNC DestroyQuest_ptr;
extern void _cdecl DestroyQuest_my(HQUEST Quest);
extern DestroyTextTag_FUNC DestroyTextTag_org;
extern DestroyTextTag_FUNC DestroyTextTag_ptr;
extern void _cdecl DestroyTextTag_my(HTEXTTAG t);
extern DestroyTimer_FUNC DestroyTimer_org;
extern DestroyTimer_FUNC DestroyTimer_ptr;
extern void _cdecl DestroyTimer_my(HTIMER Timer);
extern DestroyTimerDialog_FUNC DestroyTimerDialog_org;
extern DestroyTimerDialog_FUNC DestroyTimerDialog_ptr;
extern void _cdecl DestroyTimerDialog_my(HTIMERDIALOG Dialog);
extern DestroyTrigger_FUNC DestroyTrigger_org;
extern DestroyTrigger_FUNC DestroyTrigger_ptr;
extern void _cdecl DestroyTrigger_my(HTRIGGER Trigger);
extern DestroyUbersplat_FUNC DestroyUbersplat_org;
extern DestroyUbersplat_FUNC DestroyUbersplat_ptr;
extern void _cdecl DestroyUbersplat_my(HUBERSPLAT Splat);
extern DestroyUnitPool_FUNC DestroyUnitPool_org;
extern DestroyUnitPool_FUNC DestroyUnitPool_ptr;
extern void _cdecl DestroyUnitPool_my(HUNITPOOL Pool);
extern DestructableRestoreLife_FUNC DestructableRestoreLife_org;
extern DestructableRestoreLife_FUNC DestructableRestoreLife_ptr;
extern void _cdecl DestructableRestoreLife_my(HDESTRUCTABLE d, float *life, BOOL birth);
extern DialogAddButton_FUNC DialogAddButton_org;
extern DialogAddButton_FUNC DialogAddButton_ptr;
extern HBUTTON _cdecl DialogAddButton_my(HDIALOG Dialog, CJassString buttonText, int hotkey);
extern DialogAddQuitButton_FUNC DialogAddQuitButton_org;
extern DialogAddQuitButton_FUNC DialogAddQuitButton_ptr;
extern HBUTTON _cdecl DialogAddQuitButton_my(HDIALOG Dialog, BOOL doScoreScreen, CJassString buttonText, int hotkey);
extern DialogClear_FUNC DialogClear_org;
extern DialogClear_FUNC DialogClear_ptr;
extern void _cdecl DialogClear_my(HDIALOG Dialog);
extern DialogCreate_FUNC DialogCreate_org;
extern DialogCreate_FUNC DialogCreate_ptr;
extern HDIALOG _cdecl DialogCreate_my();
extern DialogDestroy_FUNC DialogDestroy_org;
extern DialogDestroy_FUNC DialogDestroy_ptr;
extern void _cdecl DialogDestroy_my(HDIALOG Dialog);
extern DialogDisplay_FUNC DialogDisplay_org;
extern DialogDisplay_FUNC DialogDisplay_ptr;
extern void _cdecl DialogDisplay_my(HPLAYER player, HDIALOG Dialog, BOOL flag);
extern DialogSetAsync_FUNC DialogSetAsync_org;
extern DialogSetAsync_FUNC DialogSetAsync_ptr;
extern void _cdecl DialogSetAsync_my(HDIALOG arg1);
extern DialogSetMessage_FUNC DialogSetMessage_org;
extern DialogSetMessage_FUNC DialogSetMessage_ptr;
extern void _cdecl DialogSetMessage_my(HDIALOG Dialog, CJassString messageText);
extern DisablePathing_FUNC DisablePathing_org;
extern DisablePathing_FUNC DisablePathing_ptr;
extern void _cdecl DisablePathing_my();
extern DisableRestartMission_FUNC DisableRestartMission_org;
extern DisableRestartMission_FUNC DisableRestartMission_ptr;
extern void _cdecl DisableRestartMission_my(BOOL flag);
extern DisableTrigger_FUNC DisableTrigger_org;
extern DisableTrigger_FUNC DisableTrigger_ptr;
extern void _cdecl DisableTrigger_my(HTRIGGER Trigger);
extern DisplayCineFilter_FUNC DisplayCineFilter_org;
extern DisplayCineFilter_FUNC DisplayCineFilter_ptr;
extern void _cdecl DisplayCineFilter_my(BOOL flag);
extern DisplayLoadDialog_FUNC DisplayLoadDialog_org;
extern DisplayLoadDialog_FUNC DisplayLoadDialog_ptr;
extern void _cdecl DisplayLoadDialog_my();
extern DisplayText_FUNC DisplayText_org;
extern DisplayText_FUNC DisplayText_ptr;
extern void _cdecl DisplayText_my(int arg1, CJassString arg2);
extern DisplayTextI_FUNC DisplayTextI_org;
extern DisplayTextI_FUNC DisplayTextI_ptr;
extern void _cdecl DisplayTextI_my(int arg1, CJassString arg2, int arg3);
extern DisplayTextII_FUNC DisplayTextII_org;
extern DisplayTextII_FUNC DisplayTextII_ptr;
extern void _cdecl DisplayTextII_my(int arg1, CJassString arg2, int arg3, int arg4);
extern DisplayTextIII_FUNC DisplayTextIII_org;
extern DisplayTextIII_FUNC DisplayTextIII_ptr;
extern void _cdecl DisplayTextIII_my(int arg1, CJassString arg2, int arg3, int arg4, int arg5);
extern DisplayTextToPlayer_FUNC DisplayTextToPlayer_org;
extern DisplayTextToPlayer_FUNC DisplayTextToPlayer_ptr;
extern void _cdecl DisplayTextToPlayer_my(HPLAYER toPlayer, float *x, float *y, CJassString message);
extern DisplayTimedTextFromPlayer_FUNC DisplayTimedTextFromPlayer_org;
extern DisplayTimedTextFromPlayer_FUNC DisplayTimedTextFromPlayer_ptr;
extern void _cdecl DisplayTimedTextFromPlayer_my(HPLAYER toPlayer, float *x, float *y, float *duration, CJassString message);
extern DisplayTimedTextToPlayer_FUNC DisplayTimedTextToPlayer_org;
extern DisplayTimedTextToPlayer_FUNC DisplayTimedTextToPlayer_ptr;
extern void _cdecl DisplayTimedTextToPlayer_my(HPLAYER toPlayer, float *x, float *y, float *duration, CJassString message);
extern DoAiScriptDebug_FUNC DoAiScriptDebug_org;
extern DoAiScriptDebug_FUNC DoAiScriptDebug_ptr;
extern BOOL _cdecl DoAiScriptDebug_my();
extern DoNotSaveReplay_FUNC DoNotSaveReplay_org;
extern DoNotSaveReplay_FUNC DoNotSaveReplay_ptr;
extern void _cdecl DoNotSaveReplay_my();
extern EnableDragSelect_FUNC EnableDragSelect_org;
extern EnableDragSelect_FUNC EnableDragSelect_ptr;
extern void _cdecl EnableDragSelect_my(BOOL state, BOOL ui);
extern EnableMinimapFilterButtons_FUNC EnableMinimapFilterButtons_org;
extern EnableMinimapFilterButtons_FUNC EnableMinimapFilterButtons_ptr;
extern void _cdecl EnableMinimapFilterButtons_my(BOOL enableAlly, BOOL enableCreep);
extern EnableOcclusion_FUNC EnableOcclusion_org;
extern EnableOcclusion_FUNC EnableOcclusion_ptr;
extern void _cdecl EnableOcclusion_my(BOOL flag);
extern EnablePreSelect_FUNC EnablePreSelect_org;
extern EnablePreSelect_FUNC EnablePreSelect_ptr;
extern void _cdecl EnablePreSelect_my(BOOL state, BOOL ui);
extern EnableSelect_FUNC EnableSelect_org;
extern EnableSelect_FUNC EnableSelect_ptr;
extern void _cdecl EnableSelect_my(BOOL state, BOOL ui);
extern EnableTrigger_FUNC EnableTrigger_org;
extern EnableTrigger_FUNC EnableTrigger_ptr;
extern void _cdecl EnableTrigger_my(HTRIGGER Trigger);
extern EnableUserControl_FUNC EnableUserControl_org;
extern EnableUserControl_FUNC EnableUserControl_ptr;
extern void _cdecl EnableUserControl_my(BOOL b);
extern EnableUserUI_FUNC EnableUserUI_org;
extern EnableUserUI_FUNC EnableUserUI_ptr;
extern void _cdecl EnableUserUI_my(BOOL b);
extern EnableWeatherEffect_FUNC EnableWeatherEffect_org;
extern EnableWeatherEffect_FUNC EnableWeatherEffect_ptr;
extern void _cdecl EnableWeatherEffect_my(HWEATHEREFFECT Effect, BOOL enable);
extern EnableWorldFogBoundary_FUNC EnableWorldFogBoundary_org;
extern EnableWorldFogBoundary_FUNC EnableWorldFogBoundary_ptr;
extern void _cdecl EnableWorldFogBoundary_my(BOOL b);
extern EndCinematicScene_FUNC EndCinematicScene_org;
extern EndCinematicScene_FUNC EndCinematicScene_ptr;
extern void _cdecl EndCinematicScene_my();
extern EndGame_FUNC EndGame_org;
extern EndGame_FUNC EndGame_ptr;
extern void _cdecl EndGame_my(BOOL doScoreScreen);
extern EndThematicMusic_FUNC EndThematicMusic_org;
extern EndThematicMusic_FUNC EndThematicMusic_ptr;
extern void _cdecl EndThematicMusic_my();
extern EnumDestructablesInRect_FUNC EnumDestructablesInRect_org;
extern EnumDestructablesInRect_FUNC EnumDestructablesInRect_ptr;
extern void _cdecl EnumDestructablesInRect_my(HRECT r, HBOOLEXPR filter, CODE actionFunc);
extern EnumItemsInRect_FUNC EnumItemsInRect_org;
extern EnumItemsInRect_FUNC EnumItemsInRect_ptr;
extern void _cdecl EnumItemsInRect_my(HRECT r, HBOOLEXPR filter, CODE actionFunc);
extern ExecuteFunc_FUNC ExecuteFunc_org;
extern ExecuteFunc_FUNC ExecuteFunc_ptr;
extern void _cdecl ExecuteFunc_my(CJassString funcName);
extern FillGuardPosts_FUNC FillGuardPosts_org;
extern FillGuardPosts_FUNC FillGuardPosts_ptr;
extern void _cdecl FillGuardPosts_my();
extern Filter_FUNC Filter_org;
extern Filter_FUNC Filter_ptr;
extern HFILTERFUNC _cdecl Filter_my(CODE func);
extern FinishUbersplat_FUNC FinishUbersplat_org;
extern FinishUbersplat_FUNC FinishUbersplat_ptr;
extern void _cdecl FinishUbersplat_my(HUBERSPLAT Splat);
extern FirstOfGroup_FUNC FirstOfGroup_org;
extern FirstOfGroup_FUNC FirstOfGroup_ptr;
extern HUNIT _cdecl FirstOfGroup_my(HGROUP Group);
extern FlashQuestDialogButton_FUNC FlashQuestDialogButton_org;
extern FlashQuestDialogButton_FUNC FlashQuestDialogButton_ptr;
extern void _cdecl FlashQuestDialogButton_my();
extern FlushChildHashtable_FUNC FlushChildHashtable_org;
extern FlushChildHashtable_FUNC FlushChildHashtable_ptr;
extern void _cdecl FlushChildHashtable_my(HHASHTABLE table, int parentKey);
extern FlushGameCache_FUNC FlushGameCache_org;
extern FlushGameCache_FUNC FlushGameCache_ptr;
extern void _cdecl FlushGameCache_my(HGAMECACHE cache);
extern FlushParentHashtable_FUNC FlushParentHashtable_org;
extern FlushParentHashtable_FUNC FlushParentHashtable_ptr;
extern void _cdecl FlushParentHashtable_my(HHASHTABLE table);
extern FlushStoredBoolean_FUNC FlushStoredBoolean_org;
extern FlushStoredBoolean_FUNC FlushStoredBoolean_ptr;
extern void _cdecl FlushStoredBoolean_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern FlushStoredInteger_FUNC FlushStoredInteger_org;
extern FlushStoredInteger_FUNC FlushStoredInteger_ptr;
extern void _cdecl FlushStoredInteger_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern FlushStoredMission_FUNC FlushStoredMission_org;
extern FlushStoredMission_FUNC FlushStoredMission_ptr;
extern void _cdecl FlushStoredMission_my(HGAMECACHE cache, CJassString missionKey);
extern FlushStoredReal_FUNC FlushStoredReal_org;
extern FlushStoredReal_FUNC FlushStoredReal_ptr;
extern void _cdecl FlushStoredReal_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern FlushStoredString_FUNC FlushStoredString_org;
extern FlushStoredString_FUNC FlushStoredString_ptr;
extern void _cdecl FlushStoredString_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern FlushStoredUnit_FUNC FlushStoredUnit_org;
extern FlushStoredUnit_FUNC FlushStoredUnit_ptr;
extern void _cdecl FlushStoredUnit_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern FogEnable_FUNC FogEnable_org;
extern FogEnable_FUNC FogEnable_ptr;
extern void _cdecl FogEnable_my(BOOL enable);
extern FogMaskEnable_FUNC FogMaskEnable_org;
extern FogMaskEnable_FUNC FogMaskEnable_ptr;
extern void _cdecl FogMaskEnable_my(BOOL enable);
extern FogModifierStart_FUNC FogModifierStart_org;
extern FogModifierStart_FUNC FogModifierStart_ptr;
extern void _cdecl FogModifierStart_my(HFOGMODIFIER FogModifier);
extern FogModifierStop_FUNC FogModifierStop_org;
extern FogModifierStop_FUNC FogModifierStop_ptr;
extern void _cdecl FogModifierStop_my(HFOGMODIFIER FogModifier);
extern ForForce_FUNC ForForce_org;
extern ForForce_FUNC ForForce_ptr;
extern void _cdecl ForForce_my(HFORCE Force, CODE callback);
extern ForGroup_FUNC ForGroup_org;
extern ForGroup_FUNC ForGroup_ptr;
extern void _cdecl ForGroup_my(HGROUP Group, CODE callback);
extern ForceAddPlayer_FUNC ForceAddPlayer_org;
extern ForceAddPlayer_FUNC ForceAddPlayer_ptr;
extern void _cdecl ForceAddPlayer_my(HFORCE Force, HPLAYER player);
extern ForceCampaignSelectScreen_FUNC ForceCampaignSelectScreen_org;
extern ForceCampaignSelectScreen_FUNC ForceCampaignSelectScreen_ptr;
extern void _cdecl ForceCampaignSelectScreen_my();
extern ForceCinematicSubtitles_FUNC ForceCinematicSubtitles_org;
extern ForceCinematicSubtitles_FUNC ForceCinematicSubtitles_ptr;
extern void _cdecl ForceCinematicSubtitles_my(BOOL flag);
extern ForceClear_FUNC ForceClear_org;
extern ForceClear_FUNC ForceClear_ptr;
extern void _cdecl ForceClear_my(HFORCE Force);
extern ForceEnumAllies_FUNC ForceEnumAllies_org;
extern ForceEnumAllies_FUNC ForceEnumAllies_ptr;
extern void _cdecl ForceEnumAllies_my(HFORCE Force, HPLAYER player, HBOOLEXPR filter);
extern ForceEnumEnemies_FUNC ForceEnumEnemies_org;
extern ForceEnumEnemies_FUNC ForceEnumEnemies_ptr;
extern void _cdecl ForceEnumEnemies_my(HFORCE Force, HPLAYER player, HBOOLEXPR filter);
extern ForceEnumPlayers_FUNC ForceEnumPlayers_org;
extern ForceEnumPlayers_FUNC ForceEnumPlayers_ptr;
extern void _cdecl ForceEnumPlayers_my(HFORCE Force, HBOOLEXPR filter);
extern ForceEnumPlayersCounted_FUNC ForceEnumPlayersCounted_org;
extern ForceEnumPlayersCounted_FUNC ForceEnumPlayersCounted_ptr;
extern void _cdecl ForceEnumPlayersCounted_my(HFORCE Force, HBOOLEXPR filter, int countLimit);
extern ForcePlayerStartLocation_FUNC ForcePlayerStartLocation_org;
extern ForcePlayerStartLocation_FUNC ForcePlayerStartLocation_ptr;
extern void _cdecl ForcePlayerStartLocation_my(HPLAYER player, int startLocIndex);
extern ForceQuestDialogUpdate_FUNC ForceQuestDialogUpdate_org;
extern ForceQuestDialogUpdate_FUNC ForceQuestDialogUpdate_ptr;
extern void _cdecl ForceQuestDialogUpdate_my();
extern ForceRemovePlayer_FUNC ForceRemovePlayer_org;
extern ForceRemovePlayer_FUNC ForceRemovePlayer_ptr;
extern void _cdecl ForceRemovePlayer_my(HFORCE Force, HPLAYER player);
extern ForceUICancel_FUNC ForceUICancel_org;
extern ForceUICancel_FUNC ForceUICancel_ptr;
extern void _cdecl ForceUICancel_my();
extern ForceUIKey_FUNC ForceUIKey_org;
extern ForceUIKey_FUNC ForceUIKey_ptr;
extern void _cdecl ForceUIKey_my(CJassString key);
extern GetAIDifficulty_FUNC GetAIDifficulty_org;
extern GetAIDifficulty_FUNC GetAIDifficulty_ptr;
extern HAIDIFFICULTY _cdecl GetAIDifficulty_my(HPLAYER num);
extern GetAbilityEffect_FUNC GetAbilityEffect_org;
extern GetAbilityEffect_FUNC GetAbilityEffect_ptr;
extern CJassStringSID _cdecl GetAbilityEffect_my(CJassString abilityString, HEFFECTTYPE t, int index);
extern GetAbilityEffectById_FUNC GetAbilityEffectById_org;
extern GetAbilityEffectById_FUNC GetAbilityEffectById_ptr;
extern CJassStringSID _cdecl GetAbilityEffectById_my(int AbilID, HEFFECTTYPE t, int index);
extern GetAbilitySound_FUNC GetAbilitySound_org;
extern GetAbilitySound_FUNC GetAbilitySound_ptr;
extern CJassStringSID _cdecl GetAbilitySound_my(CJassString abilityString, HSOUNDTYPE t);
extern GetAbilitySoundById_FUNC GetAbilitySoundById_org;
extern GetAbilitySoundById_FUNC GetAbilitySoundById_ptr;
extern CJassStringSID _cdecl GetAbilitySoundById_my(int AbilID, HSOUNDTYPE t);
extern GetAiPlayer_FUNC GetAiPlayer_org;
extern GetAiPlayer_FUNC GetAiPlayer_ptr;
extern int _cdecl GetAiPlayer_my();
extern GetAllianceTarget_FUNC GetAllianceTarget_org;
extern GetAllianceTarget_FUNC GetAllianceTarget_ptr;
extern HUNIT _cdecl GetAllianceTarget_my();
extern GetAllyColorFilterState_FUNC GetAllyColorFilterState_org;
extern GetAllyColorFilterState_FUNC GetAllyColorFilterState_ptr;
extern int _cdecl GetAllyColorFilterState_my();
extern GetAttacker_FUNC GetAttacker_org;
extern GetAttacker_FUNC GetAttacker_ptr;
extern HUNIT _cdecl GetAttacker_my();
extern GetBuilding_FUNC GetBuilding_org;
extern GetBuilding_FUNC GetBuilding_ptr;
extern HUNIT _cdecl GetBuilding_my(HPLAYER arg1);
extern GetBuyingUnit_FUNC GetBuyingUnit_org;
extern GetBuyingUnit_FUNC GetBuyingUnit_ptr;
extern HUNIT _cdecl GetBuyingUnit_my();
extern GetCameraBoundMaxX_FUNC GetCameraBoundMaxX_org;
extern GetCameraBoundMaxX_FUNC GetCameraBoundMaxX_ptr;
extern DWFP _cdecl GetCameraBoundMaxX_my();
extern GetCameraBoundMaxY_FUNC GetCameraBoundMaxY_org;
extern GetCameraBoundMaxY_FUNC GetCameraBoundMaxY_ptr;
extern DWFP _cdecl GetCameraBoundMaxY_my();
extern GetCameraBoundMinX_FUNC GetCameraBoundMinX_org;
extern GetCameraBoundMinX_FUNC GetCameraBoundMinX_ptr;
extern DWFP _cdecl GetCameraBoundMinX_my();
extern GetCameraBoundMinY_FUNC GetCameraBoundMinY_org;
extern GetCameraBoundMinY_FUNC GetCameraBoundMinY_ptr;
extern DWFP _cdecl GetCameraBoundMinY_my();
extern GetCameraEyePositionLoc_FUNC GetCameraEyePositionLoc_org;
extern GetCameraEyePositionLoc_FUNC GetCameraEyePositionLoc_ptr;
extern HLOCATION _cdecl GetCameraEyePositionLoc_my();
extern GetCameraEyePositionX_FUNC GetCameraEyePositionX_org;
extern GetCameraEyePositionX_FUNC GetCameraEyePositionX_ptr;
extern DWFP _cdecl GetCameraEyePositionX_my();
extern GetCameraEyePositionY_FUNC GetCameraEyePositionY_org;
extern GetCameraEyePositionY_FUNC GetCameraEyePositionY_ptr;
extern DWFP _cdecl GetCameraEyePositionY_my();
extern GetCameraEyePositionZ_FUNC GetCameraEyePositionZ_org;
extern GetCameraEyePositionZ_FUNC GetCameraEyePositionZ_ptr;
extern DWFP _cdecl GetCameraEyePositionZ_my();
extern GetCameraField_FUNC GetCameraField_org;
extern GetCameraField_FUNC GetCameraField_ptr;
extern DWFP _cdecl GetCameraField_my(HCAMERAFIELD field);
extern GetCameraMargin_FUNC GetCameraMargin_org;
extern GetCameraMargin_FUNC GetCameraMargin_ptr;
extern DWFP _cdecl GetCameraMargin_my(int Margin);
extern GetCameraTargetPositionLoc_FUNC GetCameraTargetPositionLoc_org;
extern GetCameraTargetPositionLoc_FUNC GetCameraTargetPositionLoc_ptr;
extern HLOCATION _cdecl GetCameraTargetPositionLoc_my();
extern GetCameraTargetPositionX_FUNC GetCameraTargetPositionX_org;
extern GetCameraTargetPositionX_FUNC GetCameraTargetPositionX_ptr;
extern DWFP _cdecl GetCameraTargetPositionX_my();
extern GetCameraTargetPositionY_FUNC GetCameraTargetPositionY_org;
extern GetCameraTargetPositionY_FUNC GetCameraTargetPositionY_ptr;
extern DWFP _cdecl GetCameraTargetPositionY_my();
extern GetCameraTargetPositionZ_FUNC GetCameraTargetPositionZ_org;
extern GetCameraTargetPositionZ_FUNC GetCameraTargetPositionZ_ptr;
extern DWFP _cdecl GetCameraTargetPositionZ_my();
extern GetCancelledStructure_FUNC GetCancelledStructure_org;
extern GetCancelledStructure_FUNC GetCancelledStructure_ptr;
extern HUNIT _cdecl GetCancelledStructure_my();
extern GetChangingUnit_FUNC GetChangingUnit_org;
extern GetChangingUnit_FUNC GetChangingUnit_ptr;
extern HUNIT _cdecl GetChangingUnit_my();
extern GetChangingUnitPrevOwner_FUNC GetChangingUnitPrevOwner_org;
extern GetChangingUnitPrevOwner_FUNC GetChangingUnitPrevOwner_ptr;
extern HPLAYER _cdecl GetChangingUnitPrevOwner_my();
extern GetClickedButton_FUNC GetClickedButton_org;
extern GetClickedButton_FUNC GetClickedButton_ptr;
extern HBUTTON _cdecl GetClickedButton_my();
extern GetClickedDialog_FUNC GetClickedDialog_org;
extern GetClickedDialog_FUNC GetClickedDialog_ptr;
extern HDIALOG _cdecl GetClickedDialog_my();
extern GetConstructedStructure_FUNC GetConstructedStructure_org;
extern GetConstructedStructure_FUNC GetConstructedStructure_ptr;
extern HUNIT _cdecl GetConstructedStructure_my();
extern GetConstructingStructure_FUNC GetConstructingStructure_org;
extern GetConstructingStructure_FUNC GetConstructingStructure_ptr;
extern HUNIT _cdecl GetConstructingStructure_my();
extern GetCreatureDensity_FUNC GetCreatureDensity_org;
extern GetCreatureDensity_FUNC GetCreatureDensity_ptr;
extern HMAPDENSITY _cdecl GetCreatureDensity_my();
extern GetCreepCamp_FUNC GetCreepCamp_org;
extern GetCreepCamp_FUNC GetCreepCamp_ptr;
extern HUNIT _cdecl GetCreepCamp_my(int arg1, int arg2, BOOL arg3);
extern GetCreepCampFilterState_FUNC GetCreepCampFilterState_org;
extern GetCreepCampFilterState_FUNC GetCreepCampFilterState_ptr;
extern BOOL _cdecl GetCreepCampFilterState_my();
extern GetCustomCampaignButtonVisible_FUNC GetCustomCampaignButtonVisible_org;
extern GetCustomCampaignButtonVisible_FUNC GetCustomCampaignButtonVisible_ptr;
extern BOOL _cdecl GetCustomCampaignButtonVisible_my(int Button);
extern GetDecayingUnit_FUNC GetDecayingUnit_org;
extern GetDecayingUnit_FUNC GetDecayingUnit_ptr;
extern HUNIT _cdecl GetDecayingUnit_my();
extern GetDefaultDifficulty_FUNC GetDefaultDifficulty_org;
extern GetDefaultDifficulty_FUNC GetDefaultDifficulty_ptr;
extern HGAMEDIFFICULTY _cdecl GetDefaultDifficulty_my();
extern GetDestructableLife_FUNC GetDestructableLife_org;
extern GetDestructableLife_FUNC GetDestructableLife_ptr;
extern DWFP _cdecl GetDestructableLife_my(HDESTRUCTABLE d);
extern GetDestructableMaxLife_FUNC GetDestructableMaxLife_org;
extern GetDestructableMaxLife_FUNC GetDestructableMaxLife_ptr;
extern DWFP _cdecl GetDestructableMaxLife_my(HDESTRUCTABLE d);
extern GetDestructableName_FUNC GetDestructableName_org;
extern GetDestructableName_FUNC GetDestructableName_ptr;
extern CJassStringSID _cdecl GetDestructableName_my(HDESTRUCTABLE d);
extern GetDestructableOccluderHeight_FUNC GetDestructableOccluderHeight_org;
extern GetDestructableOccluderHeight_FUNC GetDestructableOccluderHeight_ptr;
extern DWFP _cdecl GetDestructableOccluderHeight_my(HDESTRUCTABLE d);
extern GetDestructableTypeId_FUNC GetDestructableTypeId_org;
extern GetDestructableTypeId_FUNC GetDestructableTypeId_ptr;
extern int _cdecl GetDestructableTypeId_my(HDESTRUCTABLE d);
extern GetDestructableX_FUNC GetDestructableX_org;
extern GetDestructableX_FUNC GetDestructableX_ptr;
extern DWFP _cdecl GetDestructableX_my(HDESTRUCTABLE d);
extern GetDestructableY_FUNC GetDestructableY_org;
extern GetDestructableY_FUNC GetDestructableY_ptr;
extern DWFP _cdecl GetDestructableY_my(HDESTRUCTABLE d);
extern GetDetectedUnit_FUNC GetDetectedUnit_org;
extern GetDetectedUnit_FUNC GetDetectedUnit_ptr;
extern HUNIT _cdecl GetDetectedUnit_my();
extern GetDyingUnit_FUNC GetDyingUnit_org;
extern GetDyingUnit_FUNC GetDyingUnit_ptr;
extern HUNIT _cdecl GetDyingUnit_my();
extern GetEnemyBase_FUNC GetEnemyBase_org;
extern GetEnemyBase_FUNC GetEnemyBase_ptr;
extern HUNIT _cdecl GetEnemyBase_my();
extern GetEnemyExpansion_FUNC GetEnemyExpansion_org;
extern GetEnemyExpansion_FUNC GetEnemyExpansion_ptr;
extern HUNIT _cdecl GetEnemyExpansion_my();
extern GetEnemyPower_FUNC GetEnemyPower_org;
extern GetEnemyPower_FUNC GetEnemyPower_ptr;
extern int _cdecl GetEnemyPower_my();
extern GetEnteringUnit_FUNC GetEnteringUnit_org;
extern GetEnteringUnit_FUNC GetEnteringUnit_ptr;
extern HUNIT _cdecl GetEnteringUnit_my();
extern GetEnumDestructable_FUNC GetEnumDestructable_org;
extern GetEnumDestructable_FUNC GetEnumDestructable_ptr;
extern HDESTRUCTABLE _cdecl GetEnumDestructable_my();
extern GetEnumItem_FUNC GetEnumItem_org;
extern GetEnumItem_FUNC GetEnumItem_ptr;
extern HITEM _cdecl GetEnumItem_my();
extern GetEnumPlayer_FUNC GetEnumPlayer_org;
extern GetEnumPlayer_FUNC GetEnumPlayer_ptr;
extern HPLAYER _cdecl GetEnumPlayer_my();
extern GetEnumUnit_FUNC GetEnumUnit_org;
extern GetEnumUnit_FUNC GetEnumUnit_ptr;
extern HUNIT _cdecl GetEnumUnit_my();
extern GetEventDamage_FUNC GetEventDamage_org;
extern GetEventDamage_FUNC GetEventDamage_ptr;
extern DWFP _cdecl GetEventDamage_my();
extern GetEventDamageSource_FUNC GetEventDamageSource_org;
extern GetEventDamageSource_FUNC GetEventDamageSource_ptr;
extern HUNIT _cdecl GetEventDamageSource_my();
extern GetEventDetectingPlayer_FUNC GetEventDetectingPlayer_org;
extern GetEventDetectingPlayer_FUNC GetEventDetectingPlayer_ptr;
extern HPLAYER _cdecl GetEventDetectingPlayer_my();
extern GetEventGameState_FUNC GetEventGameState_org;
extern GetEventGameState_FUNC GetEventGameState_ptr;
extern HGAMESTATE _cdecl GetEventGameState_my();
extern GetEventPlayerChatString_FUNC GetEventPlayerChatString_org;
extern GetEventPlayerChatString_FUNC GetEventPlayerChatString_ptr;
extern CJassStringSID _cdecl GetEventPlayerChatString_my();
extern GetEventPlayerChatStringMatched_FUNC GetEventPlayerChatStringMatched_org;
extern GetEventPlayerChatStringMatched_FUNC GetEventPlayerChatStringMatched_ptr;
extern CJassStringSID _cdecl GetEventPlayerChatStringMatched_my();
extern GetEventPlayerState_FUNC GetEventPlayerState_org;
extern GetEventPlayerState_FUNC GetEventPlayerState_ptr;
extern HPLAYERSTATE _cdecl GetEventPlayerState_my();
extern GetEventTargetUnit_FUNC GetEventTargetUnit_org;
extern GetEventTargetUnit_FUNC GetEventTargetUnit_ptr;
extern HUNIT _cdecl GetEventTargetUnit_my();
extern GetEventUnitState_FUNC GetEventUnitState_org;
extern GetEventUnitState_FUNC GetEventUnitState_ptr;
extern HUNITSTATE _cdecl GetEventUnitState_my();
extern GetExpansionFoe_FUNC GetExpansionFoe_org;
extern GetExpansionFoe_FUNC GetExpansionFoe_ptr;
extern HUNIT _cdecl GetExpansionFoe_my();
extern GetExpansionPeon_FUNC GetExpansionPeon_org;
extern GetExpansionPeon_FUNC GetExpansionPeon_ptr;
extern HUNIT _cdecl GetExpansionPeon_my();
extern GetExpansionX_FUNC GetExpansionX_org;
extern GetExpansionX_FUNC GetExpansionX_ptr;
extern int _cdecl GetExpansionX_my();
extern GetExpansionY_FUNC GetExpansionY_org;
extern GetExpansionY_FUNC GetExpansionY_ptr;
extern int _cdecl GetExpansionY_my();
extern GetExpiredTimer_FUNC GetExpiredTimer_org;
extern GetExpiredTimer_FUNC GetExpiredTimer_ptr;
extern HTIMER _cdecl GetExpiredTimer_my();
extern GetFilterDestructable_FUNC GetFilterDestructable_org;
extern GetFilterDestructable_FUNC GetFilterDestructable_ptr;
extern HDESTRUCTABLE _cdecl GetFilterDestructable_my();
extern GetFilterItem_FUNC GetFilterItem_org;
extern GetFilterItem_FUNC GetFilterItem_ptr;
extern HITEM _cdecl GetFilterItem_my();
extern GetFilterPlayer_FUNC GetFilterPlayer_org;
extern GetFilterPlayer_FUNC GetFilterPlayer_ptr;
extern HPLAYER _cdecl GetFilterPlayer_my();
extern GetFilterUnit_FUNC GetFilterUnit_org;
extern GetFilterUnit_FUNC GetFilterUnit_ptr;
extern HUNIT _cdecl GetFilterUnit_my();
extern GetFloatGameState_FUNC GetFloatGameState_org;
extern GetFloatGameState_FUNC GetFloatGameState_ptr;
extern DWFP _cdecl GetFloatGameState_my(HFGAMESTATE FloatGameState);
extern GetFoodMade_FUNC GetFoodMade_org;
extern GetFoodMade_FUNC GetFoodMade_ptr;
extern int _cdecl GetFoodMade_my(int unitId);
extern GetFoodUsed_FUNC GetFoodUsed_org;
extern GetFoodUsed_FUNC GetFoodUsed_ptr;
extern int _cdecl GetFoodUsed_my(int unitId);
extern GetGameDifficulty_FUNC GetGameDifficulty_org;
extern GetGameDifficulty_FUNC GetGameDifficulty_ptr;
extern HGAMEDIFFICULTY _cdecl GetGameDifficulty_my();
extern GetGamePlacement_FUNC GetGamePlacement_org;
extern GetGamePlacement_FUNC GetGamePlacement_ptr;
extern HPLACEMENT _cdecl GetGamePlacement_my();
extern GetGameSpeed_FUNC GetGameSpeed_org;
extern GetGameSpeed_FUNC GetGameSpeed_ptr;
extern HGAMESPEED _cdecl GetGameSpeed_my();
extern GetGameTypeSelected_FUNC GetGameTypeSelected_org;
extern GetGameTypeSelected_FUNC GetGameTypeSelected_ptr;
extern HGAMETYPE _cdecl GetGameTypeSelected_my();
extern GetGoldOwned_FUNC GetGoldOwned_org;
extern GetGoldOwned_FUNC GetGoldOwned_ptr;
extern int _cdecl GetGoldOwned_my();
extern GetHandleId_FUNC GetHandleId_org;
extern GetHandleId_FUNC GetHandleId_ptr;
extern int _cdecl GetHandleId_my(HHANDLE h);
extern GetHeroAgi_FUNC GetHeroAgi_org;
extern GetHeroAgi_FUNC GetHeroAgi_ptr;
extern int _cdecl GetHeroAgi_my(HUNIT hero, BOOL includeBonuses);
extern GetHeroId_FUNC GetHeroId_org;
extern GetHeroId_FUNC GetHeroId_ptr;
extern int _cdecl GetHeroId_my();
extern GetHeroInt_FUNC GetHeroInt_org;
extern GetHeroInt_FUNC GetHeroInt_ptr;
extern int _cdecl GetHeroInt_my(HUNIT hero, BOOL includeBonuses);
extern GetHeroLevel_FUNC GetHeroLevel_org;
extern GetHeroLevel_FUNC GetHeroLevel_ptr;
extern int _cdecl GetHeroLevel_my(HUNIT hero);
extern GetHeroLevelAI_FUNC GetHeroLevelAI_org;
extern GetHeroLevelAI_FUNC GetHeroLevelAI_ptr;
extern int _cdecl GetHeroLevelAI_my();
extern GetHeroProperName_FUNC GetHeroProperName_org;
extern GetHeroProperName_FUNC GetHeroProperName_ptr;
extern CJassStringSID _cdecl GetHeroProperName_my(HUNIT hero);
extern GetHeroSkillPoints_FUNC GetHeroSkillPoints_org;
extern GetHeroSkillPoints_FUNC GetHeroSkillPoints_ptr;
extern int _cdecl GetHeroSkillPoints_my(HUNIT hero);
extern GetHeroStr_FUNC GetHeroStr_org;
extern GetHeroStr_FUNC GetHeroStr_ptr;
extern int _cdecl GetHeroStr_my(HUNIT hero, BOOL includeBonuses);
extern GetHeroXP_FUNC GetHeroXP_org;
extern GetHeroXP_FUNC GetHeroXP_ptr;
extern int _cdecl GetHeroXP_my(HUNIT hero);
extern GetIntegerGameState_FUNC GetIntegerGameState_org;
extern GetIntegerGameState_FUNC GetIntegerGameState_ptr;
extern int _cdecl GetIntegerGameState_my(HIGAMESTATE IntegerGameState);
extern GetIssuedOrderId_FUNC GetIssuedOrderId_org;
extern GetIssuedOrderId_FUNC GetIssuedOrderId_ptr;
extern int _cdecl GetIssuedOrderId_my();
extern GetItemCharges_FUNC GetItemCharges_org;
extern GetItemCharges_FUNC GetItemCharges_ptr;
extern int _cdecl GetItemCharges_my(HITEM item);
extern GetItemLevel_FUNC GetItemLevel_org;
extern GetItemLevel_FUNC GetItemLevel_ptr;
extern int _cdecl GetItemLevel_my(HITEM item);
extern GetItemName_FUNC GetItemName_org;
extern GetItemName_FUNC GetItemName_ptr;
extern CJassStringSID _cdecl GetItemName_my(HITEM item);
extern GetItemPlayer_FUNC GetItemPlayer_org;
extern GetItemPlayer_FUNC GetItemPlayer_ptr;
extern HPLAYER _cdecl GetItemPlayer_my(HITEM item);
extern GetItemType_FUNC GetItemType_org;
extern GetItemType_FUNC GetItemType_ptr;
extern HITEMTYPE _cdecl GetItemType_my(HITEM item);
extern GetItemTypeId_FUNC GetItemTypeId_org;
extern GetItemTypeId_FUNC GetItemTypeId_ptr;
extern int _cdecl GetItemTypeId_my(HITEM i);
extern GetItemUserData_FUNC GetItemUserData_org;
extern GetItemUserData_FUNC GetItemUserData_ptr;
extern int _cdecl GetItemUserData_my(HITEM item);
extern GetItemX_FUNC GetItemX_org;
extern GetItemX_FUNC GetItemX_ptr;
extern DWFP _cdecl GetItemX_my(HITEM i);
extern GetItemY_FUNC GetItemY_org;
extern GetItemY_FUNC GetItemY_ptr;
extern DWFP _cdecl GetItemY_my(HITEM i);
extern GetKillingUnit_FUNC GetKillingUnit_org;
extern GetKillingUnit_FUNC GetKillingUnit_ptr;
extern HUNIT _cdecl GetKillingUnit_my();
extern GetLastCommand_FUNC GetLastCommand_org;
extern GetLastCommand_FUNC GetLastCommand_ptr;
extern int _cdecl GetLastCommand_my();
extern GetLastData_FUNC GetLastData_org;
extern GetLastData_FUNC GetLastData_ptr;
extern int _cdecl GetLastData_my();
extern GetLearnedSkill_FUNC GetLearnedSkill_org;
extern GetLearnedSkill_FUNC GetLearnedSkill_ptr;
extern int _cdecl GetLearnedSkill_my();
extern GetLearnedSkillLevel_FUNC GetLearnedSkillLevel_org;
extern GetLearnedSkillLevel_FUNC GetLearnedSkillLevel_ptr;
extern int _cdecl GetLearnedSkillLevel_my();
extern GetLearningUnit_FUNC GetLearningUnit_org;
extern GetLearningUnit_FUNC GetLearningUnit_ptr;
extern HUNIT _cdecl GetLearningUnit_my();
extern GetLeavingUnit_FUNC GetLeavingUnit_org;
extern GetLeavingUnit_FUNC GetLeavingUnit_ptr;
extern HUNIT _cdecl GetLeavingUnit_my();
extern GetLevelingUnit_FUNC GetLevelingUnit_org;
extern GetLevelingUnit_FUNC GetLevelingUnit_ptr;
extern HUNIT _cdecl GetLevelingUnit_my();
extern GetLightningColorA_FUNC GetLightningColorA_org;
extern GetLightningColorA_FUNC GetLightningColorA_ptr;
extern DWFP _cdecl GetLightningColorA_my(HLIGHTNING Bolt);
extern GetLightningColorB_FUNC GetLightningColorB_org;
extern GetLightningColorB_FUNC GetLightningColorB_ptr;
extern DWFP _cdecl GetLightningColorB_my(HLIGHTNING Bolt);
extern GetLightningColorG_FUNC GetLightningColorG_org;
extern GetLightningColorG_FUNC GetLightningColorG_ptr;
extern DWFP _cdecl GetLightningColorG_my(HLIGHTNING Bolt);
extern GetLightningColorR_FUNC GetLightningColorR_org;
extern GetLightningColorR_FUNC GetLightningColorR_ptr;
extern DWFP _cdecl GetLightningColorR_my(HLIGHTNING Bolt);
extern GetLoadedUnit_FUNC GetLoadedUnit_org;
extern GetLoadedUnit_FUNC GetLoadedUnit_ptr;
extern HUNIT _cdecl GetLoadedUnit_my();
extern GetLocalPlayer_FUNC GetLocalPlayer_org;
extern GetLocalPlayer_FUNC GetLocalPlayer_ptr;
extern HPLAYER _cdecl GetLocalPlayer_my();
extern GetLocalizedHotkey_FUNC GetLocalizedHotkey_org;
extern GetLocalizedHotkey_FUNC GetLocalizedHotkey_ptr;
extern int _cdecl GetLocalizedHotkey_my(CJassString source);
extern GetLocalizedString_FUNC GetLocalizedString_org;
extern GetLocalizedString_FUNC GetLocalizedString_ptr;
extern CJassStringSID _cdecl GetLocalizedString_my(CJassString source);
extern GetLocationX_FUNC GetLocationX_org;
extern GetLocationX_FUNC GetLocationX_ptr;
extern DWFP _cdecl GetLocationX_my(HLOCATION Location);
extern GetLocationY_FUNC GetLocationY_org;
extern GetLocationY_FUNC GetLocationY_ptr;
extern DWFP _cdecl GetLocationY_my(HLOCATION Location);
extern GetLocationZ_FUNC GetLocationZ_org;
extern GetLocationZ_FUNC GetLocationZ_ptr;
extern DWFP _cdecl GetLocationZ_my(HLOCATION Location);
extern GetManipulatedItem_FUNC GetManipulatedItem_org;
extern GetManipulatedItem_FUNC GetManipulatedItem_ptr;
extern HITEM _cdecl GetManipulatedItem_my();
extern GetManipulatingUnit_FUNC GetManipulatingUnit_org;
extern GetManipulatingUnit_FUNC GetManipulatingUnit_ptr;
extern HUNIT _cdecl GetManipulatingUnit_my();
extern GetMegaTarget_FUNC GetMegaTarget_org;
extern GetMegaTarget_FUNC GetMegaTarget_ptr;
extern HUNIT _cdecl GetMegaTarget_my();
extern GetMinesOwned_FUNC GetMinesOwned_org;
extern GetMinesOwned_FUNC GetMinesOwned_ptr;
extern int _cdecl GetMinesOwned_my();
extern GetNextExpansion_FUNC GetNextExpansion_org;
extern GetNextExpansion_FUNC GetNextExpansion_ptr;
extern int _cdecl GetNextExpansion_my();
extern GetObjectName_FUNC GetObjectName_org;
extern GetObjectName_FUNC GetObjectName_ptr;
extern CJassStringSID _cdecl GetObjectName_my(int objectId);
extern GetOrderPointLoc_FUNC GetOrderPointLoc_org;
extern GetOrderPointLoc_FUNC GetOrderPointLoc_ptr;
extern HLOCATION _cdecl GetOrderPointLoc_my();
extern GetOrderPointX_FUNC GetOrderPointX_org;
extern GetOrderPointX_FUNC GetOrderPointX_ptr;
extern DWFP _cdecl GetOrderPointX_my();
extern GetOrderPointY_FUNC GetOrderPointY_org;
extern GetOrderPointY_FUNC GetOrderPointY_ptr;
extern DWFP _cdecl GetOrderPointY_my();
extern GetOrderTarget_FUNC GetOrderTarget_org;
extern GetOrderTarget_FUNC GetOrderTarget_ptr;
extern HWIDGET _cdecl GetOrderTarget_my();
extern GetOrderTargetDestructable_FUNC GetOrderTargetDestructable_org;
extern GetOrderTargetDestructable_FUNC GetOrderTargetDestructable_ptr;
extern HDESTRUCTABLE _cdecl GetOrderTargetDestructable_my();
extern GetOrderTargetItem_FUNC GetOrderTargetItem_org;
extern GetOrderTargetItem_FUNC GetOrderTargetItem_ptr;
extern HITEM _cdecl GetOrderTargetItem_my();
extern GetOrderTargetUnit_FUNC GetOrderTargetUnit_org;
extern GetOrderTargetUnit_FUNC GetOrderTargetUnit_ptr;
extern HUNIT _cdecl GetOrderTargetUnit_my();
extern GetOrderedUnit_FUNC GetOrderedUnit_org;
extern GetOrderedUnit_FUNC GetOrderedUnit_ptr;
extern HUNIT _cdecl GetOrderedUnit_my();
extern GetOwningPlayer_FUNC GetOwningPlayer_org;
extern GetOwningPlayer_FUNC GetOwningPlayer_ptr;
extern HPLAYER _cdecl GetOwningPlayer_my(HUNIT unit);
extern GetPlayerAlliance_FUNC GetPlayerAlliance_org;
extern GetPlayerAlliance_FUNC GetPlayerAlliance_ptr;
extern BOOL _cdecl GetPlayerAlliance_my(HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE AllianceSetting);
extern GetPlayerColor_FUNC GetPlayerColor_org;
extern GetPlayerColor_FUNC GetPlayerColor_ptr;
extern HPLAYERCOLOR _cdecl GetPlayerColor_my(HPLAYER player);
extern GetPlayerController_FUNC GetPlayerController_org;
extern GetPlayerController_FUNC GetPlayerController_ptr;
extern HMAPCONTROL _cdecl GetPlayerController_my(HPLAYER player);
extern GetPlayerHandicap_FUNC GetPlayerHandicap_org;
extern GetPlayerHandicap_FUNC GetPlayerHandicap_ptr;
extern DWFP _cdecl GetPlayerHandicap_my(HPLAYER player);
extern GetPlayerHandicapXP_FUNC GetPlayerHandicapXP_org;
extern GetPlayerHandicapXP_FUNC GetPlayerHandicapXP_ptr;
extern DWFP _cdecl GetPlayerHandicapXP_my(HPLAYER player);
extern GetPlayerId_FUNC GetPlayerId_org;
extern GetPlayerId_FUNC GetPlayerId_ptr;
extern int _cdecl GetPlayerId_my(HPLAYER player);
extern GetPlayerName_FUNC GetPlayerName_org;
extern GetPlayerName_FUNC GetPlayerName_ptr;
extern CJassStringSID _cdecl GetPlayerName_my(HPLAYER player);
extern GetPlayerRace_FUNC GetPlayerRace_org;
extern GetPlayerRace_FUNC GetPlayerRace_ptr;
extern HRACE _cdecl GetPlayerRace_my(HPLAYER player);
extern GetPlayerScore_FUNC GetPlayerScore_org;
extern GetPlayerScore_FUNC GetPlayerScore_ptr;
extern int _cdecl GetPlayerScore_my(HPLAYER player, HPLAYERSCORE PlayerScore);
extern GetPlayerSelectable_FUNC GetPlayerSelectable_org;
extern GetPlayerSelectable_FUNC GetPlayerSelectable_ptr;
extern BOOL _cdecl GetPlayerSelectable_my(HPLAYER player);
extern GetPlayerSlotState_FUNC GetPlayerSlotState_org;
extern GetPlayerSlotState_FUNC GetPlayerSlotState_ptr;
extern HPLAYERSLOTSTATE _cdecl GetPlayerSlotState_my(HPLAYER player);
extern GetPlayerStartLocation_FUNC GetPlayerStartLocation_org;
extern GetPlayerStartLocation_FUNC GetPlayerStartLocation_ptr;
extern int _cdecl GetPlayerStartLocation_my(HPLAYER player);
extern GetPlayerStartLocationX_FUNC GetPlayerStartLocationX_org;
extern GetPlayerStartLocationX_FUNC GetPlayerStartLocationX_ptr;
extern DWFP _cdecl GetPlayerStartLocationX_my(HPLAYER arg1);
extern GetPlayerStartLocationY_FUNC GetPlayerStartLocationY_org;
extern GetPlayerStartLocationY_FUNC GetPlayerStartLocationY_ptr;
extern DWFP _cdecl GetPlayerStartLocationY_my(HPLAYER arg1);
extern GetPlayerState_FUNC GetPlayerState_org;
extern GetPlayerState_FUNC GetPlayerState_ptr;
extern int _cdecl GetPlayerState_my(HPLAYER player, HPLAYERSTATE PlayerState);
extern GetPlayerStructureCount_FUNC GetPlayerStructureCount_org;
extern GetPlayerStructureCount_FUNC GetPlayerStructureCount_ptr;
extern int _cdecl GetPlayerStructureCount_my(HPLAYER player, BOOL includeIncomplete);
extern GetPlayerTaxRate_FUNC GetPlayerTaxRate_org;
extern GetPlayerTaxRate_FUNC GetPlayerTaxRate_ptr;
extern int _cdecl GetPlayerTaxRate_my(HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE Resource);
extern GetPlayerTeam_FUNC GetPlayerTeam_org;
extern GetPlayerTeam_FUNC GetPlayerTeam_ptr;
extern int _cdecl GetPlayerTeam_my(HPLAYER player);
extern GetPlayerTechCount_FUNC GetPlayerTechCount_org;
extern GetPlayerTechCount_FUNC GetPlayerTechCount_ptr;
extern int _cdecl GetPlayerTechCount_my(HPLAYER player, int techid, BOOL specificonly);
extern GetPlayerTechMaxAllowed_FUNC GetPlayerTechMaxAllowed_org;
extern GetPlayerTechMaxAllowed_FUNC GetPlayerTechMaxAllowed_ptr;
extern int _cdecl GetPlayerTechMaxAllowed_my(HPLAYER player, int techid);
extern GetPlayerTechResearched_FUNC GetPlayerTechResearched_org;
extern GetPlayerTechResearched_FUNC GetPlayerTechResearched_ptr;
extern BOOL _cdecl GetPlayerTechResearched_my(HPLAYER player, int techid, BOOL specificonly);
extern GetPlayerTypedUnitCount_FUNC GetPlayerTypedUnitCount_org;
extern GetPlayerTypedUnitCount_FUNC GetPlayerTypedUnitCount_ptr;
extern int _cdecl GetPlayerTypedUnitCount_my(HPLAYER player, CJassString unitName, BOOL includeIncomplete, BOOL includeUpgrades);
extern GetPlayerUnitCount_FUNC GetPlayerUnitCount_org;
extern GetPlayerUnitCount_FUNC GetPlayerUnitCount_ptr;
extern int _cdecl GetPlayerUnitCount_my(HPLAYER player, BOOL includeIncomplete);
extern GetPlayerUnitTypeCount_FUNC GetPlayerUnitTypeCount_org;
extern GetPlayerUnitTypeCount_FUNC GetPlayerUnitTypeCount_ptr;
extern int _cdecl GetPlayerUnitTypeCount_my(HPLAYER arg1, int arg2);
extern GetPlayers_FUNC GetPlayers_org;
extern GetPlayers_FUNC GetPlayers_ptr;
extern int _cdecl GetPlayers_my();
extern GetRandomInt_FUNC GetRandomInt_org;
extern GetRandomInt_FUNC GetRandomInt_ptr;
extern int _cdecl GetRandomInt_my(int lowBound, int highBound);
extern GetRandomReal_FUNC GetRandomReal_org;
extern GetRandomReal_FUNC GetRandomReal_ptr;
extern DWFP _cdecl GetRandomReal_my(float *lowBound, float *highBound);
extern GetRectCenterX_FUNC GetRectCenterX_org;
extern GetRectCenterX_FUNC GetRectCenterX_ptr;
extern DWFP _cdecl GetRectCenterX_my(HRECT Rect);
extern GetRectCenterY_FUNC GetRectCenterY_org;
extern GetRectCenterY_FUNC GetRectCenterY_ptr;
extern DWFP _cdecl GetRectCenterY_my(HRECT Rect);
extern GetRectMaxX_FUNC GetRectMaxX_org;
extern GetRectMaxX_FUNC GetRectMaxX_ptr;
extern DWFP _cdecl GetRectMaxX_my(HRECT Rect);
extern GetRectMaxY_FUNC GetRectMaxY_org;
extern GetRectMaxY_FUNC GetRectMaxY_ptr;
extern DWFP _cdecl GetRectMaxY_my(HRECT Rect);
extern GetRectMinX_FUNC GetRectMinX_org;
extern GetRectMinX_FUNC GetRectMinX_ptr;
extern DWFP _cdecl GetRectMinX_my(HRECT Rect);
extern GetRectMinY_FUNC GetRectMinY_org;
extern GetRectMinY_FUNC GetRectMinY_ptr;
extern DWFP _cdecl GetRectMinY_my(HRECT Rect);
extern GetRescuer_FUNC GetRescuer_org;
extern GetRescuer_FUNC GetRescuer_ptr;
extern HUNIT _cdecl GetRescuer_my();
extern GetResearched_FUNC GetResearched_org;
extern GetResearched_FUNC GetResearched_ptr;
extern int _cdecl GetResearched_my();
extern GetResearchingUnit_FUNC GetResearchingUnit_org;
extern GetResearchingUnit_FUNC GetResearchingUnit_ptr;
extern HUNIT _cdecl GetResearchingUnit_my();
extern GetResourceAmount_FUNC GetResourceAmount_org;
extern GetResourceAmount_FUNC GetResourceAmount_ptr;
extern int _cdecl GetResourceAmount_my(HUNIT unit);
extern GetResourceDensity_FUNC GetResourceDensity_org;
extern GetResourceDensity_FUNC GetResourceDensity_ptr;
extern HMAPDENSITY _cdecl GetResourceDensity_my();
extern GetRevivableUnit_FUNC GetRevivableUnit_org;
extern GetRevivableUnit_FUNC GetRevivableUnit_ptr;
extern HUNIT _cdecl GetRevivableUnit_my();
extern GetRevivingUnit_FUNC GetRevivingUnit_org;
extern GetRevivingUnit_FUNC GetRevivingUnit_ptr;
extern HUNIT _cdecl GetRevivingUnit_my();
extern GetSaveBasicFilename_FUNC GetSaveBasicFilename_org;
extern GetSaveBasicFilename_FUNC GetSaveBasicFilename_ptr;
extern CJassStringSID _cdecl GetSaveBasicFilename_my();
extern GetSellingUnit_FUNC GetSellingUnit_org;
extern GetSellingUnit_FUNC GetSellingUnit_ptr;
extern HUNIT _cdecl GetSellingUnit_my();
extern GetSoldItem_FUNC GetSoldItem_org;
extern GetSoldItem_FUNC GetSoldItem_ptr;
extern HITEM _cdecl GetSoldItem_my();
extern GetSoldUnit_FUNC GetSoldUnit_org;
extern GetSoldUnit_FUNC GetSoldUnit_ptr;
extern HUNIT _cdecl GetSoldUnit_my();
extern GetSoundDuration_FUNC GetSoundDuration_org;
extern GetSoundDuration_FUNC GetSoundDuration_ptr;
extern int _cdecl GetSoundDuration_my(HSOUND soundHandle);
extern GetSoundFileDuration_FUNC GetSoundFileDuration_org;
extern GetSoundFileDuration_FUNC GetSoundFileDuration_ptr;
extern int _cdecl GetSoundFileDuration_my(CJassString musicFileName);
extern GetSoundIsLoading_FUNC GetSoundIsLoading_org;
extern GetSoundIsLoading_FUNC GetSoundIsLoading_ptr;
extern BOOL _cdecl GetSoundIsLoading_my(HSOUND soundHandle);
extern GetSoundIsPlaying_FUNC GetSoundIsPlaying_org;
extern GetSoundIsPlaying_FUNC GetSoundIsPlaying_ptr;
extern BOOL _cdecl GetSoundIsPlaying_my(HSOUND soundHandle);
extern GetSpellAbility_FUNC GetSpellAbility_org;
extern GetSpellAbility_FUNC GetSpellAbility_ptr;
extern HABILITY _cdecl GetSpellAbility_my();
extern GetSpellAbilityId_FUNC GetSpellAbilityId_org;
extern GetSpellAbilityId_FUNC GetSpellAbilityId_ptr;
extern int _cdecl GetSpellAbilityId_my();
extern GetSpellAbilityUnit_FUNC GetSpellAbilityUnit_org;
extern GetSpellAbilityUnit_FUNC GetSpellAbilityUnit_ptr;
extern HUNIT _cdecl GetSpellAbilityUnit_my();
extern GetSpellTargetDestructable_FUNC GetSpellTargetDestructable_org;
extern GetSpellTargetDestructable_FUNC GetSpellTargetDestructable_ptr;
extern HDESTRUCTABLE _cdecl GetSpellTargetDestructable_my();
extern GetSpellTargetItem_FUNC GetSpellTargetItem_org;
extern GetSpellTargetItem_FUNC GetSpellTargetItem_ptr;
extern HITEM _cdecl GetSpellTargetItem_my();
extern GetSpellTargetLoc_FUNC GetSpellTargetLoc_org;
extern GetSpellTargetLoc_FUNC GetSpellTargetLoc_ptr;
extern HLOCATION _cdecl GetSpellTargetLoc_my();
extern GetSpellTargetUnit_FUNC GetSpellTargetUnit_org;
extern GetSpellTargetUnit_FUNC GetSpellTargetUnit_ptr;
extern HUNIT _cdecl GetSpellTargetUnit_my();
extern GetSpellTargetX_FUNC GetSpellTargetX_org;
extern GetSpellTargetX_FUNC GetSpellTargetX_ptr;
extern DWFP _cdecl GetSpellTargetX_my();
extern GetSpellTargetY_FUNC GetSpellTargetY_org;
extern GetSpellTargetY_FUNC GetSpellTargetY_ptr;
extern DWFP _cdecl GetSpellTargetY_my();
extern GetStartLocPrio_FUNC GetStartLocPrio_org;
extern GetStartLocPrio_FUNC GetStartLocPrio_ptr;
extern HSTARTLOCPRIO _cdecl GetStartLocPrio_my(int StartLoc, int prioSlotIndex);
extern GetStartLocPrioSlot_FUNC GetStartLocPrioSlot_org;
extern GetStartLocPrioSlot_FUNC GetStartLocPrioSlot_ptr;
extern int _cdecl GetStartLocPrioSlot_my(int StartLoc, int prioSlotIndex);
extern GetStartLocationLoc_FUNC GetStartLocationLoc_org;
extern GetStartLocationLoc_FUNC GetStartLocationLoc_ptr;
extern HLOCATION _cdecl GetStartLocationLoc_my(int StartLocation);
extern GetStartLocationX_FUNC GetStartLocationX_org;
extern GetStartLocationX_FUNC GetStartLocationX_ptr;
extern DWFP _cdecl GetStartLocationX_my(int StartLocation);
extern GetStartLocationY_FUNC GetStartLocationY_org;
extern GetStartLocationY_FUNC GetStartLocationY_ptr;
extern DWFP _cdecl GetStartLocationY_my(int StartLocation);
extern GetStoredBoolean_FUNC GetStoredBoolean_org;
extern GetStoredBoolean_FUNC GetStoredBoolean_ptr;
extern BOOL _cdecl GetStoredBoolean_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern GetStoredInteger_FUNC GetStoredInteger_org;
extern GetStoredInteger_FUNC GetStoredInteger_ptr;
extern int _cdecl GetStoredInteger_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern GetStoredReal_FUNC GetStoredReal_org;
extern GetStoredReal_FUNC GetStoredReal_ptr;
extern DWFP _cdecl GetStoredReal_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern GetStoredString_FUNC GetStoredString_org;
extern GetStoredString_FUNC GetStoredString_ptr;
extern CJassStringSID _cdecl GetStoredString_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern GetSummonedUnit_FUNC GetSummonedUnit_org;
extern GetSummonedUnit_FUNC GetSummonedUnit_ptr;
extern HUNIT _cdecl GetSummonedUnit_my();
extern GetSummoningUnit_FUNC GetSummoningUnit_org;
extern GetSummoningUnit_FUNC GetSummoningUnit_ptr;
extern HUNIT _cdecl GetSummoningUnit_my();
extern GetTeams_FUNC GetTeams_org;
extern GetTeams_FUNC GetTeams_ptr;
extern int _cdecl GetTeams_my();
extern GetTerrainCliffLevel_FUNC GetTerrainCliffLevel_org;
extern GetTerrainCliffLevel_FUNC GetTerrainCliffLevel_ptr;
extern int _cdecl GetTerrainCliffLevel_my(float *x, float *y);
extern GetTerrainType_FUNC GetTerrainType_org;
extern GetTerrainType_FUNC GetTerrainType_ptr;
extern int _cdecl GetTerrainType_my(float *x, float *y);
extern GetTerrainVariance_FUNC GetTerrainVariance_org;
extern GetTerrainVariance_FUNC GetTerrainVariance_ptr;
extern int _cdecl GetTerrainVariance_my(float *x, float *y);
extern GetTimeOfDayScale_FUNC GetTimeOfDayScale_org;
extern GetTimeOfDayScale_FUNC GetTimeOfDayScale_ptr;
extern DWFP _cdecl GetTimeOfDayScale_my();
extern GetTournamentFinishNowPlayer_FUNC GetTournamentFinishNowPlayer_org;
extern GetTournamentFinishNowPlayer_FUNC GetTournamentFinishNowPlayer_ptr;
extern HPLAYER _cdecl GetTournamentFinishNowPlayer_my();
extern GetTournamentFinishNowRule_FUNC GetTournamentFinishNowRule_org;
extern GetTournamentFinishNowRule_FUNC GetTournamentFinishNowRule_ptr;
extern int _cdecl GetTournamentFinishNowRule_my();
extern GetTournamentFinishSoonTimeRemaining_FUNC GetTournamentFinishSoonTimeRemaining_org;
extern GetTournamentFinishSoonTimeRemaining_FUNC GetTournamentFinishSoonTimeRemaining_ptr;
extern DWFP _cdecl GetTournamentFinishSoonTimeRemaining_my();
extern GetTournamentScore_FUNC GetTournamentScore_org;
extern GetTournamentScore_FUNC GetTournamentScore_ptr;
extern int _cdecl GetTournamentScore_my(HPLAYER player);
extern GetTownUnitCount_FUNC GetTownUnitCount_org;
extern GetTownUnitCount_FUNC GetTownUnitCount_ptr;
extern int _cdecl GetTownUnitCount_my(int arg1, int arg2, BOOL arg3);
extern GetTrainedUnit_FUNC GetTrainedUnit_org;
extern GetTrainedUnit_FUNC GetTrainedUnit_ptr;
extern HUNIT _cdecl GetTrainedUnit_my();
extern GetTrainedUnitType_FUNC GetTrainedUnitType_org;
extern GetTrainedUnitType_FUNC GetTrainedUnitType_ptr;
extern int _cdecl GetTrainedUnitType_my();
extern GetTransportUnit_FUNC GetTransportUnit_org;
extern GetTransportUnit_FUNC GetTransportUnit_ptr;
extern HUNIT _cdecl GetTransportUnit_my();
extern GetTriggerDestructable_FUNC GetTriggerDestructable_org;
extern GetTriggerDestructable_FUNC GetTriggerDestructable_ptr;
extern HDESTRUCTABLE _cdecl GetTriggerDestructable_my();
extern GetTriggerEvalCount_FUNC GetTriggerEvalCount_org;
extern GetTriggerEvalCount_FUNC GetTriggerEvalCount_ptr;
extern int _cdecl GetTriggerEvalCount_my(HTRIGGER Trigger);
extern GetTriggerEventId_FUNC GetTriggerEventId_org;
extern GetTriggerEventId_FUNC GetTriggerEventId_ptr;
extern HEVENTID _cdecl GetTriggerEventId_my();
extern GetTriggerExecCount_FUNC GetTriggerExecCount_org;
extern GetTriggerExecCount_FUNC GetTriggerExecCount_ptr;
extern int _cdecl GetTriggerExecCount_my(HTRIGGER Trigger);
extern GetTriggerPlayer_FUNC GetTriggerPlayer_org;
extern GetTriggerPlayer_FUNC GetTriggerPlayer_ptr;
extern HPLAYER _cdecl GetTriggerPlayer_my();
extern GetTriggerUnit_FUNC GetTriggerUnit_org;
extern GetTriggerUnit_FUNC GetTriggerUnit_ptr;
extern HUNIT _cdecl GetTriggerUnit_my();
extern GetTriggerWidget_FUNC GetTriggerWidget_org;
extern GetTriggerWidget_FUNC GetTriggerWidget_ptr;
extern HWIDGET _cdecl GetTriggerWidget_my();
extern GetTriggeringRegion_FUNC GetTriggeringRegion_org;
extern GetTriggeringRegion_FUNC GetTriggeringRegion_ptr;
extern HREGION _cdecl GetTriggeringRegion_my();
extern GetTriggeringTrackable_FUNC GetTriggeringTrackable_org;
extern GetTriggeringTrackable_FUNC GetTriggeringTrackable_ptr;
extern HTRACKABLE _cdecl GetTriggeringTrackable_my();
extern GetTriggeringTrigger_FUNC GetTriggeringTrigger_org;
extern GetTriggeringTrigger_FUNC GetTriggeringTrigger_ptr;
extern HTRIGGER _cdecl GetTriggeringTrigger_my();
extern GetUnitAbilityLevel_FUNC GetUnitAbilityLevel_org;
extern GetUnitAbilityLevel_FUNC GetUnitAbilityLevel_ptr;
extern int _cdecl GetUnitAbilityLevel_my(HUNIT unit, int abilcode);
extern GetUnitAcquireRange_FUNC GetUnitAcquireRange_org;
extern GetUnitAcquireRange_FUNC GetUnitAcquireRange_ptr;
extern DWFP _cdecl GetUnitAcquireRange_my(HUNIT unit);
extern GetUnitBuildTime_FUNC GetUnitBuildTime_org;
extern GetUnitBuildTime_FUNC GetUnitBuildTime_ptr;
extern int _cdecl GetUnitBuildTime_my(int arg1);
extern GetUnitCount_FUNC GetUnitCount_org;
extern GetUnitCount_FUNC GetUnitCount_ptr;
extern int _cdecl GetUnitCount_my(int arg1);
extern GetUnitCountDone_FUNC GetUnitCountDone_org;
extern GetUnitCountDone_FUNC GetUnitCountDone_ptr;
extern int _cdecl GetUnitCountDone_my(int arg1);
extern GetUnitCurrentOrder_FUNC GetUnitCurrentOrder_org;
extern GetUnitCurrentOrder_FUNC GetUnitCurrentOrder_ptr;
extern int _cdecl GetUnitCurrentOrder_my(HUNIT unit);
extern GetUnitDefaultAcquireRange_FUNC GetUnitDefaultAcquireRange_org;
extern GetUnitDefaultAcquireRange_FUNC GetUnitDefaultAcquireRange_ptr;
extern DWFP _cdecl GetUnitDefaultAcquireRange_my(HUNIT unit);
extern GetUnitDefaultFlyHeight_FUNC GetUnitDefaultFlyHeight_org;
extern GetUnitDefaultFlyHeight_FUNC GetUnitDefaultFlyHeight_ptr;
extern DWFP _cdecl GetUnitDefaultFlyHeight_my(HUNIT unit);
extern GetUnitDefaultMoveSpeed_FUNC GetUnitDefaultMoveSpeed_org;
extern GetUnitDefaultMoveSpeed_FUNC GetUnitDefaultMoveSpeed_ptr;
extern DWFP _cdecl GetUnitDefaultMoveSpeed_my(HUNIT unit);
extern GetUnitDefaultPropWindow_FUNC GetUnitDefaultPropWindow_org;
extern GetUnitDefaultPropWindow_FUNC GetUnitDefaultPropWindow_ptr;
extern DWFP _cdecl GetUnitDefaultPropWindow_my(HUNIT unit);
extern GetUnitDefaultTurnSpeed_FUNC GetUnitDefaultTurnSpeed_org;
extern GetUnitDefaultTurnSpeed_FUNC GetUnitDefaultTurnSpeed_ptr;
extern DWFP _cdecl GetUnitDefaultTurnSpeed_my(HUNIT unit);
extern GetUnitFacing_FUNC GetUnitFacing_org;
extern GetUnitFacing_FUNC GetUnitFacing_ptr;
extern DWFP _cdecl GetUnitFacing_my(HUNIT unit);
extern GetUnitFlyHeight_FUNC GetUnitFlyHeight_org;
extern GetUnitFlyHeight_FUNC GetUnitFlyHeight_ptr;
extern DWFP _cdecl GetUnitFlyHeight_my(HUNIT unit);
extern GetUnitFoodMade_FUNC GetUnitFoodMade_org;
extern GetUnitFoodMade_FUNC GetUnitFoodMade_ptr;
extern int _cdecl GetUnitFoodMade_my(HUNIT unit);
extern GetUnitFoodUsed_FUNC GetUnitFoodUsed_org;
extern GetUnitFoodUsed_FUNC GetUnitFoodUsed_ptr;
extern int _cdecl GetUnitFoodUsed_my(HUNIT unit);
extern GetUnitGoldCost_FUNC GetUnitGoldCost_org;
extern GetUnitGoldCost_FUNC GetUnitGoldCost_ptr;
extern int _cdecl GetUnitGoldCost_my(int arg1);
extern GetUnitLevel_FUNC GetUnitLevel_org;
extern GetUnitLevel_FUNC GetUnitLevel_ptr;
extern int _cdecl GetUnitLevel_my(HUNIT unit);
extern GetUnitLoc_FUNC GetUnitLoc_org;
extern GetUnitLoc_FUNC GetUnitLoc_ptr;
extern HLOCATION _cdecl GetUnitLoc_my(HUNIT unit);
extern GetUnitMoveSpeed_FUNC GetUnitMoveSpeed_org;
extern GetUnitMoveSpeed_FUNC GetUnitMoveSpeed_ptr;
extern DWFP _cdecl GetUnitMoveSpeed_my(HUNIT unit);
extern GetUnitName_FUNC GetUnitName_org;
extern GetUnitName_FUNC GetUnitName_ptr;
extern CJassStringSID _cdecl GetUnitName_my(HUNIT unit);
extern GetUnitPointValue_FUNC GetUnitPointValue_org;
extern GetUnitPointValue_FUNC GetUnitPointValue_ptr;
extern int _cdecl GetUnitPointValue_my(HUNIT unit);
extern GetUnitPointValueByType_FUNC GetUnitPointValueByType_org;
extern GetUnitPointValueByType_FUNC GetUnitPointValueByType_ptr;
extern int _cdecl GetUnitPointValueByType_my(int unitType);
extern GetUnitPropWindow_FUNC GetUnitPropWindow_org;
extern GetUnitPropWindow_FUNC GetUnitPropWindow_ptr;
extern DWFP _cdecl GetUnitPropWindow_my(HUNIT unit);
extern GetUnitRace_FUNC GetUnitRace_org;
extern GetUnitRace_FUNC GetUnitRace_ptr;
extern HRACE _cdecl GetUnitRace_my(HUNIT unit);
extern GetUnitRallyDestructable_FUNC GetUnitRallyDestructable_org;
extern GetUnitRallyDestructable_FUNC GetUnitRallyDestructable_ptr;
extern HDESTRUCTABLE _cdecl GetUnitRallyDestructable_my(HUNIT unit);
extern GetUnitRallyPoint_FUNC GetUnitRallyPoint_org;
extern GetUnitRallyPoint_FUNC GetUnitRallyPoint_ptr;
extern HLOCATION _cdecl GetUnitRallyPoint_my(HUNIT unit);
extern GetUnitRallyUnit_FUNC GetUnitRallyUnit_org;
extern GetUnitRallyUnit_FUNC GetUnitRallyUnit_ptr;
extern HUNIT _cdecl GetUnitRallyUnit_my(HUNIT unit);
extern GetUnitState_FUNC GetUnitState_org;
extern GetUnitState_FUNC GetUnitState_ptr;
extern DWFP _cdecl GetUnitState_my(HUNIT unit, HUNITSTATE UnitState);
extern GetUnitTurnSpeed_FUNC GetUnitTurnSpeed_org;
extern GetUnitTurnSpeed_FUNC GetUnitTurnSpeed_ptr;
extern DWFP _cdecl GetUnitTurnSpeed_my(HUNIT unit);
extern GetUnitTypeId_FUNC GetUnitTypeId_org;
extern GetUnitTypeId_FUNC GetUnitTypeId_ptr;
extern int _cdecl GetUnitTypeId_my(HUNIT unit);
extern GetUnitUserData_FUNC GetUnitUserData_org;
extern GetUnitUserData_FUNC GetUnitUserData_ptr;
extern int _cdecl GetUnitUserData_my(HUNIT unit);
extern GetUnitWoodCost_FUNC GetUnitWoodCost_org;
extern GetUnitWoodCost_FUNC GetUnitWoodCost_ptr;
extern int _cdecl GetUnitWoodCost_my(int arg1);
extern GetUnitX_FUNC GetUnitX_org;
extern GetUnitX_FUNC GetUnitX_ptr;
extern DWFP _cdecl GetUnitX_my(HUNIT unit);
extern GetUnitY_FUNC GetUnitY_org;
extern GetUnitY_FUNC GetUnitY_ptr;
extern DWFP _cdecl GetUnitY_my(HUNIT unit);
extern GetUpgradeGoldCost_FUNC GetUpgradeGoldCost_org;
extern GetUpgradeGoldCost_FUNC GetUpgradeGoldCost_ptr;
extern int _cdecl GetUpgradeGoldCost_my(int arg1);
extern GetUpgradeLevel_FUNC GetUpgradeLevel_org;
extern GetUpgradeLevel_FUNC GetUpgradeLevel_ptr;
extern int _cdecl GetUpgradeLevel_my(int arg1);
extern GetUpgradeWoodCost_FUNC GetUpgradeWoodCost_org;
extern GetUpgradeWoodCost_FUNC GetUpgradeWoodCost_ptr;
extern int _cdecl GetUpgradeWoodCost_my(int arg1);
extern GetWidgetLife_FUNC GetWidgetLife_org;
extern GetWidgetLife_FUNC GetWidgetLife_ptr;
extern DWFP _cdecl GetWidgetLife_my(HWIDGET widget);
extern GetWidgetX_FUNC GetWidgetX_org;
extern GetWidgetX_FUNC GetWidgetX_ptr;
extern DWFP _cdecl GetWidgetX_my(HWIDGET widget);
extern GetWidgetY_FUNC GetWidgetY_org;
extern GetWidgetY_FUNC GetWidgetY_ptr;
extern DWFP _cdecl GetWidgetY_my(HWIDGET widget);
extern GetWinningPlayer_FUNC GetWinningPlayer_org;
extern GetWinningPlayer_FUNC GetWinningPlayer_ptr;
extern HPLAYER _cdecl GetWinningPlayer_my();
extern GetWorldBounds_FUNC GetWorldBounds_org;
extern GetWorldBounds_FUNC GetWorldBounds_ptr;
extern HRECT _cdecl GetWorldBounds_my();
extern GroupAddUnit_FUNC GroupAddUnit_org;
extern GroupAddUnit_FUNC GroupAddUnit_ptr;
extern void _cdecl GroupAddUnit_my(HGROUP Group, HUNIT unit);
extern GroupClear_FUNC GroupClear_org;
extern GroupClear_FUNC GroupClear_ptr;
extern void _cdecl GroupClear_my(HGROUP Group);
extern GroupEnumUnitsInRange_FUNC GroupEnumUnitsInRange_org;
extern GroupEnumUnitsInRange_FUNC GroupEnumUnitsInRange_ptr;
extern void _cdecl GroupEnumUnitsInRange_my(HGROUP Group, float *x, float *y, float *radius, HBOOLEXPR filter);
extern GroupEnumUnitsInRangeCounted_FUNC GroupEnumUnitsInRangeCounted_org;
extern GroupEnumUnitsInRangeCounted_FUNC GroupEnumUnitsInRangeCounted_ptr;
extern void _cdecl GroupEnumUnitsInRangeCounted_my(HGROUP Group, float *x, float *y, float *radius, HBOOLEXPR filter, int countLimit);
extern GroupEnumUnitsInRangeOfLoc_FUNC GroupEnumUnitsInRangeOfLoc_org;
extern GroupEnumUnitsInRangeOfLoc_FUNC GroupEnumUnitsInRangeOfLoc_ptr;
extern void _cdecl GroupEnumUnitsInRangeOfLoc_my(HGROUP Group, HLOCATION Location, float *radius, HBOOLEXPR filter);
extern GroupEnumUnitsInRangeOfLocCounted_FUNC GroupEnumUnitsInRangeOfLocCounted_org;
extern GroupEnumUnitsInRangeOfLocCounted_FUNC GroupEnumUnitsInRangeOfLocCounted_ptr;
extern void _cdecl GroupEnumUnitsInRangeOfLocCounted_my(HGROUP Group, HLOCATION Location, float *radius, HBOOLEXPR filter, int countLimit);
extern GroupEnumUnitsInRect_FUNC GroupEnumUnitsInRect_org;
extern GroupEnumUnitsInRect_FUNC GroupEnumUnitsInRect_ptr;
extern void _cdecl GroupEnumUnitsInRect_my(HGROUP Group, HRECT r, HBOOLEXPR filter);
extern GroupEnumUnitsInRectCounted_FUNC GroupEnumUnitsInRectCounted_org;
extern GroupEnumUnitsInRectCounted_FUNC GroupEnumUnitsInRectCounted_ptr;
extern void _cdecl GroupEnumUnitsInRectCounted_my(HGROUP Group, HRECT r, HBOOLEXPR filter, int countLimit);
extern GroupEnumUnitsOfPlayer_FUNC GroupEnumUnitsOfPlayer_org;
extern GroupEnumUnitsOfPlayer_FUNC GroupEnumUnitsOfPlayer_ptr;
extern void _cdecl GroupEnumUnitsOfPlayer_my(HGROUP Group, HPLAYER player, HBOOLEXPR filter);
extern GroupEnumUnitsOfType_FUNC GroupEnumUnitsOfType_org;
extern GroupEnumUnitsOfType_FUNC GroupEnumUnitsOfType_ptr;
extern void _cdecl GroupEnumUnitsOfType_my(HGROUP Group, CJassString unitname, HBOOLEXPR filter);
extern GroupEnumUnitsOfTypeCounted_FUNC GroupEnumUnitsOfTypeCounted_org;
extern GroupEnumUnitsOfTypeCounted_FUNC GroupEnumUnitsOfTypeCounted_ptr;
extern void _cdecl GroupEnumUnitsOfTypeCounted_my(HGROUP Group, CJassString unitname, HBOOLEXPR filter, int countLimit);
extern GroupEnumUnitsSelected_FUNC GroupEnumUnitsSelected_org;
extern GroupEnumUnitsSelected_FUNC GroupEnumUnitsSelected_ptr;
extern void _cdecl GroupEnumUnitsSelected_my(HGROUP Group, HPLAYER player, HBOOLEXPR filter);
extern GroupImmediateOrder_FUNC GroupImmediateOrder_org;
extern GroupImmediateOrder_FUNC GroupImmediateOrder_ptr;
extern BOOL _cdecl GroupImmediateOrder_my(HGROUP Group, CJassString order);
extern GroupImmediateOrderById_FUNC GroupImmediateOrderById_org;
extern GroupImmediateOrderById_FUNC GroupImmediateOrderById_ptr;
extern BOOL _cdecl GroupImmediateOrderById_my(HGROUP Group, int order);
extern GroupPointOrder_FUNC GroupPointOrder_org;
extern GroupPointOrder_FUNC GroupPointOrder_ptr;
extern BOOL _cdecl GroupPointOrder_my(HGROUP Group, CJassString order, float *x, float *y);
extern GroupPointOrderById_FUNC GroupPointOrderById_org;
extern GroupPointOrderById_FUNC GroupPointOrderById_ptr;
extern BOOL _cdecl GroupPointOrderById_my(HGROUP Group, int order, float *x, float *y);
extern GroupPointOrderByIdLoc_FUNC GroupPointOrderByIdLoc_org;
extern GroupPointOrderByIdLoc_FUNC GroupPointOrderByIdLoc_ptr;
extern BOOL _cdecl GroupPointOrderByIdLoc_my(HGROUP Group, int order, HLOCATION Location);
extern GroupPointOrderLoc_FUNC GroupPointOrderLoc_org;
extern GroupPointOrderLoc_FUNC GroupPointOrderLoc_ptr;
extern BOOL _cdecl GroupPointOrderLoc_my(HGROUP Group, CJassString order, HLOCATION Location);
extern GroupRemoveUnit_FUNC GroupRemoveUnit_org;
extern GroupRemoveUnit_FUNC GroupRemoveUnit_ptr;
extern void _cdecl GroupRemoveUnit_my(HGROUP Group, HUNIT unit);
extern GroupTargetOrder_FUNC GroupTargetOrder_org;
extern GroupTargetOrder_FUNC GroupTargetOrder_ptr;
extern BOOL _cdecl GroupTargetOrder_my(HGROUP Group, CJassString order, HWIDGET targetWidget);
extern GroupTargetOrderById_FUNC GroupTargetOrderById_org;
extern GroupTargetOrderById_FUNC GroupTargetOrderById_ptr;
extern BOOL _cdecl GroupTargetOrderById_my(HGROUP Group, int order, HWIDGET targetWidget);
extern GroupTimedLife_FUNC GroupTimedLife_org;
extern GroupTimedLife_FUNC GroupTimedLife_ptr;
extern void _cdecl GroupTimedLife_my(BOOL arg1);
extern HarvestGold_FUNC HarvestGold_org;
extern HarvestGold_FUNC HarvestGold_ptr;
extern void _cdecl HarvestGold_my(int arg1, int arg2);
extern HarvestWood_FUNC HarvestWood_org;
extern HarvestWood_FUNC HarvestWood_ptr;
extern void _cdecl HarvestWood_my(int arg1, int arg2);
extern HaveSavedBoolean_FUNC HaveSavedBoolean_org;
extern HaveSavedBoolean_FUNC HaveSavedBoolean_ptr;
extern BOOL _cdecl HaveSavedBoolean_my(HHASHTABLE table, int parentKey, int childKey);
extern HaveSavedHandle_FUNC HaveSavedHandle_org;
extern HaveSavedHandle_FUNC HaveSavedHandle_ptr;
extern BOOL _cdecl HaveSavedHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern HaveSavedInteger_FUNC HaveSavedInteger_org;
extern HaveSavedInteger_FUNC HaveSavedInteger_ptr;
extern BOOL _cdecl HaveSavedInteger_my(HHASHTABLE table, int parentKey, int childKey);
extern HaveSavedReal_FUNC HaveSavedReal_org;
extern HaveSavedReal_FUNC HaveSavedReal_ptr;
extern BOOL _cdecl HaveSavedReal_my(HHASHTABLE table, int parentKey, int childKey);
extern HaveSavedString_FUNC HaveSavedString_org;
extern HaveSavedString_FUNC HaveSavedString_ptr;
extern BOOL _cdecl HaveSavedString_my(HHASHTABLE table, int parentKey, int childKey);
extern HaveStoredBoolean_FUNC HaveStoredBoolean_org;
extern HaveStoredBoolean_FUNC HaveStoredBoolean_ptr;
extern BOOL _cdecl HaveStoredBoolean_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern HaveStoredInteger_FUNC HaveStoredInteger_org;
extern HaveStoredInteger_FUNC HaveStoredInteger_ptr;
extern BOOL _cdecl HaveStoredInteger_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern HaveStoredReal_FUNC HaveStoredReal_org;
extern HaveStoredReal_FUNC HaveStoredReal_ptr;
extern BOOL _cdecl HaveStoredReal_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern HaveStoredString_FUNC HaveStoredString_org;
extern HaveStoredString_FUNC HaveStoredString_ptr;
extern BOOL _cdecl HaveStoredString_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern HaveStoredUnit_FUNC HaveStoredUnit_org;
extern HaveStoredUnit_FUNC HaveStoredUnit_ptr;
extern BOOL _cdecl HaveStoredUnit_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern I2R_FUNC I2R_org;
extern I2R_FUNC I2R_ptr;
extern DWFP _cdecl I2R_my(int i);
extern I2S_FUNC I2S_org;
extern I2S_FUNC I2S_ptr;
extern CJassStringSID _cdecl I2S_my(int i);
extern IgnoredUnits_FUNC IgnoredUnits_org;
extern IgnoredUnits_FUNC IgnoredUnits_ptr;
extern int _cdecl IgnoredUnits_my(int arg1);
extern IncUnitAbilityLevel_FUNC IncUnitAbilityLevel_org;
extern IncUnitAbilityLevel_FUNC IncUnitAbilityLevel_ptr;
extern int _cdecl IncUnitAbilityLevel_my(HUNIT unit, int abilcode);
extern InitAssault_FUNC InitAssault_org;
extern InitAssault_FUNC InitAssault_ptr;
extern void _cdecl InitAssault_my();
extern InitGameCache_FUNC InitGameCache_org;
extern InitGameCache_FUNC InitGameCache_ptr;
extern HGAMECACHE _cdecl InitGameCache_my(CJassString campaignFile);
extern InitHashtable_FUNC InitHashtable_org;
extern InitHashtable_FUNC InitHashtable_ptr;
extern HHASHTABLE _cdecl InitHashtable_my();
extern IsCineFilterDisplayed_FUNC IsCineFilterDisplayed_org;
extern IsCineFilterDisplayed_FUNC IsCineFilterDisplayed_ptr;
extern BOOL _cdecl IsCineFilterDisplayed_my();
extern IsDestructableInvulnerable_FUNC IsDestructableInvulnerable_org;
extern IsDestructableInvulnerable_FUNC IsDestructableInvulnerable_ptr;
extern BOOL _cdecl IsDestructableInvulnerable_my(HDESTRUCTABLE d);
extern IsFogEnabled_FUNC IsFogEnabled_org;
extern IsFogEnabled_FUNC IsFogEnabled_ptr;
extern BOOL _cdecl IsFogEnabled_my();
extern IsFogMaskEnabled_FUNC IsFogMaskEnabled_org;
extern IsFogMaskEnabled_FUNC IsFogMaskEnabled_ptr;
extern BOOL _cdecl IsFogMaskEnabled_my();
extern IsFoggedToPlayer_FUNC IsFoggedToPlayer_org;
extern IsFoggedToPlayer_FUNC IsFoggedToPlayer_ptr;
extern BOOL _cdecl IsFoggedToPlayer_my(float *x, float *y, HPLAYER player);
extern IsGameTypeSupported_FUNC IsGameTypeSupported_org;
extern IsGameTypeSupported_FUNC IsGameTypeSupported_ptr;
extern BOOL _cdecl IsGameTypeSupported_my(HGAMETYPE GameType);
extern IsHeroUnitId_FUNC IsHeroUnitId_org;
extern IsHeroUnitId_FUNC IsHeroUnitId_ptr;
extern BOOL _cdecl IsHeroUnitId_my(int unitId);
extern IsItemIdPawnable_FUNC IsItemIdPawnable_org;
extern IsItemIdPawnable_FUNC IsItemIdPawnable_ptr;
extern BOOL _cdecl IsItemIdPawnable_my(int itemId);
extern IsItemIdPowerup_FUNC IsItemIdPowerup_org;
extern IsItemIdPowerup_FUNC IsItemIdPowerup_ptr;
extern BOOL _cdecl IsItemIdPowerup_my(int itemId);
extern IsItemIdSellable_FUNC IsItemIdSellable_org;
extern IsItemIdSellable_FUNC IsItemIdSellable_ptr;
extern BOOL _cdecl IsItemIdSellable_my(int itemId);
extern IsItemInvulnerable_FUNC IsItemInvulnerable_org;
extern IsItemInvulnerable_FUNC IsItemInvulnerable_ptr;
extern BOOL _cdecl IsItemInvulnerable_my(HITEM item);
extern IsItemOwned_FUNC IsItemOwned_org;
extern IsItemOwned_FUNC IsItemOwned_ptr;
extern BOOL _cdecl IsItemOwned_my(HITEM item);
extern IsItemPawnable_FUNC IsItemPawnable_org;
extern IsItemPawnable_FUNC IsItemPawnable_ptr;
extern BOOL _cdecl IsItemPawnable_my(HITEM item);
extern IsItemPowerup_FUNC IsItemPowerup_org;
extern IsItemPowerup_FUNC IsItemPowerup_ptr;
extern BOOL _cdecl IsItemPowerup_my(HITEM item);
extern IsItemSellable_FUNC IsItemSellable_org;
extern IsItemSellable_FUNC IsItemSellable_ptr;
extern BOOL _cdecl IsItemSellable_my(HITEM item);
extern IsItemVisible_FUNC IsItemVisible_org;
extern IsItemVisible_FUNC IsItemVisible_ptr;
extern BOOL _cdecl IsItemVisible_my(HITEM item);
extern IsLeaderboardDisplayed_FUNC IsLeaderboardDisplayed_org;
extern IsLeaderboardDisplayed_FUNC IsLeaderboardDisplayed_ptr;
extern BOOL _cdecl IsLeaderboardDisplayed_my(HLEADERBOARD lb);
extern IsLocationFoggedToPlayer_FUNC IsLocationFoggedToPlayer_org;
extern IsLocationFoggedToPlayer_FUNC IsLocationFoggedToPlayer_ptr;
extern BOOL _cdecl IsLocationFoggedToPlayer_my(HLOCATION Location, HPLAYER player);
extern IsLocationInRegion_FUNC IsLocationInRegion_org;
extern IsLocationInRegion_FUNC IsLocationInRegion_ptr;
extern BOOL _cdecl IsLocationInRegion_my(HREGION Region, HLOCATION Location);
extern IsLocationMaskedToPlayer_FUNC IsLocationMaskedToPlayer_org;
extern IsLocationMaskedToPlayer_FUNC IsLocationMaskedToPlayer_ptr;
extern BOOL _cdecl IsLocationMaskedToPlayer_my(HLOCATION Location, HPLAYER player);
extern IsLocationVisibleToPlayer_FUNC IsLocationVisibleToPlayer_org;
extern IsLocationVisibleToPlayer_FUNC IsLocationVisibleToPlayer_ptr;
extern BOOL _cdecl IsLocationVisibleToPlayer_my(HLOCATION Location, HPLAYER player);
extern IsMapFlagSet_FUNC IsMapFlagSet_org;
extern IsMapFlagSet_FUNC IsMapFlagSet_ptr;
extern BOOL _cdecl IsMapFlagSet_my(HMAPFLAG MapFlag);
extern IsMaskedToPlayer_FUNC IsMaskedToPlayer_org;
extern IsMaskedToPlayer_FUNC IsMaskedToPlayer_ptr;
extern BOOL _cdecl IsMaskedToPlayer_my(float *x, float *y, HPLAYER player);
extern IsMultiboardDisplayed_FUNC IsMultiboardDisplayed_org;
extern IsMultiboardDisplayed_FUNC IsMultiboardDisplayed_ptr;
extern BOOL _cdecl IsMultiboardDisplayed_my(HMULTIBOARD lb);
extern IsMultiboardMinimized_FUNC IsMultiboardMinimized_org;
extern IsMultiboardMinimized_FUNC IsMultiboardMinimized_ptr;
extern BOOL _cdecl IsMultiboardMinimized_my(HMULTIBOARD lb);
extern IsNoDefeatCheat_FUNC IsNoDefeatCheat_org;
extern IsNoDefeatCheat_FUNC IsNoDefeatCheat_ptr;
extern BOOL _cdecl IsNoDefeatCheat_my();
extern IsNoVictoryCheat_FUNC IsNoVictoryCheat_org;
extern IsNoVictoryCheat_FUNC IsNoVictoryCheat_ptr;
extern BOOL _cdecl IsNoVictoryCheat_my();
extern IsPlayerAlly_FUNC IsPlayerAlly_org;
extern IsPlayerAlly_FUNC IsPlayerAlly_ptr;
extern BOOL _cdecl IsPlayerAlly_my(HPLAYER player, HPLAYER otherPlayer);
extern IsPlayerEnemy_FUNC IsPlayerEnemy_org;
extern IsPlayerEnemy_FUNC IsPlayerEnemy_ptr;
extern BOOL _cdecl IsPlayerEnemy_my(HPLAYER player, HPLAYER otherPlayer);
extern IsPlayerInForce_FUNC IsPlayerInForce_org;
extern IsPlayerInForce_FUNC IsPlayerInForce_ptr;
extern BOOL _cdecl IsPlayerInForce_my(HPLAYER player, HFORCE Force);
extern IsPlayerObserver_FUNC IsPlayerObserver_org;
extern IsPlayerObserver_FUNC IsPlayerObserver_ptr;
extern BOOL _cdecl IsPlayerObserver_my(HPLAYER player);
extern IsPlayerRacePrefSet_FUNC IsPlayerRacePrefSet_org;
extern IsPlayerRacePrefSet_FUNC IsPlayerRacePrefSet_ptr;
extern BOOL _cdecl IsPlayerRacePrefSet_my(HPLAYER player, HRACEPREFERENCE pref);
extern IsPointBlighted_FUNC IsPointBlighted_org;
extern IsPointBlighted_FUNC IsPointBlighted_ptr;
extern BOOL _cdecl IsPointBlighted_my(float *x, float *y);
extern IsPointInRegion_FUNC IsPointInRegion_org;
extern IsPointInRegion_FUNC IsPointInRegion_ptr;
extern BOOL _cdecl IsPointInRegion_my(HREGION Region, float *x, float *y);
extern IsQuestCompleted_FUNC IsQuestCompleted_org;
extern IsQuestCompleted_FUNC IsQuestCompleted_ptr;
extern BOOL _cdecl IsQuestCompleted_my(HQUEST Quest);
extern IsQuestDiscovered_FUNC IsQuestDiscovered_org;
extern IsQuestDiscovered_FUNC IsQuestDiscovered_ptr;
extern BOOL _cdecl IsQuestDiscovered_my(HQUEST Quest);
extern IsQuestEnabled_FUNC IsQuestEnabled_org;
extern IsQuestEnabled_FUNC IsQuestEnabled_ptr;
extern BOOL _cdecl IsQuestEnabled_my(HQUEST Quest);
extern IsQuestFailed_FUNC IsQuestFailed_org;
extern IsQuestFailed_FUNC IsQuestFailed_ptr;
extern BOOL _cdecl IsQuestFailed_my(HQUEST Quest);
extern IsQuestItemCompleted_FUNC IsQuestItemCompleted_org;
extern IsQuestItemCompleted_FUNC IsQuestItemCompleted_ptr;
extern BOOL _cdecl IsQuestItemCompleted_my(HQUESTITEM QuestItem);
extern IsQuestRequired_FUNC IsQuestRequired_org;
extern IsQuestRequired_FUNC IsQuestRequired_ptr;
extern BOOL _cdecl IsQuestRequired_my(HQUEST Quest);
extern IsSuspendedXP_FUNC IsSuspendedXP_org;
extern IsSuspendedXP_FUNC IsSuspendedXP_ptr;
extern BOOL _cdecl IsSuspendedXP_my(HUNIT hero);
extern IsTerrainPathable_FUNC IsTerrainPathable_org;
extern IsTerrainPathable_FUNC IsTerrainPathable_ptr;
extern BOOL _cdecl IsTerrainPathable_my(float *x, float *y, HPATHINGTYPE t);
extern IsTimerDialogDisplayed_FUNC IsTimerDialogDisplayed_org;
extern IsTimerDialogDisplayed_FUNC IsTimerDialogDisplayed_ptr;
extern BOOL _cdecl IsTimerDialogDisplayed_my(HTIMERDIALOG Dialog);
extern IsTowered_FUNC IsTowered_org;
extern IsTowered_FUNC IsTowered_ptr;
extern BOOL _cdecl IsTowered_my(HUNIT arg1);
extern IsTriggerEnabled_FUNC IsTriggerEnabled_org;
extern IsTriggerEnabled_FUNC IsTriggerEnabled_ptr;
extern BOOL _cdecl IsTriggerEnabled_my(HTRIGGER Trigger);
extern IsTriggerWaitOnSleeps_FUNC IsTriggerWaitOnSleeps_org;
extern IsTriggerWaitOnSleeps_FUNC IsTriggerWaitOnSleeps_ptr;
extern BOOL _cdecl IsTriggerWaitOnSleeps_my(HTRIGGER Trigger);
extern IsUnit_FUNC IsUnit_org;
extern IsUnit_FUNC IsUnit_ptr;
extern BOOL _cdecl IsUnit_my(HUNIT unit, HUNIT SpecifiedUnit);
extern IsUnitAlly_FUNC IsUnitAlly_org;
extern IsUnitAlly_FUNC IsUnitAlly_ptr;
extern BOOL _cdecl IsUnitAlly_my(HUNIT unit, HPLAYER player);
extern IsUnitDetected_FUNC IsUnitDetected_org;
extern IsUnitDetected_FUNC IsUnitDetected_ptr;
extern BOOL _cdecl IsUnitDetected_my(HUNIT unit, HPLAYER player);
extern IsUnitEnemy_FUNC IsUnitEnemy_org;
extern IsUnitEnemy_FUNC IsUnitEnemy_ptr;
extern BOOL _cdecl IsUnitEnemy_my(HUNIT unit, HPLAYER player);
extern IsUnitFogged_FUNC IsUnitFogged_org;
extern IsUnitFogged_FUNC IsUnitFogged_ptr;
extern BOOL _cdecl IsUnitFogged_my(HUNIT unit, HPLAYER player);
extern IsUnitHidden_FUNC IsUnitHidden_org;
extern IsUnitHidden_FUNC IsUnitHidden_ptr;
extern BOOL _cdecl IsUnitHidden_my(HUNIT unit);
extern IsUnitIdType_FUNC IsUnitIdType_org;
extern IsUnitIdType_FUNC IsUnitIdType_ptr;
extern BOOL _cdecl IsUnitIdType_my(int unitId, HUNITTYPE UnitType);
extern IsUnitIllusion_FUNC IsUnitIllusion_org;
extern IsUnitIllusion_FUNC IsUnitIllusion_ptr;
extern BOOL _cdecl IsUnitIllusion_my(HUNIT unit);
extern IsUnitInForce_FUNC IsUnitInForce_org;
extern IsUnitInForce_FUNC IsUnitInForce_ptr;
extern BOOL _cdecl IsUnitInForce_my(HUNIT unit, HFORCE Force);
extern IsUnitInGroup_FUNC IsUnitInGroup_org;
extern IsUnitInGroup_FUNC IsUnitInGroup_ptr;
extern BOOL _cdecl IsUnitInGroup_my(HUNIT unit, HGROUP Group);
extern IsUnitInRange_FUNC IsUnitInRange_org;
extern IsUnitInRange_FUNC IsUnitInRange_ptr;
extern BOOL _cdecl IsUnitInRange_my(HUNIT unit, HUNIT otherUnit, float *distance);
extern IsUnitInRangeLoc_FUNC IsUnitInRangeLoc_org;
extern IsUnitInRangeLoc_FUNC IsUnitInRangeLoc_ptr;
extern BOOL _cdecl IsUnitInRangeLoc_my(HUNIT unit, HLOCATION Location, float *distance);
extern IsUnitInRangeXY_FUNC IsUnitInRangeXY_org;
extern IsUnitInRangeXY_FUNC IsUnitInRangeXY_ptr;
extern BOOL _cdecl IsUnitInRangeXY_my(HUNIT unit, float *x, float *y, float *distance);
extern IsUnitInRegion_FUNC IsUnitInRegion_org;
extern IsUnitInRegion_FUNC IsUnitInRegion_ptr;
extern BOOL _cdecl IsUnitInRegion_my(HREGION Region, HUNIT unit);
extern IsUnitInTransport_FUNC IsUnitInTransport_org;
extern IsUnitInTransport_FUNC IsUnitInTransport_ptr;
extern BOOL _cdecl IsUnitInTransport_my(HUNIT unit, HUNIT Transport);
extern IsUnitInvisible_FUNC IsUnitInvisible_org;
extern IsUnitInvisible_FUNC IsUnitInvisible_ptr;
extern BOOL _cdecl IsUnitInvisible_my(HUNIT unit, HPLAYER player);
extern IsUnitLoaded_FUNC IsUnitLoaded_org;
extern IsUnitLoaded_FUNC IsUnitLoaded_ptr;
extern BOOL _cdecl IsUnitLoaded_my(HUNIT unit);
extern IsUnitMasked_FUNC IsUnitMasked_org;
extern IsUnitMasked_FUNC IsUnitMasked_ptr;
extern BOOL _cdecl IsUnitMasked_my(HUNIT unit, HPLAYER player);
extern IsUnitOwnedByPlayer_FUNC IsUnitOwnedByPlayer_org;
extern IsUnitOwnedByPlayer_FUNC IsUnitOwnedByPlayer_ptr;
extern BOOL _cdecl IsUnitOwnedByPlayer_my(HUNIT unit, HPLAYER player);
extern IsUnitPaused_FUNC IsUnitPaused_org;
extern IsUnitPaused_FUNC IsUnitPaused_ptr;
extern BOOL _cdecl IsUnitPaused_my(HUNIT hero);
extern IsUnitRace_FUNC IsUnitRace_org;
extern IsUnitRace_FUNC IsUnitRace_ptr;
extern BOOL _cdecl IsUnitRace_my(HUNIT unit, HRACE Race);
extern IsUnitSelected_FUNC IsUnitSelected_org;
extern IsUnitSelected_FUNC IsUnitSelected_ptr;
extern BOOL _cdecl IsUnitSelected_my(HUNIT unit, HPLAYER player);
extern IsUnitType_FUNC IsUnitType_org;
extern IsUnitType_FUNC IsUnitType_ptr;
extern BOOL _cdecl IsUnitType_my(HUNIT unit, HUNITTYPE UnitType);
extern IsUnitVisible_FUNC IsUnitVisible_org;
extern IsUnitVisible_FUNC IsUnitVisible_ptr;
extern BOOL _cdecl IsUnitVisible_my(HUNIT unit, HPLAYER player);
extern IsVisibleToPlayer_FUNC IsVisibleToPlayer_org;
extern IsVisibleToPlayer_FUNC IsVisibleToPlayer_ptr;
extern BOOL _cdecl IsVisibleToPlayer_my(float *x, float *y, HPLAYER player);
extern IssueBuildOrder_FUNC IssueBuildOrder_org;
extern IssueBuildOrder_FUNC IssueBuildOrder_ptr;
extern BOOL _cdecl IssueBuildOrder_my(HUNIT Peon, CJassString unitToBuild, float *x, float *y);
extern IssueBuildOrderById_FUNC IssueBuildOrderById_org;
extern IssueBuildOrderById_FUNC IssueBuildOrderById_ptr;
extern BOOL _cdecl IssueBuildOrderById_my(HUNIT Peon, int unitId, float *x, float *y);
extern IssueImmediateOrder_FUNC IssueImmediateOrder_org;
extern IssueImmediateOrder_FUNC IssueImmediateOrder_ptr;
extern BOOL _cdecl IssueImmediateOrder_my(HUNIT unit, CJassString order);
extern IssueImmediateOrderById_FUNC IssueImmediateOrderById_org;
extern IssueImmediateOrderById_FUNC IssueImmediateOrderById_ptr;
extern BOOL _cdecl IssueImmediateOrderById_my(HUNIT unit, int order);
extern IssueInstantPointOrder_FUNC IssueInstantPointOrder_org;
extern IssueInstantPointOrder_FUNC IssueInstantPointOrder_ptr;
extern BOOL _cdecl IssueInstantPointOrder_my(HUNIT unit, CJassString order, float *x, float *y, HWIDGET instantTargetWidget);
extern IssueInstantPointOrderById_FUNC IssueInstantPointOrderById_org;
extern IssueInstantPointOrderById_FUNC IssueInstantPointOrderById_ptr;
extern BOOL _cdecl IssueInstantPointOrderById_my(HUNIT unit, int order, float *x, float *y, HWIDGET instantTargetWidget);
extern IssueInstantTargetOrder_FUNC IssueInstantTargetOrder_org;
extern IssueInstantTargetOrder_FUNC IssueInstantTargetOrder_ptr;
extern BOOL _cdecl IssueInstantTargetOrder_my(HUNIT unit, CJassString order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
extern IssueInstantTargetOrderById_FUNC IssueInstantTargetOrderById_org;
extern IssueInstantTargetOrderById_FUNC IssueInstantTargetOrderById_ptr;
extern BOOL _cdecl IssueInstantTargetOrderById_my(HUNIT unit, int order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
extern IssueNeutralImmediateOrder_FUNC IssueNeutralImmediateOrder_org;
extern IssueNeutralImmediateOrder_FUNC IssueNeutralImmediateOrder_ptr;
extern BOOL _cdecl IssueNeutralImmediateOrder_my(HPLAYER forWhichPlayer, HUNIT neutralStructure, CJassString unitToBuild);
extern IssueNeutralImmediateOrderById_FUNC IssueNeutralImmediateOrderById_org;
extern IssueNeutralImmediateOrderById_FUNC IssueNeutralImmediateOrderById_ptr;
extern BOOL _cdecl IssueNeutralImmediateOrderById_my(HPLAYER forWhichPlayer, HUNIT neutralStructure, int unitId);
extern IssueNeutralPointOrder_FUNC IssueNeutralPointOrder_org;
extern IssueNeutralPointOrder_FUNC IssueNeutralPointOrder_ptr;
extern BOOL _cdecl IssueNeutralPointOrder_my(HPLAYER forWhichPlayer, HUNIT neutralStructure, CJassString unitToBuild, float *x, float *y);
extern IssueNeutralPointOrderById_FUNC IssueNeutralPointOrderById_org;
extern IssueNeutralPointOrderById_FUNC IssueNeutralPointOrderById_ptr;
extern BOOL _cdecl IssueNeutralPointOrderById_my(HPLAYER forWhichPlayer, HUNIT neutralStructure, int unitId, float *x, float *y);
extern IssueNeutralTargetOrder_FUNC IssueNeutralTargetOrder_org;
extern IssueNeutralTargetOrder_FUNC IssueNeutralTargetOrder_ptr;
extern BOOL _cdecl IssueNeutralTargetOrder_my(HPLAYER forWhichPlayer, HUNIT neutralStructure, CJassString unitToBuild, HWIDGET target);
extern IssueNeutralTargetOrderById_FUNC IssueNeutralTargetOrderById_org;
extern IssueNeutralTargetOrderById_FUNC IssueNeutralTargetOrderById_ptr;
extern BOOL _cdecl IssueNeutralTargetOrderById_my(HPLAYER forWhichPlayer, HUNIT neutralStructure, int unitId, HWIDGET target);
extern IssuePointOrder_FUNC IssuePointOrder_org;
extern IssuePointOrder_FUNC IssuePointOrder_ptr;
extern BOOL _cdecl IssuePointOrder_my(HUNIT unit, CJassString order, float *x, float *y);
extern IssuePointOrderById_FUNC IssuePointOrderById_org;
extern IssuePointOrderById_FUNC IssuePointOrderById_ptr;
extern BOOL _cdecl IssuePointOrderById_my(HUNIT unit, int order, float *x, float *y);
extern IssuePointOrderByIdLoc_FUNC IssuePointOrderByIdLoc_org;
extern IssuePointOrderByIdLoc_FUNC IssuePointOrderByIdLoc_ptr;
extern BOOL _cdecl IssuePointOrderByIdLoc_my(HUNIT unit, int order, HLOCATION Location);
extern IssuePointOrderLoc_FUNC IssuePointOrderLoc_org;
extern IssuePointOrderLoc_FUNC IssuePointOrderLoc_ptr;
extern BOOL _cdecl IssuePointOrderLoc_my(HUNIT unit, CJassString order, HLOCATION Location);
extern IssueTargetOrder_FUNC IssueTargetOrder_org;
extern IssueTargetOrder_FUNC IssueTargetOrder_ptr;
extern BOOL _cdecl IssueTargetOrder_my(HUNIT unit, CJassString order, HWIDGET targetWidget);
extern IssueTargetOrderById_FUNC IssueTargetOrderById_org;
extern IssueTargetOrderById_FUNC IssueTargetOrderById_ptr;
extern BOOL _cdecl IssueTargetOrderById_my(HUNIT unit, int order, HWIDGET targetWidget);
extern ItemPoolAddItemType_FUNC ItemPoolAddItemType_org;
extern ItemPoolAddItemType_FUNC ItemPoolAddItemType_ptr;
extern void _cdecl ItemPoolAddItemType_my(HITEMPOOL ItemPool, int itemId, float *weight);
extern ItemPoolRemoveItemType_FUNC ItemPoolRemoveItemType_org;
extern ItemPoolRemoveItemType_FUNC ItemPoolRemoveItemType_ptr;
extern void _cdecl ItemPoolRemoveItemType_my(HITEMPOOL ItemPool, int itemId);
extern KillDestructable_FUNC KillDestructable_org;
extern KillDestructable_FUNC KillDestructable_ptr;
extern void _cdecl KillDestructable_my(HDESTRUCTABLE d);
extern KillSoundWhenDone_FUNC KillSoundWhenDone_org;
extern KillSoundWhenDone_FUNC KillSoundWhenDone_ptr;
extern void _cdecl KillSoundWhenDone_my(HSOUND soundHandle);
extern KillUnit_FUNC KillUnit_org;
extern KillUnit_FUNC KillUnit_ptr;
extern void _cdecl KillUnit_my(HUNIT unit);
extern LeaderboardAddItem_FUNC LeaderboardAddItem_org;
extern LeaderboardAddItem_FUNC LeaderboardAddItem_ptr;
extern void _cdecl LeaderboardAddItem_my(HLEADERBOARD lb, CJassString label, int value, HPLAYER p);
extern LeaderboardClear_FUNC LeaderboardClear_org;
extern LeaderboardClear_FUNC LeaderboardClear_ptr;
extern void _cdecl LeaderboardClear_my(HLEADERBOARD lb);
extern LeaderboardDisplay_FUNC LeaderboardDisplay_org;
extern LeaderboardDisplay_FUNC LeaderboardDisplay_ptr;
extern void _cdecl LeaderboardDisplay_my(HLEADERBOARD lb, BOOL show);
extern LeaderboardGetItemCount_FUNC LeaderboardGetItemCount_org;
extern LeaderboardGetItemCount_FUNC LeaderboardGetItemCount_ptr;
extern int _cdecl LeaderboardGetItemCount_my(HLEADERBOARD lb);
extern LeaderboardGetLabelText_FUNC LeaderboardGetLabelText_org;
extern LeaderboardGetLabelText_FUNC LeaderboardGetLabelText_ptr;
extern CJassStringSID _cdecl LeaderboardGetLabelText_my(HLEADERBOARD lb);
extern LeaderboardGetPlayerIndex_FUNC LeaderboardGetPlayerIndex_org;
extern LeaderboardGetPlayerIndex_FUNC LeaderboardGetPlayerIndex_ptr;
extern int _cdecl LeaderboardGetPlayerIndex_my(HLEADERBOARD lb, HPLAYER p);
extern LeaderboardHasPlayerItem_FUNC LeaderboardHasPlayerItem_org;
extern LeaderboardHasPlayerItem_FUNC LeaderboardHasPlayerItem_ptr;
extern BOOL _cdecl LeaderboardHasPlayerItem_my(HLEADERBOARD lb, HPLAYER p);
extern LeaderboardRemoveItem_FUNC LeaderboardRemoveItem_org;
extern LeaderboardRemoveItem_FUNC LeaderboardRemoveItem_ptr;
extern void _cdecl LeaderboardRemoveItem_my(HLEADERBOARD lb, int index);
extern LeaderboardRemovePlayerItem_FUNC LeaderboardRemovePlayerItem_org;
extern LeaderboardRemovePlayerItem_FUNC LeaderboardRemovePlayerItem_ptr;
extern void _cdecl LeaderboardRemovePlayerItem_my(HLEADERBOARD lb, HPLAYER p);
extern LeaderboardSetItemLabel_FUNC LeaderboardSetItemLabel_org;
extern LeaderboardSetItemLabel_FUNC LeaderboardSetItemLabel_ptr;
extern void _cdecl LeaderboardSetItemLabel_my(HLEADERBOARD lb, int item, CJassString val);
extern LeaderboardSetItemLabelColor_FUNC LeaderboardSetItemLabelColor_org;
extern LeaderboardSetItemLabelColor_FUNC LeaderboardSetItemLabelColor_ptr;
extern void _cdecl LeaderboardSetItemLabelColor_my(HLEADERBOARD lb, int item, int red, int green, int blue, int alpha);
extern LeaderboardSetItemStyle_FUNC LeaderboardSetItemStyle_org;
extern LeaderboardSetItemStyle_FUNC LeaderboardSetItemStyle_ptr;
extern void _cdecl LeaderboardSetItemStyle_my(HLEADERBOARD lb, int item, BOOL showLabel, BOOL showValue, BOOL showIcon);
extern LeaderboardSetItemValue_FUNC LeaderboardSetItemValue_org;
extern LeaderboardSetItemValue_FUNC LeaderboardSetItemValue_ptr;
extern void _cdecl LeaderboardSetItemValue_my(HLEADERBOARD lb, int item, int val);
extern LeaderboardSetItemValueColor_FUNC LeaderboardSetItemValueColor_org;
extern LeaderboardSetItemValueColor_FUNC LeaderboardSetItemValueColor_ptr;
extern void _cdecl LeaderboardSetItemValueColor_my(HLEADERBOARD lb, int item, int red, int green, int blue, int alpha);
extern LeaderboardSetLabel_FUNC LeaderboardSetLabel_org;
extern LeaderboardSetLabel_FUNC LeaderboardSetLabel_ptr;
extern void _cdecl LeaderboardSetLabel_my(HLEADERBOARD lb, CJassString label);
extern LeaderboardSetLabelColor_FUNC LeaderboardSetLabelColor_org;
extern LeaderboardSetLabelColor_FUNC LeaderboardSetLabelColor_ptr;
extern void _cdecl LeaderboardSetLabelColor_my(HLEADERBOARD lb, int red, int green, int blue, int alpha);
extern LeaderboardSetSizeByItemCount_FUNC LeaderboardSetSizeByItemCount_org;
extern LeaderboardSetSizeByItemCount_FUNC LeaderboardSetSizeByItemCount_ptr;
extern void _cdecl LeaderboardSetSizeByItemCount_my(HLEADERBOARD lb, int count);
extern LeaderboardSetStyle_FUNC LeaderboardSetStyle_org;
extern LeaderboardSetStyle_FUNC LeaderboardSetStyle_ptr;
extern void _cdecl LeaderboardSetStyle_my(HLEADERBOARD lb, BOOL showLabel, BOOL showNames, BOOL showValues, BOOL showIcons);
extern LeaderboardSetValueColor_FUNC LeaderboardSetValueColor_org;
extern LeaderboardSetValueColor_FUNC LeaderboardSetValueColor_ptr;
extern void _cdecl LeaderboardSetValueColor_my(HLEADERBOARD lb, int red, int green, int blue, int alpha);
extern LeaderboardSortItemsByLabel_FUNC LeaderboardSortItemsByLabel_org;
extern LeaderboardSortItemsByLabel_FUNC LeaderboardSortItemsByLabel_ptr;
extern void _cdecl LeaderboardSortItemsByLabel_my(HLEADERBOARD lb, BOOL ascending);
extern LeaderboardSortItemsByPlayer_FUNC LeaderboardSortItemsByPlayer_org;
extern LeaderboardSortItemsByPlayer_FUNC LeaderboardSortItemsByPlayer_ptr;
extern void _cdecl LeaderboardSortItemsByPlayer_my(HLEADERBOARD lb, BOOL ascending);
extern LeaderboardSortItemsByValue_FUNC LeaderboardSortItemsByValue_org;
extern LeaderboardSortItemsByValue_FUNC LeaderboardSortItemsByValue_ptr;
extern void _cdecl LeaderboardSortItemsByValue_my(HLEADERBOARD lb, BOOL ascending);
extern LoadAbilityHandle_FUNC LoadAbilityHandle_org;
extern LoadAbilityHandle_FUNC LoadAbilityHandle_ptr;
extern HABILITY _cdecl LoadAbilityHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadBoolean_FUNC LoadBoolean_org;
extern LoadBoolean_FUNC LoadBoolean_ptr;
extern BOOL _cdecl LoadBoolean_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadBooleanExprHandle_FUNC LoadBooleanExprHandle_org;
extern LoadBooleanExprHandle_FUNC LoadBooleanExprHandle_ptr;
extern HBOOLEXPR _cdecl LoadBooleanExprHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadButtonHandle_FUNC LoadButtonHandle_org;
extern LoadButtonHandle_FUNC LoadButtonHandle_ptr;
extern HBUTTON _cdecl LoadButtonHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadDefeatConditionHandle_FUNC LoadDefeatConditionHandle_org;
extern LoadDefeatConditionHandle_FUNC LoadDefeatConditionHandle_ptr;
extern HDEFEATCONDITION _cdecl LoadDefeatConditionHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadDestructableHandle_FUNC LoadDestructableHandle_org;
extern LoadDestructableHandle_FUNC LoadDestructableHandle_ptr;
extern HDESTRUCTABLE _cdecl LoadDestructableHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadDialogHandle_FUNC LoadDialogHandle_org;
extern LoadDialogHandle_FUNC LoadDialogHandle_ptr;
extern HDIALOG _cdecl LoadDialogHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadEffectHandle_FUNC LoadEffectHandle_org;
extern LoadEffectHandle_FUNC LoadEffectHandle_ptr;
extern HEFFECT _cdecl LoadEffectHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadFogModifierHandle_FUNC LoadFogModifierHandle_org;
extern LoadFogModifierHandle_FUNC LoadFogModifierHandle_ptr;
extern HFOGMODIFIER _cdecl LoadFogModifierHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadFogStateHandle_FUNC LoadFogStateHandle_org;
extern LoadFogStateHandle_FUNC LoadFogStateHandle_ptr;
extern HFOGSTATE _cdecl LoadFogStateHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadForceHandle_FUNC LoadForceHandle_org;
extern LoadForceHandle_FUNC LoadForceHandle_ptr;
extern HFORCE _cdecl LoadForceHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadGame_FUNC LoadGame_org;
extern LoadGame_FUNC LoadGame_ptr;
extern void _cdecl LoadGame_my(CJassString saveFileName, BOOL doScoreScreen);
extern LoadGroupHandle_FUNC LoadGroupHandle_org;
extern LoadGroupHandle_FUNC LoadGroupHandle_ptr;
extern HGROUP _cdecl LoadGroupHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadHashtableHandle_FUNC LoadHashtableHandle_org;
extern LoadHashtableHandle_FUNC LoadHashtableHandle_ptr;
extern HHASHTABLE _cdecl LoadHashtableHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadImageHandle_FUNC LoadImageHandle_org;
extern LoadImageHandle_FUNC LoadImageHandle_ptr;
extern HIMAGE _cdecl LoadImageHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadInteger_FUNC LoadInteger_org;
extern LoadInteger_FUNC LoadInteger_ptr;
extern int _cdecl LoadInteger_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadItemHandle_FUNC LoadItemHandle_org;
extern LoadItemHandle_FUNC LoadItemHandle_ptr;
extern HITEM _cdecl LoadItemHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadItemPoolHandle_FUNC LoadItemPoolHandle_org;
extern LoadItemPoolHandle_FUNC LoadItemPoolHandle_ptr;
extern HITEMPOOL _cdecl LoadItemPoolHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadLeaderboardHandle_FUNC LoadLeaderboardHandle_org;
extern LoadLeaderboardHandle_FUNC LoadLeaderboardHandle_ptr;
extern HLEADERBOARD _cdecl LoadLeaderboardHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadLightningHandle_FUNC LoadLightningHandle_org;
extern LoadLightningHandle_FUNC LoadLightningHandle_ptr;
extern HLIGHTNING _cdecl LoadLightningHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadLocationHandle_FUNC LoadLocationHandle_org;
extern LoadLocationHandle_FUNC LoadLocationHandle_ptr;
extern HLOCATION _cdecl LoadLocationHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadMultiboardHandle_FUNC LoadMultiboardHandle_org;
extern LoadMultiboardHandle_FUNC LoadMultiboardHandle_ptr;
extern HMULTIBOARD _cdecl LoadMultiboardHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadMultiboardItemHandle_FUNC LoadMultiboardItemHandle_org;
extern LoadMultiboardItemHandle_FUNC LoadMultiboardItemHandle_ptr;
extern HMULTIBOARDITEM _cdecl LoadMultiboardItemHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadPlayerHandle_FUNC LoadPlayerHandle_org;
extern LoadPlayerHandle_FUNC LoadPlayerHandle_ptr;
extern HPLAYER _cdecl LoadPlayerHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadQuestHandle_FUNC LoadQuestHandle_org;
extern LoadQuestHandle_FUNC LoadQuestHandle_ptr;
extern HQUEST _cdecl LoadQuestHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadQuestItemHandle_FUNC LoadQuestItemHandle_org;
extern LoadQuestItemHandle_FUNC LoadQuestItemHandle_ptr;
extern HQUESTITEM _cdecl LoadQuestItemHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadReal_FUNC LoadReal_org;
extern LoadReal_FUNC LoadReal_ptr;
extern DWFP _cdecl LoadReal_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadRectHandle_FUNC LoadRectHandle_org;
extern LoadRectHandle_FUNC LoadRectHandle_ptr;
extern HRECT _cdecl LoadRectHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadRegionHandle_FUNC LoadRegionHandle_org;
extern LoadRegionHandle_FUNC LoadRegionHandle_ptr;
extern HREGION _cdecl LoadRegionHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadSoundHandle_FUNC LoadSoundHandle_org;
extern LoadSoundHandle_FUNC LoadSoundHandle_ptr;
extern HSOUND _cdecl LoadSoundHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadStr_FUNC LoadStr_org;
extern LoadStr_FUNC LoadStr_ptr;
extern CJassStringSID _cdecl LoadStr_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTextTagHandle_FUNC LoadTextTagHandle_org;
extern LoadTextTagHandle_FUNC LoadTextTagHandle_ptr;
extern HTEXTTAG _cdecl LoadTextTagHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTimerDialogHandle_FUNC LoadTimerDialogHandle_org;
extern LoadTimerDialogHandle_FUNC LoadTimerDialogHandle_ptr;
extern HTIMERDIALOG _cdecl LoadTimerDialogHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTimerHandle_FUNC LoadTimerHandle_org;
extern LoadTimerHandle_FUNC LoadTimerHandle_ptr;
extern HTIMER _cdecl LoadTimerHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTrackableHandle_FUNC LoadTrackableHandle_org;
extern LoadTrackableHandle_FUNC LoadTrackableHandle_ptr;
extern HTRACKABLE _cdecl LoadTrackableHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTriggerActionHandle_FUNC LoadTriggerActionHandle_org;
extern LoadTriggerActionHandle_FUNC LoadTriggerActionHandle_ptr;
extern HTRIGGERACTION _cdecl LoadTriggerActionHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTriggerConditionHandle_FUNC LoadTriggerConditionHandle_org;
extern LoadTriggerConditionHandle_FUNC LoadTriggerConditionHandle_ptr;
extern HTRIGGERCONDITION _cdecl LoadTriggerConditionHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTriggerEventHandle_FUNC LoadTriggerEventHandle_org;
extern LoadTriggerEventHandle_FUNC LoadTriggerEventHandle_ptr;
extern HEVENT _cdecl LoadTriggerEventHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadTriggerHandle_FUNC LoadTriggerHandle_org;
extern LoadTriggerHandle_FUNC LoadTriggerHandle_ptr;
extern HTRIGGER _cdecl LoadTriggerHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadUbersplatHandle_FUNC LoadUbersplatHandle_org;
extern LoadUbersplatHandle_FUNC LoadUbersplatHandle_ptr;
extern HUBERSPLAT _cdecl LoadUbersplatHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadUnitHandle_FUNC LoadUnitHandle_org;
extern LoadUnitHandle_FUNC LoadUnitHandle_ptr;
extern HUNIT _cdecl LoadUnitHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadUnitPoolHandle_FUNC LoadUnitPoolHandle_org;
extern LoadUnitPoolHandle_FUNC LoadUnitPoolHandle_ptr;
extern HUNITPOOL _cdecl LoadUnitPoolHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadWidgetHandle_FUNC LoadWidgetHandle_org;
extern LoadWidgetHandle_FUNC LoadWidgetHandle_ptr;
extern HWIDGET _cdecl LoadWidgetHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern LoadZepWave_FUNC LoadZepWave_org;
extern LoadZepWave_FUNC LoadZepWave_ptr;
extern void _cdecl LoadZepWave_my(int arg1, int arg2);
extern Location_FUNC Location_org;
extern Location_FUNC Location_ptr;
extern HLOCATION _cdecl Location_my(float *x, float *y);
extern MeleeDifficulty_FUNC MeleeDifficulty_org;
extern MeleeDifficulty_FUNC MeleeDifficulty_ptr;
extern int _cdecl MeleeDifficulty_my();
extern MergeUnits_FUNC MergeUnits_org;
extern MergeUnits_FUNC MergeUnits_ptr;
extern BOOL _cdecl MergeUnits_my(int arg1, int arg2, int arg3, int arg4);
extern MoveLightning_FUNC MoveLightning_org;
extern MoveLightning_FUNC MoveLightning_ptr;
extern BOOL _cdecl MoveLightning_my(HLIGHTNING Bolt, BOOL checkVisibility, float *x1, float *y1, float *x2, float *y2);
extern MoveLightningEx_FUNC MoveLightningEx_org;
extern MoveLightningEx_FUNC MoveLightningEx_ptr;
extern BOOL _cdecl MoveLightningEx_my(HLIGHTNING Bolt, BOOL checkVisibility, float *x1, float *y1, float *z1, float *x2, float *y2, float *z2);
extern MoveLocation_FUNC MoveLocation_org;
extern MoveLocation_FUNC MoveLocation_ptr;
extern void _cdecl MoveLocation_my(HLOCATION Location, float *newX, float *newY);
extern MoveRectTo_FUNC MoveRectTo_org;
extern MoveRectTo_FUNC MoveRectTo_ptr;
extern void _cdecl MoveRectTo_my(HRECT Rect, float *newCenterX, float *newCenterY);
extern MoveRectToLoc_FUNC MoveRectToLoc_org;
extern MoveRectToLoc_FUNC MoveRectToLoc_ptr;
extern void _cdecl MoveRectToLoc_my(HRECT Rect, HLOCATION newCenterLoc);
extern MultiboardClear_FUNC MultiboardClear_org;
extern MultiboardClear_FUNC MultiboardClear_ptr;
extern void _cdecl MultiboardClear_my(HMULTIBOARD lb);
extern MultiboardDisplay_FUNC MultiboardDisplay_org;
extern MultiboardDisplay_FUNC MultiboardDisplay_ptr;
extern void _cdecl MultiboardDisplay_my(HMULTIBOARD lb, BOOL show);
extern MultiboardGetColumnCount_FUNC MultiboardGetColumnCount_org;
extern MultiboardGetColumnCount_FUNC MultiboardGetColumnCount_ptr;
extern int _cdecl MultiboardGetColumnCount_my(HMULTIBOARD lb);
extern MultiboardGetItem_FUNC MultiboardGetItem_org;
extern MultiboardGetItem_FUNC MultiboardGetItem_ptr;
extern HMULTIBOARDITEM _cdecl MultiboardGetItem_my(HMULTIBOARD lb, int row, int column);
extern MultiboardGetRowCount_FUNC MultiboardGetRowCount_org;
extern MultiboardGetRowCount_FUNC MultiboardGetRowCount_ptr;
extern int _cdecl MultiboardGetRowCount_my(HMULTIBOARD lb);
extern MultiboardGetTitleText_FUNC MultiboardGetTitleText_org;
extern MultiboardGetTitleText_FUNC MultiboardGetTitleText_ptr;
extern CJassStringSID _cdecl MultiboardGetTitleText_my(HMULTIBOARD lb);
extern MultiboardMinimize_FUNC MultiboardMinimize_org;
extern MultiboardMinimize_FUNC MultiboardMinimize_ptr;
extern void _cdecl MultiboardMinimize_my(HMULTIBOARD lb, BOOL minimize);
extern MultiboardReleaseItem_FUNC MultiboardReleaseItem_org;
extern MultiboardReleaseItem_FUNC MultiboardReleaseItem_ptr;
extern void _cdecl MultiboardReleaseItem_my(HMULTIBOARDITEM mbi);
extern MultiboardSetColumnCount_FUNC MultiboardSetColumnCount_org;
extern MultiboardSetColumnCount_FUNC MultiboardSetColumnCount_ptr;
extern void _cdecl MultiboardSetColumnCount_my(HMULTIBOARD lb, int count);
extern MultiboardSetItemIcon_FUNC MultiboardSetItemIcon_org;
extern MultiboardSetItemIcon_FUNC MultiboardSetItemIcon_ptr;
extern void _cdecl MultiboardSetItemIcon_my(HMULTIBOARDITEM mbi, CJassString iconFileName);
extern MultiboardSetItemStyle_FUNC MultiboardSetItemStyle_org;
extern MultiboardSetItemStyle_FUNC MultiboardSetItemStyle_ptr;
extern void _cdecl MultiboardSetItemStyle_my(HMULTIBOARDITEM mbi, BOOL showValue, BOOL showIcon);
extern MultiboardSetItemValue_FUNC MultiboardSetItemValue_org;
extern MultiboardSetItemValue_FUNC MultiboardSetItemValue_ptr;
extern void _cdecl MultiboardSetItemValue_my(HMULTIBOARDITEM mbi, CJassString val);
extern MultiboardSetItemValueColor_FUNC MultiboardSetItemValueColor_org;
extern MultiboardSetItemValueColor_FUNC MultiboardSetItemValueColor_ptr;
extern void _cdecl MultiboardSetItemValueColor_my(HMULTIBOARDITEM mbi, int red, int green, int blue, int alpha);
extern MultiboardSetItemWidth_FUNC MultiboardSetItemWidth_org;
extern MultiboardSetItemWidth_FUNC MultiboardSetItemWidth_ptr;
extern void _cdecl MultiboardSetItemWidth_my(HMULTIBOARDITEM mbi, float *width);
extern MultiboardSetItemsIcon_FUNC MultiboardSetItemsIcon_org;
extern MultiboardSetItemsIcon_FUNC MultiboardSetItemsIcon_ptr;
extern void _cdecl MultiboardSetItemsIcon_my(HMULTIBOARD lb, CJassString iconPath);
extern MultiboardSetItemsStyle_FUNC MultiboardSetItemsStyle_org;
extern MultiboardSetItemsStyle_FUNC MultiboardSetItemsStyle_ptr;
extern void _cdecl MultiboardSetItemsStyle_my(HMULTIBOARD lb, BOOL showValues, BOOL showIcons);
extern MultiboardSetItemsValue_FUNC MultiboardSetItemsValue_org;
extern MultiboardSetItemsValue_FUNC MultiboardSetItemsValue_ptr;
extern void _cdecl MultiboardSetItemsValue_my(HMULTIBOARD lb, CJassString value);
extern MultiboardSetItemsValueColor_FUNC MultiboardSetItemsValueColor_org;
extern MultiboardSetItemsValueColor_FUNC MultiboardSetItemsValueColor_ptr;
extern void _cdecl MultiboardSetItemsValueColor_my(HMULTIBOARD lb, int red, int green, int blue, int alpha);
extern MultiboardSetItemsWidth_FUNC MultiboardSetItemsWidth_org;
extern MultiboardSetItemsWidth_FUNC MultiboardSetItemsWidth_ptr;
extern void _cdecl MultiboardSetItemsWidth_my(HMULTIBOARD lb, float *width);
extern MultiboardSetRowCount_FUNC MultiboardSetRowCount_org;
extern MultiboardSetRowCount_FUNC MultiboardSetRowCount_ptr;
extern void _cdecl MultiboardSetRowCount_my(HMULTIBOARD lb, int count);
extern MultiboardSetTitleText_FUNC MultiboardSetTitleText_org;
extern MultiboardSetTitleText_FUNC MultiboardSetTitleText_ptr;
extern void _cdecl MultiboardSetTitleText_my(HMULTIBOARD lb, CJassString label);
extern MultiboardSetTitleTextColor_FUNC MultiboardSetTitleTextColor_org;
extern MultiboardSetTitleTextColor_FUNC MultiboardSetTitleTextColor_ptr;
extern void _cdecl MultiboardSetTitleTextColor_my(HMULTIBOARD lb, int red, int green, int blue, int alpha);
extern MultiboardSuppressDisplay_FUNC MultiboardSuppressDisplay_org;
extern MultiboardSuppressDisplay_FUNC MultiboardSuppressDisplay_ptr;
extern void _cdecl MultiboardSuppressDisplay_my(BOOL flag);
extern NewSoundEnvironment_FUNC NewSoundEnvironment_org;
extern NewSoundEnvironment_FUNC NewSoundEnvironment_ptr;
extern void _cdecl NewSoundEnvironment_my(CJassString environmentName);
extern Not_FUNC Not_org;
extern Not_FUNC Not_ptr;
extern HBOOLEXPR _cdecl Not_my(HBOOLEXPR operand);
extern Or_FUNC Or_org;
extern Or_FUNC Or_ptr;
extern HBOOLEXPR _cdecl Or_my(HBOOLEXPR operandA, HBOOLEXPR operandB);
extern OrderId_FUNC OrderId_org;
extern OrderId_FUNC OrderId_ptr;
extern int _cdecl OrderId_my(CJassString orderIdString);
extern OrderId2String_FUNC OrderId2String_org;
extern OrderId2String_FUNC OrderId2String_ptr;
extern CJassStringSID _cdecl OrderId2String_my(int orderId);
extern PanCameraTo_FUNC PanCameraTo_org;
extern PanCameraTo_FUNC PanCameraTo_ptr;
extern void _cdecl PanCameraTo_my(float *x, float *y);
extern PanCameraToTimed_FUNC PanCameraToTimed_org;
extern PanCameraToTimed_FUNC PanCameraToTimed_ptr;
extern void _cdecl PanCameraToTimed_my(float *x, float *y, float *duration);
extern PanCameraToTimedWithZ_FUNC PanCameraToTimedWithZ_org;
extern PanCameraToTimedWithZ_FUNC PanCameraToTimedWithZ_ptr;
extern void _cdecl PanCameraToTimedWithZ_my(float *x, float *y, float *zOffsetDest, float *duration);
extern PanCameraToWithZ_FUNC PanCameraToWithZ_org;
extern PanCameraToWithZ_FUNC PanCameraToWithZ_ptr;
extern void _cdecl PanCameraToWithZ_my(float *x, float *y, float *zOffsetDest);
extern PauseCompAI_FUNC PauseCompAI_org;
extern PauseCompAI_FUNC PauseCompAI_ptr;
extern void _cdecl PauseCompAI_my(HPLAYER p, BOOL pause);
extern PauseGame_FUNC PauseGame_org;
extern PauseGame_FUNC PauseGame_ptr;
extern void _cdecl PauseGame_my(BOOL flag);
extern PauseTimer_FUNC PauseTimer_org;
extern PauseTimer_FUNC PauseTimer_ptr;
extern void _cdecl PauseTimer_my(HTIMER Timer);
extern PauseUnit_FUNC PauseUnit_org;
extern PauseUnit_FUNC PauseUnit_ptr;
extern void _cdecl PauseUnit_my(HUNIT unit, BOOL flag);
extern PingMinimap_FUNC PingMinimap_org;
extern PingMinimap_FUNC PingMinimap_ptr;
extern void _cdecl PingMinimap_my(float *x, float *y, float *duration);
extern PingMinimapEx_FUNC PingMinimapEx_org;
extern PingMinimapEx_FUNC PingMinimapEx_ptr;
extern void _cdecl PingMinimapEx_my(float *x, float *y, float *duration, int red, int green, int blue, BOOL extraEffects);
extern PlaceRandomItem_FUNC PlaceRandomItem_org;
extern PlaceRandomItem_FUNC PlaceRandomItem_ptr;
extern HITEM _cdecl PlaceRandomItem_my(HITEMPOOL ItemPool, float *x, float *y);
extern PlaceRandomUnit_FUNC PlaceRandomUnit_org;
extern PlaceRandomUnit_FUNC PlaceRandomUnit_ptr;
extern HUNIT _cdecl PlaceRandomUnit_my(HUNITPOOL Pool, HPLAYER forWhichPlayer, float *x, float *y, float *facing);
extern PlayCinematic_FUNC PlayCinematic_org;
extern PlayCinematic_FUNC PlayCinematic_ptr;
extern void _cdecl PlayCinematic_my(CJassString movieName);
extern PlayModelCinematic_FUNC PlayModelCinematic_org;
extern PlayModelCinematic_FUNC PlayModelCinematic_ptr;
extern void _cdecl PlayModelCinematic_my(CJassString modelName);
extern PlayMusic_FUNC PlayMusic_org;
extern PlayMusic_FUNC PlayMusic_ptr;
extern void _cdecl PlayMusic_my(CJassString musicName);
extern PlayMusicEx_FUNC PlayMusicEx_org;
extern PlayMusicEx_FUNC PlayMusicEx_ptr;
extern void _cdecl PlayMusicEx_my(CJassString musicName, int frommsecs, int fadeinmsecs);
extern PlayThematicMusic_FUNC PlayThematicMusic_org;
extern PlayThematicMusic_FUNC PlayThematicMusic_ptr;
extern void _cdecl PlayThematicMusic_my(CJassString musicFileName);
extern PlayThematicMusicEx_FUNC PlayThematicMusicEx_org;
extern PlayThematicMusicEx_FUNC PlayThematicMusicEx_ptr;
extern void _cdecl PlayThematicMusicEx_my(CJassString musicFileName, int frommsecs);
extern Player_FUNC Player_org;
extern Player_FUNC Player_ptr;
extern HPLAYER _cdecl Player_my(int number);
extern PlayerGetLeaderboard_FUNC PlayerGetLeaderboard_org;
extern PlayerGetLeaderboard_FUNC PlayerGetLeaderboard_ptr;
extern HLEADERBOARD _cdecl PlayerGetLeaderboard_my(HPLAYER toPlayer);
extern PlayerSetLeaderboard_FUNC PlayerSetLeaderboard_org;
extern PlayerSetLeaderboard_FUNC PlayerSetLeaderboard_ptr;
extern void _cdecl PlayerSetLeaderboard_my(HPLAYER toPlayer, HLEADERBOARD lb);
extern PopLastCommand_FUNC PopLastCommand_org;
extern PopLastCommand_FUNC PopLastCommand_ptr;
extern void _cdecl PopLastCommand_my();
extern Pow_FUNC Pow_org;
extern Pow_FUNC Pow_ptr;
extern DWFP _cdecl Pow_my(float *x, float *power);
extern Preload_FUNC Preload_org;
extern Preload_FUNC Preload_ptr;
extern void _cdecl Preload_my(CJassString filename);
extern PreloadEnd_FUNC PreloadEnd_org;
extern PreloadEnd_FUNC PreloadEnd_ptr;
extern void _cdecl PreloadEnd_my(float *timeout);
extern PreloadEndEx_FUNC PreloadEndEx_org;
extern PreloadEndEx_FUNC PreloadEndEx_ptr;
extern void _cdecl PreloadEndEx_my();
extern PreloadGenClear_FUNC PreloadGenClear_org;
extern PreloadGenClear_FUNC PreloadGenClear_ptr;
extern void _cdecl PreloadGenClear_my();
extern PreloadGenEnd_FUNC PreloadGenEnd_org;
extern PreloadGenEnd_FUNC PreloadGenEnd_ptr;
extern void _cdecl PreloadGenEnd_my(CJassString filename);
extern PreloadGenStart_FUNC PreloadGenStart_org;
extern PreloadGenStart_FUNC PreloadGenStart_ptr;
extern void _cdecl PreloadGenStart_my();
extern PreloadRefresh_FUNC PreloadRefresh_org;
extern PreloadRefresh_FUNC PreloadRefresh_ptr;
extern void _cdecl PreloadRefresh_my();
extern PreloadStart_FUNC PreloadStart_org;
extern PreloadStart_FUNC PreloadStart_ptr;
extern void _cdecl PreloadStart_my();
extern Preloader_FUNC Preloader_org;
extern Preloader_FUNC Preloader_ptr;
extern void _cdecl Preloader_my(CJassString filename);
extern PurchaseZeppelin_FUNC PurchaseZeppelin_org;
extern PurchaseZeppelin_FUNC PurchaseZeppelin_ptr;
extern void _cdecl PurchaseZeppelin_my();
extern QuestCreateItem_FUNC QuestCreateItem_org;
extern QuestCreateItem_FUNC QuestCreateItem_ptr;
extern HQUESTITEM _cdecl QuestCreateItem_my(HQUEST Quest);
extern QuestItemSetCompleted_FUNC QuestItemSetCompleted_org;
extern QuestItemSetCompleted_FUNC QuestItemSetCompleted_ptr;
extern void _cdecl QuestItemSetCompleted_my(HQUESTITEM QuestItem, BOOL completed);
extern QuestItemSetDescription_FUNC QuestItemSetDescription_org;
extern QuestItemSetDescription_FUNC QuestItemSetDescription_ptr;
extern void _cdecl QuestItemSetDescription_my(HQUESTITEM QuestItem, CJassString description);
extern QuestSetCompleted_FUNC QuestSetCompleted_org;
extern QuestSetCompleted_FUNC QuestSetCompleted_ptr;
extern void _cdecl QuestSetCompleted_my(HQUEST Quest, BOOL completed);
extern QuestSetDescription_FUNC QuestSetDescription_org;
extern QuestSetDescription_FUNC QuestSetDescription_ptr;
extern void _cdecl QuestSetDescription_my(HQUEST Quest, CJassString description);
extern QuestSetDiscovered_FUNC QuestSetDiscovered_org;
extern QuestSetDiscovered_FUNC QuestSetDiscovered_ptr;
extern void _cdecl QuestSetDiscovered_my(HQUEST Quest, BOOL discovered);
extern QuestSetEnabled_FUNC QuestSetEnabled_org;
extern QuestSetEnabled_FUNC QuestSetEnabled_ptr;
extern void _cdecl QuestSetEnabled_my(HQUEST Quest, BOOL enabled);
extern QuestSetFailed_FUNC QuestSetFailed_org;
extern QuestSetFailed_FUNC QuestSetFailed_ptr;
extern void _cdecl QuestSetFailed_my(HQUEST Quest, BOOL failed);
extern QuestSetIconPath_FUNC QuestSetIconPath_org;
extern QuestSetIconPath_FUNC QuestSetIconPath_ptr;
extern void _cdecl QuestSetIconPath_my(HQUEST Quest, CJassString iconPath);
extern QuestSetRequired_FUNC QuestSetRequired_org;
extern QuestSetRequired_FUNC QuestSetRequired_ptr;
extern void _cdecl QuestSetRequired_my(HQUEST Quest, BOOL required);
extern QuestSetTitle_FUNC QuestSetTitle_org;
extern QuestSetTitle_FUNC QuestSetTitle_ptr;
extern void _cdecl QuestSetTitle_my(HQUEST Quest, CJassString title);
extern QueueDestructableAnimation_FUNC QueueDestructableAnimation_org;
extern QueueDestructableAnimation_FUNC QueueDestructableAnimation_ptr;
extern void _cdecl QueueDestructableAnimation_my(HDESTRUCTABLE d, CJassString Animation);
extern QueueUnitAnimation_FUNC QueueUnitAnimation_org;
extern QueueUnitAnimation_FUNC QueueUnitAnimation_ptr;
extern void _cdecl QueueUnitAnimation_my(HUNIT unit, CJassString Animation);
extern R2I_FUNC R2I_org;
extern R2I_FUNC R2I_ptr;
extern int _cdecl R2I_my(float *r);
extern R2S_FUNC R2S_org;
extern R2S_FUNC R2S_ptr;
extern CJassStringSID _cdecl R2S_my(float *r);
extern R2SW_FUNC R2SW_org;
extern R2SW_FUNC R2SW_ptr;
extern CJassStringSID _cdecl R2SW_my(float *r, int width, int precision);
extern Rad2Deg_FUNC Rad2Deg_org;
extern Rad2Deg_FUNC Rad2Deg_ptr;
extern DWFP _cdecl Rad2Deg_my(float *radians);
extern Rect_FUNC Rect_org;
extern Rect_FUNC Rect_ptr;
extern HRECT _cdecl Rect_my(float *minx, float *miny, float *maxx, float *maxy);
extern RectFromLoc_FUNC RectFromLoc_org;
extern RectFromLoc_FUNC RectFromLoc_ptr;
extern HRECT _cdecl RectFromLoc_my(HLOCATION min, HLOCATION max);
extern RecycleGuardPosition_FUNC RecycleGuardPosition_org;
extern RecycleGuardPosition_FUNC RecycleGuardPosition_ptr;
extern void _cdecl RecycleGuardPosition_my(HUNIT hUnit);
extern RegionAddCell_FUNC RegionAddCell_org;
extern RegionAddCell_FUNC RegionAddCell_ptr;
extern void _cdecl RegionAddCell_my(HREGION Region, float *x, float *y);
extern RegionAddCellAtLoc_FUNC RegionAddCellAtLoc_org;
extern RegionAddCellAtLoc_FUNC RegionAddCellAtLoc_ptr;
extern void _cdecl RegionAddCellAtLoc_my(HREGION Region, HLOCATION Location);
extern RegionAddRect_FUNC RegionAddRect_org;
extern RegionAddRect_FUNC RegionAddRect_ptr;
extern void _cdecl RegionAddRect_my(HREGION Region, HRECT r);
extern RegionClearCell_FUNC RegionClearCell_org;
extern RegionClearCell_FUNC RegionClearCell_ptr;
extern void _cdecl RegionClearCell_my(HREGION Region, float *x, float *y);
extern RegionClearCellAtLoc_FUNC RegionClearCellAtLoc_org;
extern RegionClearCellAtLoc_FUNC RegionClearCellAtLoc_ptr;
extern void _cdecl RegionClearCellAtLoc_my(HREGION Region, HLOCATION Location);
extern RegionClearRect_FUNC RegionClearRect_org;
extern RegionClearRect_FUNC RegionClearRect_ptr;
extern void _cdecl RegionClearRect_my(HREGION Region, HRECT r);
extern RegisterStackedSound_FUNC RegisterStackedSound_org;
extern RegisterStackedSound_FUNC RegisterStackedSound_ptr;
extern void _cdecl RegisterStackedSound_my(HSOUND soundHandle, BOOL byPosition, float *rectwidth, float *rectheight);
extern ReloadGame_FUNC ReloadGame_org;
extern ReloadGame_FUNC ReloadGame_ptr;
extern void _cdecl ReloadGame_my();
extern ReloadGameCachesFromDisk_FUNC ReloadGameCachesFromDisk_org;
extern ReloadGameCachesFromDisk_FUNC ReloadGameCachesFromDisk_ptr;
extern BOOL _cdecl ReloadGameCachesFromDisk_my();
extern RemoveAllGuardPositions_FUNC RemoveAllGuardPositions_org;
extern RemoveAllGuardPositions_FUNC RemoveAllGuardPositions_ptr;
extern void _cdecl RemoveAllGuardPositions_my(HPLAYER num);
extern RemoveDestructable_FUNC RemoveDestructable_org;
extern RemoveDestructable_FUNC RemoveDestructable_ptr;
extern void _cdecl RemoveDestructable_my(HDESTRUCTABLE d);
extern RemoveGuardPosition_FUNC RemoveGuardPosition_org;
extern RemoveGuardPosition_FUNC RemoveGuardPosition_ptr;
extern void _cdecl RemoveGuardPosition_my(HUNIT hUnit);
extern RemoveInjuries_FUNC RemoveInjuries_org;
extern RemoveInjuries_FUNC RemoveInjuries_ptr;
extern void _cdecl RemoveInjuries_my();
extern RemoveItem_FUNC RemoveItem_org;
extern RemoveItem_FUNC RemoveItem_ptr;
extern void _cdecl RemoveItem_my(HITEM item);
extern RemoveItemFromAllStock_FUNC RemoveItemFromAllStock_org;
extern RemoveItemFromAllStock_FUNC RemoveItemFromAllStock_ptr;
extern void _cdecl RemoveItemFromAllStock_my(int itemId);
extern RemoveItemFromStock_FUNC RemoveItemFromStock_org;
extern RemoveItemFromStock_FUNC RemoveItemFromStock_ptr;
extern void _cdecl RemoveItemFromStock_my(HUNIT unit, int itemId);
extern RemoveLocation_FUNC RemoveLocation_org;
extern RemoveLocation_FUNC RemoveLocation_ptr;
extern void _cdecl RemoveLocation_my(HLOCATION Location);
extern RemovePlayer_FUNC RemovePlayer_org;
extern RemovePlayer_FUNC RemovePlayer_ptr;
extern void _cdecl RemovePlayer_my(HPLAYER player, HPLAYERGAMERESULT gameResult);
extern RemoveRect_FUNC RemoveRect_org;
extern RemoveRect_FUNC RemoveRect_ptr;
extern void _cdecl RemoveRect_my(HRECT Rect);
extern RemoveRegion_FUNC RemoveRegion_org;
extern RemoveRegion_FUNC RemoveRegion_ptr;
extern void _cdecl RemoveRegion_my(HREGION Region);
extern RemoveSaveDirectory_FUNC RemoveSaveDirectory_org;
extern RemoveSaveDirectory_FUNC RemoveSaveDirectory_ptr;
extern BOOL _cdecl RemoveSaveDirectory_my(CJassString sourceDirName);
extern RemoveSavedBoolean_FUNC RemoveSavedBoolean_org;
extern RemoveSavedBoolean_FUNC RemoveSavedBoolean_ptr;
extern void _cdecl RemoveSavedBoolean_my(HHASHTABLE table, int parentKey, int childKey);
extern RemoveSavedHandle_FUNC RemoveSavedHandle_org;
extern RemoveSavedHandle_FUNC RemoveSavedHandle_ptr;
extern void _cdecl RemoveSavedHandle_my(HHASHTABLE table, int parentKey, int childKey);
extern RemoveSavedInteger_FUNC RemoveSavedInteger_org;
extern RemoveSavedInteger_FUNC RemoveSavedInteger_ptr;
extern void _cdecl RemoveSavedInteger_my(HHASHTABLE table, int parentKey, int childKey);
extern RemoveSavedReal_FUNC RemoveSavedReal_org;
extern RemoveSavedReal_FUNC RemoveSavedReal_ptr;
extern void _cdecl RemoveSavedReal_my(HHASHTABLE table, int parentKey, int childKey);
extern RemoveSavedString_FUNC RemoveSavedString_org;
extern RemoveSavedString_FUNC RemoveSavedString_ptr;
extern void _cdecl RemoveSavedString_my(HHASHTABLE table, int parentKey, int childKey);
extern RemoveSiege_FUNC RemoveSiege_org;
extern RemoveSiege_FUNC RemoveSiege_ptr;
extern void _cdecl RemoveSiege_my();
extern RemoveUnit_FUNC RemoveUnit_org;
extern RemoveUnit_FUNC RemoveUnit_ptr;
extern void _cdecl RemoveUnit_my(HUNIT unit);
extern RemoveUnitFromAllStock_FUNC RemoveUnitFromAllStock_org;
extern RemoveUnitFromAllStock_FUNC RemoveUnitFromAllStock_ptr;
extern void _cdecl RemoveUnitFromAllStock_my(int unitId);
extern RemoveUnitFromStock_FUNC RemoveUnitFromStock_org;
extern RemoveUnitFromStock_FUNC RemoveUnitFromStock_ptr;
extern void _cdecl RemoveUnitFromStock_my(HUNIT unit, int unitId);
extern RemoveWeatherEffect_FUNC RemoveWeatherEffect_org;
extern RemoveWeatherEffect_FUNC RemoveWeatherEffect_ptr;
extern void _cdecl RemoveWeatherEffect_my(HWEATHEREFFECT Effect);
extern RenameSaveDirectory_FUNC RenameSaveDirectory_org;
extern RenameSaveDirectory_FUNC RenameSaveDirectory_ptr;
extern BOOL _cdecl RenameSaveDirectory_my(CJassString sourceDirName, CJassString destDirName);
extern ResetCaptainLocs_FUNC ResetCaptainLocs_org;
extern ResetCaptainLocs_FUNC ResetCaptainLocs_ptr;
extern void _cdecl ResetCaptainLocs_my();
extern ResetTerrainFog_FUNC ResetTerrainFog_org;
extern ResetTerrainFog_FUNC ResetTerrainFog_ptr;
extern void _cdecl ResetTerrainFog_my();
extern ResetToGameCamera_FUNC ResetToGameCamera_org;
extern ResetToGameCamera_FUNC ResetToGameCamera_ptr;
extern void _cdecl ResetToGameCamera_my(float *duration);
extern ResetTrigger_FUNC ResetTrigger_org;
extern ResetTrigger_FUNC ResetTrigger_ptr;
extern void _cdecl ResetTrigger_my(HTRIGGER Trigger);
extern ResetUbersplat_FUNC ResetUbersplat_org;
extern ResetUbersplat_FUNC ResetUbersplat_ptr;
extern void _cdecl ResetUbersplat_my(HUBERSPLAT Splat);
extern ResetUnitLookAt_FUNC ResetUnitLookAt_org;
extern ResetUnitLookAt_FUNC ResetUnitLookAt_ptr;
extern void _cdecl ResetUnitLookAt_my(HUNIT unit);
extern RestartGame_FUNC RestartGame_org;
extern RestartGame_FUNC RestartGame_ptr;
extern void _cdecl RestartGame_my(BOOL doScoreScreen);
extern RestoreUnit_FUNC RestoreUnit_org;
extern RestoreUnit_FUNC RestoreUnit_ptr;
extern HUNIT _cdecl RestoreUnit_my(HGAMECACHE cache, CJassString missionKey, CJassString key, HPLAYER forWhichPlayer, float *x, float *y, float *facing);
extern ResumeMusic_FUNC ResumeMusic_org;
extern ResumeMusic_FUNC ResumeMusic_ptr;
extern void _cdecl ResumeMusic_my();
extern ResumeTimer_FUNC ResumeTimer_org;
extern ResumeTimer_FUNC ResumeTimer_ptr;
extern void _cdecl ResumeTimer_my(HTIMER Timer);
extern ReturnGuardPosts_FUNC ReturnGuardPosts_org;
extern ReturnGuardPosts_FUNC ReturnGuardPosts_ptr;
extern void _cdecl ReturnGuardPosts_my();
extern ReviveHero_FUNC ReviveHero_org;
extern ReviveHero_FUNC ReviveHero_ptr;
extern BOOL _cdecl ReviveHero_my(HUNIT hero, float *x, float *y, BOOL doEyecandy);
extern ReviveHeroLoc_FUNC ReviveHeroLoc_org;
extern ReviveHeroLoc_FUNC ReviveHeroLoc_ptr;
extern BOOL _cdecl ReviveHeroLoc_my(HUNIT hero, HLOCATION loc, BOOL doEyecandy);
extern S2I_FUNC S2I_org;
extern S2I_FUNC S2I_ptr;
extern int _cdecl S2I_my(CJassString s);
extern S2R_FUNC S2R_org;
extern S2R_FUNC S2R_ptr;
extern DWFP _cdecl S2R_my(CJassString s);
extern SaveAbilityHandle_FUNC SaveAbilityHandle_org;
extern SaveAbilityHandle_FUNC SaveAbilityHandle_ptr;
extern BOOL _cdecl SaveAbilityHandle_my(HHASHTABLE table, int parentKey, int childKey, HABILITY Ability);
extern SaveAgentHandle_FUNC SaveAgentHandle_org;
extern SaveAgentHandle_FUNC SaveAgentHandle_ptr;
extern BOOL _cdecl SaveAgentHandle_my(HHASHTABLE table, int parentKey, int childKey, HAGENT Agent);
extern SaveBoolean_FUNC SaveBoolean_org;
extern SaveBoolean_FUNC SaveBoolean_ptr;
extern void _cdecl SaveBoolean_my(HHASHTABLE table, int parentKey, int childKey, BOOL value);
extern SaveBooleanExprHandle_FUNC SaveBooleanExprHandle_org;
extern SaveBooleanExprHandle_FUNC SaveBooleanExprHandle_ptr;
extern BOOL _cdecl SaveBooleanExprHandle_my(HHASHTABLE table, int parentKey, int childKey, HBOOLEXPR Boolexpr);
extern SaveButtonHandle_FUNC SaveButtonHandle_org;
extern SaveButtonHandle_FUNC SaveButtonHandle_ptr;
extern BOOL _cdecl SaveButtonHandle_my(HHASHTABLE table, int parentKey, int childKey, HBUTTON Button);
extern SaveDefeatConditionHandle_FUNC SaveDefeatConditionHandle_org;
extern SaveDefeatConditionHandle_FUNC SaveDefeatConditionHandle_ptr;
extern BOOL _cdecl SaveDefeatConditionHandle_my(HHASHTABLE table, int parentKey, int childKey, HDEFEATCONDITION Defeatcondition);
extern SaveDestructableHandle_FUNC SaveDestructableHandle_org;
extern SaveDestructableHandle_FUNC SaveDestructableHandle_ptr;
extern BOOL _cdecl SaveDestructableHandle_my(HHASHTABLE table, int parentKey, int childKey, HDESTRUCTABLE Destructable);
extern SaveDialogHandle_FUNC SaveDialogHandle_org;
extern SaveDialogHandle_FUNC SaveDialogHandle_ptr;
extern BOOL _cdecl SaveDialogHandle_my(HHASHTABLE table, int parentKey, int childKey, HDIALOG Dialog);
extern SaveEffectHandle_FUNC SaveEffectHandle_org;
extern SaveEffectHandle_FUNC SaveEffectHandle_ptr;
extern BOOL _cdecl SaveEffectHandle_my(HHASHTABLE table, int parentKey, int childKey, HEFFECT Effect);
extern SaveFogModifierHandle_FUNC SaveFogModifierHandle_org;
extern SaveFogModifierHandle_FUNC SaveFogModifierHandle_ptr;
extern BOOL _cdecl SaveFogModifierHandle_my(HHASHTABLE table, int parentKey, int childKey, HFOGMODIFIER FogModifier);
extern SaveFogStateHandle_FUNC SaveFogStateHandle_org;
extern SaveFogStateHandle_FUNC SaveFogStateHandle_ptr;
extern BOOL _cdecl SaveFogStateHandle_my(HHASHTABLE table, int parentKey, int childKey, HFOGSTATE FogState);
extern SaveForceHandle_FUNC SaveForceHandle_org;
extern SaveForceHandle_FUNC SaveForceHandle_ptr;
extern BOOL _cdecl SaveForceHandle_my(HHASHTABLE table, int parentKey, int childKey, HFORCE Force);
extern SaveGame_FUNC SaveGame_org;
extern SaveGame_FUNC SaveGame_ptr;
extern void _cdecl SaveGame_my(CJassString saveFileName);
extern SaveGameCache_FUNC SaveGameCache_org;
extern SaveGameCache_FUNC SaveGameCache_ptr;
extern BOOL _cdecl SaveGameCache_my(HGAMECACHE Cache);
extern SaveGameExists_FUNC SaveGameExists_org;
extern SaveGameExists_FUNC SaveGameExists_ptr;
extern BOOL _cdecl SaveGameExists_my(CJassString saveName);
extern SaveGroupHandle_FUNC SaveGroupHandle_org;
extern SaveGroupHandle_FUNC SaveGroupHandle_ptr;
extern BOOL _cdecl SaveGroupHandle_my(HHASHTABLE table, int parentKey, int childKey, HGROUP Group);
extern SaveHashtableHandle_FUNC SaveHashtableHandle_org;
extern SaveHashtableHandle_FUNC SaveHashtableHandle_ptr;
extern BOOL _cdecl SaveHashtableHandle_my(HHASHTABLE table, int parentKey, int childKey, HHASHTABLE Hashtable);
extern SaveImageHandle_FUNC SaveImageHandle_org;
extern SaveImageHandle_FUNC SaveImageHandle_ptr;
extern BOOL _cdecl SaveImageHandle_my(HHASHTABLE table, int parentKey, int childKey, HIMAGE Image);
extern SaveInteger_FUNC SaveInteger_org;
extern SaveInteger_FUNC SaveInteger_ptr;
extern void _cdecl SaveInteger_my(HHASHTABLE table, int parentKey, int childKey, int value);
extern SaveItemHandle_FUNC SaveItemHandle_org;
extern SaveItemHandle_FUNC SaveItemHandle_ptr;
extern BOOL _cdecl SaveItemHandle_my(HHASHTABLE table, int parentKey, int childKey, HITEM item);
extern SaveItemPoolHandle_FUNC SaveItemPoolHandle_org;
extern SaveItemPoolHandle_FUNC SaveItemPoolHandle_ptr;
extern BOOL _cdecl SaveItemPoolHandle_my(HHASHTABLE table, int parentKey, int childKey, HITEMPOOL Itempool);
extern SaveLeaderboardHandle_FUNC SaveLeaderboardHandle_org;
extern SaveLeaderboardHandle_FUNC SaveLeaderboardHandle_ptr;
extern BOOL _cdecl SaveLeaderboardHandle_my(HHASHTABLE table, int parentKey, int childKey, HLEADERBOARD Leaderboard);
extern SaveLightningHandle_FUNC SaveLightningHandle_org;
extern SaveLightningHandle_FUNC SaveLightningHandle_ptr;
extern BOOL _cdecl SaveLightningHandle_my(HHASHTABLE table, int parentKey, int childKey, HLIGHTNING Lightning);
extern SaveLocationHandle_FUNC SaveLocationHandle_org;
extern SaveLocationHandle_FUNC SaveLocationHandle_ptr;
extern BOOL _cdecl SaveLocationHandle_my(HHASHTABLE table, int parentKey, int childKey, HLOCATION Location);
extern SaveMultiboardHandle_FUNC SaveMultiboardHandle_org;
extern SaveMultiboardHandle_FUNC SaveMultiboardHandle_ptr;
extern BOOL _cdecl SaveMultiboardHandle_my(HHASHTABLE table, int parentKey, int childKey, HMULTIBOARD Multiboard);
extern SaveMultiboardItemHandle_FUNC SaveMultiboardItemHandle_org;
extern SaveMultiboardItemHandle_FUNC SaveMultiboardItemHandle_ptr;
extern BOOL _cdecl SaveMultiboardItemHandle_my(HHASHTABLE table, int parentKey, int childKey, HMULTIBOARDITEM Multiboarditem);
extern SavePlayerHandle_FUNC SavePlayerHandle_org;
extern SavePlayerHandle_FUNC SavePlayerHandle_ptr;
extern BOOL _cdecl SavePlayerHandle_my(HHASHTABLE table, int parentKey, int childKey, HPLAYER player);
extern SaveQuestHandle_FUNC SaveQuestHandle_org;
extern SaveQuestHandle_FUNC SaveQuestHandle_ptr;
extern BOOL _cdecl SaveQuestHandle_my(HHASHTABLE table, int parentKey, int childKey, HQUEST Quest);
extern SaveQuestItemHandle_FUNC SaveQuestItemHandle_org;
extern SaveQuestItemHandle_FUNC SaveQuestItemHandle_ptr;
extern BOOL _cdecl SaveQuestItemHandle_my(HHASHTABLE table, int parentKey, int childKey, HQUESTITEM Questitem);
extern SaveReal_FUNC SaveReal_org;
extern SaveReal_FUNC SaveReal_ptr;
extern void _cdecl SaveReal_my(HHASHTABLE table, int parentKey, int childKey, float *value);
extern SaveRectHandle_FUNC SaveRectHandle_org;
extern SaveRectHandle_FUNC SaveRectHandle_ptr;
extern BOOL _cdecl SaveRectHandle_my(HHASHTABLE table, int parentKey, int childKey, HRECT Rect);
extern SaveRegionHandle_FUNC SaveRegionHandle_org;
extern SaveRegionHandle_FUNC SaveRegionHandle_ptr;
extern BOOL _cdecl SaveRegionHandle_my(HHASHTABLE table, int parentKey, int childKey, HREGION Region);
extern SaveSoundHandle_FUNC SaveSoundHandle_org;
extern SaveSoundHandle_FUNC SaveSoundHandle_ptr;
extern BOOL _cdecl SaveSoundHandle_my(HHASHTABLE table, int parentKey, int childKey, HSOUND Sound);
extern SaveStr_FUNC SaveStr_org;
extern SaveStr_FUNC SaveStr_ptr;
extern BOOL _cdecl SaveStr_my(HHASHTABLE table, int parentKey, int childKey, CJassString value);
extern SaveTextTagHandle_FUNC SaveTextTagHandle_org;
extern SaveTextTagHandle_FUNC SaveTextTagHandle_ptr;
extern BOOL _cdecl SaveTextTagHandle_my(HHASHTABLE table, int parentKey, int childKey, HTEXTTAG Texttag);
extern SaveTimerDialogHandle_FUNC SaveTimerDialogHandle_org;
extern SaveTimerDialogHandle_FUNC SaveTimerDialogHandle_ptr;
extern BOOL _cdecl SaveTimerDialogHandle_my(HHASHTABLE table, int parentKey, int childKey, HTIMERDIALOG Timerdialog);
extern SaveTimerHandle_FUNC SaveTimerHandle_org;
extern SaveTimerHandle_FUNC SaveTimerHandle_ptr;
extern BOOL _cdecl SaveTimerHandle_my(HHASHTABLE table, int parentKey, int childKey, HTIMER Timer);
extern SaveTrackableHandle_FUNC SaveTrackableHandle_org;
extern SaveTrackableHandle_FUNC SaveTrackableHandle_ptr;
extern BOOL _cdecl SaveTrackableHandle_my(HHASHTABLE table, int parentKey, int childKey, HTRACKABLE Trackable);
extern SaveTriggerActionHandle_FUNC SaveTriggerActionHandle_org;
extern SaveTriggerActionHandle_FUNC SaveTriggerActionHandle_ptr;
extern BOOL _cdecl SaveTriggerActionHandle_my(HHASHTABLE table, int parentKey, int childKey, HTRIGGERACTION Triggeraction);
extern SaveTriggerConditionHandle_FUNC SaveTriggerConditionHandle_org;
extern SaveTriggerConditionHandle_FUNC SaveTriggerConditionHandle_ptr;
extern BOOL _cdecl SaveTriggerConditionHandle_my(HHASHTABLE table, int parentKey, int childKey, HTRIGGERCONDITION Triggercondition);
extern SaveTriggerEventHandle_FUNC SaveTriggerEventHandle_org;
extern SaveTriggerEventHandle_FUNC SaveTriggerEventHandle_ptr;
extern BOOL _cdecl SaveTriggerEventHandle_my(HHASHTABLE table, int parentKey, int childKey, HEVENT Event);
extern SaveTriggerHandle_FUNC SaveTriggerHandle_org;
extern SaveTriggerHandle_FUNC SaveTriggerHandle_ptr;
extern BOOL _cdecl SaveTriggerHandle_my(HHASHTABLE table, int parentKey, int childKey, HTRIGGER Trigger);
extern SaveUbersplatHandle_FUNC SaveUbersplatHandle_org;
extern SaveUbersplatHandle_FUNC SaveUbersplatHandle_ptr;
extern BOOL _cdecl SaveUbersplatHandle_my(HHASHTABLE table, int parentKey, int childKey, HUBERSPLAT Ubersplat);
extern SaveUnitHandle_FUNC SaveUnitHandle_org;
extern SaveUnitHandle_FUNC SaveUnitHandle_ptr;
extern BOOL _cdecl SaveUnitHandle_my(HHASHTABLE table, int parentKey, int childKey, HUNIT unit);
extern SaveUnitPoolHandle_FUNC SaveUnitPoolHandle_org;
extern SaveUnitPoolHandle_FUNC SaveUnitPoolHandle_ptr;
extern BOOL _cdecl SaveUnitPoolHandle_my(HHASHTABLE table, int parentKey, int childKey, HUNITPOOL Unitpool);
extern SaveWidgetHandle_FUNC SaveWidgetHandle_org;
extern SaveWidgetHandle_FUNC SaveWidgetHandle_ptr;
extern BOOL _cdecl SaveWidgetHandle_my(HHASHTABLE table, int parentKey, int childKey, HWIDGET widget);
extern SelectHeroSkill_FUNC SelectHeroSkill_org;
extern SelectHeroSkill_FUNC SelectHeroSkill_ptr;
extern void _cdecl SelectHeroSkill_my(HUNIT hero, int abilcode);
extern SelectUnit_FUNC SelectUnit_org;
extern SelectUnit_FUNC SelectUnit_ptr;
extern void _cdecl SelectUnit_my(HUNIT unit, BOOL flag);
extern SetAllItemTypeSlots_FUNC SetAllItemTypeSlots_org;
extern SetAllItemTypeSlots_FUNC SetAllItemTypeSlots_ptr;
extern void _cdecl SetAllItemTypeSlots_my(int slots);
extern SetAllUnitTypeSlots_FUNC SetAllUnitTypeSlots_org;
extern SetAllUnitTypeSlots_FUNC SetAllUnitTypeSlots_ptr;
extern void _cdecl SetAllUnitTypeSlots_my(int slots);
extern SetAllianceTarget_FUNC SetAllianceTarget_org;
extern SetAllianceTarget_FUNC SetAllianceTarget_ptr;
extern void _cdecl SetAllianceTarget_my(HUNIT arg1);
extern SetAllyColorFilterState_FUNC SetAllyColorFilterState_org;
extern SetAllyColorFilterState_FUNC SetAllyColorFilterState_ptr;
extern void _cdecl SetAllyColorFilterState_my(int state);
extern SetAltMinimapIcon_FUNC SetAltMinimapIcon_org;
extern SetAltMinimapIcon_FUNC SetAltMinimapIcon_ptr;
extern void _cdecl SetAltMinimapIcon_my(CJassString iconPath);
extern SetAmphibious_FUNC SetAmphibious_org;
extern SetAmphibious_FUNC SetAmphibious_ptr;
extern void _cdecl SetAmphibious_my();
extern SetBlight_FUNC SetBlight_org;
extern SetBlight_FUNC SetBlight_ptr;
extern void _cdecl SetBlight_my(HPLAYER player, float *x, float *y, float *radius, BOOL addBlight);
extern SetBlightLoc_FUNC SetBlightLoc_org;
extern SetBlightLoc_FUNC SetBlightLoc_ptr;
extern void _cdecl SetBlightLoc_my(HPLAYER player, HLOCATION Location, float *radius, BOOL addBlight);
extern SetBlightPoint_FUNC SetBlightPoint_org;
extern SetBlightPoint_FUNC SetBlightPoint_ptr;
extern void _cdecl SetBlightPoint_my(HPLAYER player, float *x, float *y, BOOL addBlight);
extern SetBlightRect_FUNC SetBlightRect_org;
extern SetBlightRect_FUNC SetBlightRect_ptr;
extern void _cdecl SetBlightRect_my(HPLAYER player, HRECT r, BOOL addBlight);
extern SetCameraBounds_FUNC SetCameraBounds_org;
extern SetCameraBounds_FUNC SetCameraBounds_ptr;
extern void _cdecl SetCameraBounds_my(float *x1, float *y1, float *x2, float *y2, float *x3, float *y3, float *x4, float *y4);
extern SetCameraField_FUNC SetCameraField_org;
extern SetCameraField_FUNC SetCameraField_ptr;
extern void _cdecl SetCameraField_my(HCAMERAFIELD field, float *value, float *duration);
extern SetCameraOrientController_FUNC SetCameraOrientController_org;
extern SetCameraOrientController_FUNC SetCameraOrientController_ptr;
extern void _cdecl SetCameraOrientController_my(HUNIT unit, float *xoffset, float *yoffset);
extern SetCameraPosition_FUNC SetCameraPosition_org;
extern SetCameraPosition_FUNC SetCameraPosition_ptr;
extern void _cdecl SetCameraPosition_my(float *x, float *y);
extern SetCameraQuickPosition_FUNC SetCameraQuickPosition_org;
extern SetCameraQuickPosition_FUNC SetCameraQuickPosition_ptr;
extern void _cdecl SetCameraQuickPosition_my(float *x, float *y);
extern SetCameraRotateMode_FUNC SetCameraRotateMode_org;
extern SetCameraRotateMode_FUNC SetCameraRotateMode_ptr;
extern void _cdecl SetCameraRotateMode_my(float *x, float *y, float *radiansToSweep, float *duration);
extern SetCameraTargetController_FUNC SetCameraTargetController_org;
extern SetCameraTargetController_FUNC SetCameraTargetController_ptr;
extern void _cdecl SetCameraTargetController_my(HUNIT unit, float *xoffset, float *yoffset, BOOL inheritOrientation);
extern SetCampaignAI_FUNC SetCampaignAI_org;
extern SetCampaignAI_FUNC SetCampaignAI_ptr;
extern void _cdecl SetCampaignAI_my();
extern SetCampaignAvailable_FUNC SetCampaignAvailable_org;
extern SetCampaignAvailable_FUNC SetCampaignAvailable_ptr;
extern void _cdecl SetCampaignAvailable_my(int campaignNumber, BOOL available);
extern SetCampaignMenuRace_FUNC SetCampaignMenuRace_org;
extern SetCampaignMenuRace_FUNC SetCampaignMenuRace_ptr;
extern void _cdecl SetCampaignMenuRace_my(HRACE r);
extern SetCampaignMenuRaceEx_FUNC SetCampaignMenuRaceEx_org;
extern SetCampaignMenuRaceEx_FUNC SetCampaignMenuRaceEx_ptr;
extern void _cdecl SetCampaignMenuRaceEx_my(int campaignIndex);
extern SetCaptainChanges_FUNC SetCaptainChanges_org;
extern SetCaptainChanges_FUNC SetCaptainChanges_ptr;
extern void _cdecl SetCaptainChanges_my(BOOL arg1);
extern SetCaptainHome_FUNC SetCaptainHome_org;
extern SetCaptainHome_FUNC SetCaptainHome_ptr;
extern void _cdecl SetCaptainHome_my(int arg1, float *arg2, float *arg3);
extern SetCineFilterBlendMode_FUNC SetCineFilterBlendMode_org;
extern SetCineFilterBlendMode_FUNC SetCineFilterBlendMode_ptr;
extern void _cdecl SetCineFilterBlendMode_my(HBLENDMODE Mode);
extern SetCineFilterDuration_FUNC SetCineFilterDuration_org;
extern SetCineFilterDuration_FUNC SetCineFilterDuration_ptr;
extern void _cdecl SetCineFilterDuration_my(float *duration);
extern SetCineFilterEndColor_FUNC SetCineFilterEndColor_org;
extern SetCineFilterEndColor_FUNC SetCineFilterEndColor_ptr;
extern void _cdecl SetCineFilterEndColor_my(int red, int green, int blue, int alpha);
extern SetCineFilterEndUV_FUNC SetCineFilterEndUV_org;
extern SetCineFilterEndUV_FUNC SetCineFilterEndUV_ptr;
extern void _cdecl SetCineFilterEndUV_my(float *minu, float *minv, float *maxu, float *maxv);
extern SetCineFilterStartColor_FUNC SetCineFilterStartColor_org;
extern SetCineFilterStartColor_FUNC SetCineFilterStartColor_ptr;
extern void _cdecl SetCineFilterStartColor_my(int red, int green, int blue, int alpha);
extern SetCineFilterStartUV_FUNC SetCineFilterStartUV_org;
extern SetCineFilterStartUV_FUNC SetCineFilterStartUV_ptr;
extern void _cdecl SetCineFilterStartUV_my(float *minu, float *minv, float *maxu, float *maxv);
extern SetCineFilterTexMapFlags_FUNC SetCineFilterTexMapFlags_org;
extern SetCineFilterTexMapFlags_FUNC SetCineFilterTexMapFlags_ptr;
extern void _cdecl SetCineFilterTexMapFlags_my(HTEXMAPFLAGS Flags);
extern SetCineFilterTexture_FUNC SetCineFilterTexture_org;
extern SetCineFilterTexture_FUNC SetCineFilterTexture_ptr;
extern void _cdecl SetCineFilterTexture_my(CJassString filename);
extern SetCinematicCamera_FUNC SetCinematicCamera_org;
extern SetCinematicCamera_FUNC SetCinematicCamera_ptr;
extern void _cdecl SetCinematicCamera_my(CJassString cameraModelFile);
extern SetCinematicScene_FUNC SetCinematicScene_org;
extern SetCinematicScene_FUNC SetCinematicScene_ptr;
extern void _cdecl SetCinematicScene_my(int portraitUnitId, HPLAYERCOLOR color, CJassString speakerTitle, CJassString text, float *sceneDuration, float *voiceoverDuration);
extern SetCreatureDensity_FUNC SetCreatureDensity_org;
extern SetCreatureDensity_FUNC SetCreatureDensity_ptr;
extern void _cdecl SetCreatureDensity_my(HMAPDENSITY density);
extern SetCreepCampFilterState_FUNC SetCreepCampFilterState_org;
extern SetCreepCampFilterState_FUNC SetCreepCampFilterState_ptr;
extern void _cdecl SetCreepCampFilterState_my(BOOL state);
extern SetCustomCampaignButtonVisible_FUNC SetCustomCampaignButtonVisible_org;
extern SetCustomCampaignButtonVisible_FUNC SetCustomCampaignButtonVisible_ptr;
extern void _cdecl SetCustomCampaignButtonVisible_my(int Button, BOOL visible);
extern SetDayNightModels_FUNC SetDayNightModels_org;
extern SetDayNightModels_FUNC SetDayNightModels_ptr;
extern void _cdecl SetDayNightModels_my(CJassString terrainDNCFile, CJassString unitDNCFile);
extern SetDefaultDifficulty_FUNC SetDefaultDifficulty_org;
extern SetDefaultDifficulty_FUNC SetDefaultDifficulty_ptr;
extern void _cdecl SetDefaultDifficulty_my(HGAMEDIFFICULTY g);
extern SetDefendPlayer_FUNC SetDefendPlayer_org;
extern SetDefendPlayer_FUNC SetDefendPlayer_ptr;
extern void _cdecl SetDefendPlayer_my(BOOL arg1);
extern SetDestructableAnimation_FUNC SetDestructableAnimation_org;
extern SetDestructableAnimation_FUNC SetDestructableAnimation_ptr;
extern void _cdecl SetDestructableAnimation_my(HDESTRUCTABLE d, CJassString Animation);
extern SetDestructableAnimationSpeed_FUNC SetDestructableAnimationSpeed_org;
extern SetDestructableAnimationSpeed_FUNC SetDestructableAnimationSpeed_ptr;
extern void _cdecl SetDestructableAnimationSpeed_my(HDESTRUCTABLE d, float *speedFactor);
extern SetDestructableInvulnerable_FUNC SetDestructableInvulnerable_org;
extern SetDestructableInvulnerable_FUNC SetDestructableInvulnerable_ptr;
extern void _cdecl SetDestructableInvulnerable_my(HDESTRUCTABLE d, BOOL flag);
extern SetDestructableLife_FUNC SetDestructableLife_org;
extern SetDestructableLife_FUNC SetDestructableLife_ptr;
extern void _cdecl SetDestructableLife_my(HDESTRUCTABLE d, float *life);
extern SetDestructableMaxLife_FUNC SetDestructableMaxLife_org;
extern SetDestructableMaxLife_FUNC SetDestructableMaxLife_ptr;
extern void _cdecl SetDestructableMaxLife_my(HDESTRUCTABLE d, float *max);
extern SetDestructableOccluderHeight_FUNC SetDestructableOccluderHeight_org;
extern SetDestructableOccluderHeight_FUNC SetDestructableOccluderHeight_ptr;
extern void _cdecl SetDestructableOccluderHeight_my(HDESTRUCTABLE d, float *height);
extern SetDoodadAnimation_FUNC SetDoodadAnimation_org;
extern SetDoodadAnimation_FUNC SetDoodadAnimation_ptr;
extern void _cdecl SetDoodadAnimation_my(float *x, float *y, float *radius, int doodadID, BOOL nearestOnly, CJassString animName, BOOL animRandom);
extern SetDoodadAnimationRect_FUNC SetDoodadAnimationRect_org;
extern SetDoodadAnimationRect_FUNC SetDoodadAnimationRect_ptr;
extern void _cdecl SetDoodadAnimationRect_my(HRECT r, int doodadID, CJassString animName, BOOL animRandom);
extern SetEdCinematicAvailable_FUNC SetEdCinematicAvailable_org;
extern SetEdCinematicAvailable_FUNC SetEdCinematicAvailable_ptr;
extern void _cdecl SetEdCinematicAvailable_my(int campaignNumber, BOOL available);
extern SetExpansion_FUNC SetExpansion_org;
extern SetExpansion_FUNC SetExpansion_ptr;
extern BOOL _cdecl SetExpansion_my(HUNIT arg1, int arg2);
extern SetFloatGameState_FUNC SetFloatGameState_org;
extern SetFloatGameState_FUNC SetFloatGameState_ptr;
extern void _cdecl SetFloatGameState_my(HFGAMESTATE FloatGameState, float *value);
extern SetFogStateRadius_FUNC SetFogStateRadius_org;
extern SetFogStateRadius_FUNC SetFogStateRadius_ptr;
extern void _cdecl SetFogStateRadius_my(HPLAYER forWhichPlayer, HFOGSTATE State, float *centerx, float *centerY, float *radius, BOOL useSharedVision);
extern SetFogStateRadiusLoc_FUNC SetFogStateRadiusLoc_org;
extern SetFogStateRadiusLoc_FUNC SetFogStateRadiusLoc_ptr;
extern void _cdecl SetFogStateRadiusLoc_my(HPLAYER forWhichPlayer, HFOGSTATE State, HLOCATION center, float *radius, BOOL useSharedVision);
extern SetFogStateRect_FUNC SetFogStateRect_org;
extern SetFogStateRect_FUNC SetFogStateRect_ptr;
extern void _cdecl SetFogStateRect_my(HPLAYER forWhichPlayer, HFOGSTATE State, HRECT where, BOOL useSharedVision);
extern SetGameDifficulty_FUNC SetGameDifficulty_org;
extern SetGameDifficulty_FUNC SetGameDifficulty_ptr;
extern void _cdecl SetGameDifficulty_my(HGAMEDIFFICULTY difficulty);
extern SetGamePlacement_FUNC SetGamePlacement_org;
extern SetGamePlacement_FUNC SetGamePlacement_ptr;
extern void _cdecl SetGamePlacement_my(HPLACEMENT PlacementType);
extern SetGameSpeed_FUNC SetGameSpeed_org;
extern SetGameSpeed_FUNC SetGameSpeed_ptr;
extern void _cdecl SetGameSpeed_my(HGAMESPEED speed);
extern SetGameTypeSupported_FUNC SetGameTypeSupported_org;
extern SetGameTypeSupported_FUNC SetGameTypeSupported_ptr;
extern void _cdecl SetGameTypeSupported_my(HGAMETYPE GameType, BOOL value);
extern SetGroupsFlee_FUNC SetGroupsFlee_org;
extern SetGroupsFlee_FUNC SetGroupsFlee_ptr;
extern void _cdecl SetGroupsFlee_my(BOOL arg1);
extern SetHeroAgi_FUNC SetHeroAgi_org;
extern SetHeroAgi_FUNC SetHeroAgi_ptr;
extern void _cdecl SetHeroAgi_my(HUNIT hero, int newAgi, BOOL permanent);
extern SetHeroInt_FUNC SetHeroInt_org;
extern SetHeroInt_FUNC SetHeroInt_ptr;
extern void _cdecl SetHeroInt_my(HUNIT hero, int newInt, BOOL permanent);
extern SetHeroLevel_FUNC SetHeroLevel_org;
extern SetHeroLevel_FUNC SetHeroLevel_ptr;
extern void _cdecl SetHeroLevel_my(HUNIT hero, int level, BOOL showEyeCandy);
extern SetHeroLevels_FUNC SetHeroLevels_org;
extern SetHeroLevels_FUNC SetHeroLevels_ptr;
extern void _cdecl SetHeroLevels_my(CODE arg1);
extern SetHeroStr_FUNC SetHeroStr_org;
extern SetHeroStr_FUNC SetHeroStr_ptr;
extern void _cdecl SetHeroStr_my(HUNIT hero, int newStr, BOOL permanent);
extern SetHeroXP_FUNC SetHeroXP_org;
extern SetHeroXP_FUNC SetHeroXP_ptr;
extern void _cdecl SetHeroXP_my(HUNIT hero, int newXpVal, BOOL showEyeCandy);
extern SetHeroesBuyItems_FUNC SetHeroesBuyItems_org;
extern SetHeroesBuyItems_FUNC SetHeroesBuyItems_ptr;
extern void _cdecl SetHeroesBuyItems_my(BOOL arg1);
extern SetHeroesFlee_FUNC SetHeroesFlee_org;
extern SetHeroesFlee_FUNC SetHeroesFlee_ptr;
extern void _cdecl SetHeroesFlee_my(BOOL arg1);
extern SetHeroesTakeItems_FUNC SetHeroesTakeItems_org;
extern SetHeroesTakeItems_FUNC SetHeroesTakeItems_ptr;
extern void _cdecl SetHeroesTakeItems_my(BOOL arg1);
extern SetIgnoreInjured_FUNC SetIgnoreInjured_org;
extern SetIgnoreInjured_FUNC SetIgnoreInjured_ptr;
extern void _cdecl SetIgnoreInjured_my(BOOL arg1);
extern SetImageAboveWater_FUNC SetImageAboveWater_org;
extern SetImageAboveWater_FUNC SetImageAboveWater_ptr;
extern void _cdecl SetImageAboveWater_my(HIMAGE Image, BOOL flag, BOOL useWaterAlpha);
extern SetImageColor_FUNC SetImageColor_org;
extern SetImageColor_FUNC SetImageColor_ptr;
extern void _cdecl SetImageColor_my(HIMAGE Image, int red, int green, int blue, int alpha);
extern SetImageConstantHeight_FUNC SetImageConstantHeight_org;
extern SetImageConstantHeight_FUNC SetImageConstantHeight_ptr;
extern void _cdecl SetImageConstantHeight_my(HIMAGE Image, BOOL flag, float *height);
extern SetImagePosition_FUNC SetImagePosition_org;
extern SetImagePosition_FUNC SetImagePosition_ptr;
extern void _cdecl SetImagePosition_my(HIMAGE Image, float *x, float *y, float *z);
extern SetImageRender_FUNC SetImageRender_org;
extern SetImageRender_FUNC SetImageRender_ptr;
extern void _cdecl SetImageRender_my(HIMAGE Image, BOOL flag);
extern SetImageRenderAlways_FUNC SetImageRenderAlways_org;
extern SetImageRenderAlways_FUNC SetImageRenderAlways_ptr;
extern void _cdecl SetImageRenderAlways_my(HIMAGE Image, BOOL flag);
extern SetImageType_FUNC SetImageType_org;
extern SetImageType_FUNC SetImageType_ptr;
extern void _cdecl SetImageType_my(HIMAGE Image, int imageType);
extern SetIntegerGameState_FUNC SetIntegerGameState_org;
extern SetIntegerGameState_FUNC SetIntegerGameState_ptr;
extern void _cdecl SetIntegerGameState_my(HIGAMESTATE IntegerGameState, int value);
extern SetIntroShotModel_FUNC SetIntroShotModel_org;
extern SetIntroShotModel_FUNC SetIntroShotModel_ptr;
extern void _cdecl SetIntroShotModel_my(CJassString introModelPath);
extern SetIntroShotText_FUNC SetIntroShotText_org;
extern SetIntroShotText_FUNC SetIntroShotText_ptr;
extern void _cdecl SetIntroShotText_my(CJassString introText);
extern SetItemCharges_FUNC SetItemCharges_org;
extern SetItemCharges_FUNC SetItemCharges_ptr;
extern void _cdecl SetItemCharges_my(HITEM item, int charges);
extern SetItemDropID_FUNC SetItemDropID_org;
extern SetItemDropID_FUNC SetItemDropID_ptr;
extern void _cdecl SetItemDropID_my(HITEM item, int unitId);
extern SetItemDropOnDeath_FUNC SetItemDropOnDeath_org;
extern SetItemDropOnDeath_FUNC SetItemDropOnDeath_ptr;
extern void _cdecl SetItemDropOnDeath_my(HITEM item, BOOL flag);
extern SetItemDroppable_FUNC SetItemDroppable_org;
extern SetItemDroppable_FUNC SetItemDroppable_ptr;
extern void _cdecl SetItemDroppable_my(HITEM i, BOOL flag);
extern SetItemInvulnerable_FUNC SetItemInvulnerable_org;
extern SetItemInvulnerable_FUNC SetItemInvulnerable_ptr;
extern void _cdecl SetItemInvulnerable_my(HITEM item, BOOL flag);
extern SetItemPawnable_FUNC SetItemPawnable_org;
extern SetItemPawnable_FUNC SetItemPawnable_ptr;
extern void _cdecl SetItemPawnable_my(HITEM i, BOOL flag);
extern SetItemPlayer_FUNC SetItemPlayer_org;
extern SetItemPlayer_FUNC SetItemPlayer_ptr;
extern void _cdecl SetItemPlayer_my(HITEM item, HPLAYER player, BOOL changeColor);
extern SetItemPosition_FUNC SetItemPosition_org;
extern SetItemPosition_FUNC SetItemPosition_ptr;
extern void _cdecl SetItemPosition_my(HITEM i, float *x, float *y);
extern SetItemTypeSlots_FUNC SetItemTypeSlots_org;
extern SetItemTypeSlots_FUNC SetItemTypeSlots_ptr;
extern void _cdecl SetItemTypeSlots_my(HUNIT unit, int slots);
extern SetItemUserData_FUNC SetItemUserData_org;
extern SetItemUserData_FUNC SetItemUserData_ptr;
extern void _cdecl SetItemUserData_my(HITEM item, int data);
extern SetItemVisible_FUNC SetItemVisible_org;
extern SetItemVisible_FUNC SetItemVisible_ptr;
extern void _cdecl SetItemVisible_my(HITEM item, BOOL show);
extern SetLightningColor_FUNC SetLightningColor_org;
extern SetLightningColor_FUNC SetLightningColor_ptr;
extern BOOL _cdecl SetLightningColor_my(HLIGHTNING Bolt, float *r, float *g, float *b, float *a);
extern SetMapDescription_FUNC SetMapDescription_org;
extern SetMapDescription_FUNC SetMapDescription_ptr;
extern void _cdecl SetMapDescription_my(CJassString description);
extern SetMapFlag_FUNC SetMapFlag_org;
extern SetMapFlag_FUNC SetMapFlag_ptr;
extern void _cdecl SetMapFlag_my(HMAPFLAG MapFlag, BOOL value);
extern SetMapMusic_FUNC SetMapMusic_org;
extern SetMapMusic_FUNC SetMapMusic_ptr;
extern void _cdecl SetMapMusic_my(CJassString musicName, BOOL random, int index);
extern SetMapName_FUNC SetMapName_org;
extern SetMapName_FUNC SetMapName_ptr;
extern void _cdecl SetMapName_my(CJassString name);
extern SetMeleeAI_FUNC SetMeleeAI_org;
extern SetMeleeAI_FUNC SetMeleeAI_ptr;
extern void _cdecl SetMeleeAI_my();
extern SetMissionAvailable_FUNC SetMissionAvailable_org;
extern SetMissionAvailable_FUNC SetMissionAvailable_ptr;
extern void _cdecl SetMissionAvailable_my(int campaignNumber, int missionNumber, BOOL available);
extern SetMusicPlayPosition_FUNC SetMusicPlayPosition_org;
extern SetMusicPlayPosition_FUNC SetMusicPlayPosition_ptr;
extern void _cdecl SetMusicPlayPosition_my(int millisecs);
extern SetMusicVolume_FUNC SetMusicVolume_org;
extern SetMusicVolume_FUNC SetMusicVolume_ptr;
extern void _cdecl SetMusicVolume_my(int volume);
extern SetNewHeroes_FUNC SetNewHeroes_org;
extern SetNewHeroes_FUNC SetNewHeroes_ptr;
extern void _cdecl SetNewHeroes_my(BOOL arg1);
extern SetOpCinematicAvailable_FUNC SetOpCinematicAvailable_org;
extern SetOpCinematicAvailable_FUNC SetOpCinematicAvailable_ptr;
extern void _cdecl SetOpCinematicAvailable_my(int campaignNumber, BOOL available);
extern SetPeonsRepair_FUNC SetPeonsRepair_org;
extern SetPeonsRepair_FUNC SetPeonsRepair_ptr;
extern void _cdecl SetPeonsRepair_my(BOOL arg1);
extern SetPlayerAbilityAvailable_FUNC SetPlayerAbilityAvailable_org;
extern SetPlayerAbilityAvailable_FUNC SetPlayerAbilityAvailable_ptr;
extern void _cdecl SetPlayerAbilityAvailable_my(HPLAYER player, int abilid, BOOL avail);
extern SetPlayerAlliance_FUNC SetPlayerAlliance_org;
extern SetPlayerAlliance_FUNC SetPlayerAlliance_ptr;
extern void _cdecl SetPlayerAlliance_my(HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE AllianceSetting, BOOL value);
extern SetPlayerColor_FUNC SetPlayerColor_org;
extern SetPlayerColor_FUNC SetPlayerColor_ptr;
extern void _cdecl SetPlayerColor_my(HPLAYER player, HPLAYERCOLOR color);
extern SetPlayerController_FUNC SetPlayerController_org;
extern SetPlayerController_FUNC SetPlayerController_ptr;
extern void _cdecl SetPlayerController_my(HPLAYER player, HMAPCONTROL controlType);
extern SetPlayerHandicap_FUNC SetPlayerHandicap_org;
extern SetPlayerHandicap_FUNC SetPlayerHandicap_ptr;
extern void _cdecl SetPlayerHandicap_my(HPLAYER player, float *handicap);
extern SetPlayerHandicapXP_FUNC SetPlayerHandicapXP_org;
extern SetPlayerHandicapXP_FUNC SetPlayerHandicapXP_ptr;
extern void _cdecl SetPlayerHandicapXP_my(HPLAYER player, float *handicap);
extern SetPlayerName_FUNC SetPlayerName_org;
extern SetPlayerName_FUNC SetPlayerName_ptr;
extern void _cdecl SetPlayerName_my(HPLAYER player, CJassString name);
extern SetPlayerOnScoreScreen_FUNC SetPlayerOnScoreScreen_org;
extern SetPlayerOnScoreScreen_FUNC SetPlayerOnScoreScreen_ptr;
extern void _cdecl SetPlayerOnScoreScreen_my(HPLAYER player, BOOL flag);
extern SetPlayerRacePreference_FUNC SetPlayerRacePreference_org;
extern SetPlayerRacePreference_FUNC SetPlayerRacePreference_ptr;
extern void _cdecl SetPlayerRacePreference_my(HPLAYER player, HRACEPREFERENCE RacePreference);
extern SetPlayerRaceSelectable_FUNC SetPlayerRaceSelectable_org;
extern SetPlayerRaceSelectable_FUNC SetPlayerRaceSelectable_ptr;
extern void _cdecl SetPlayerRaceSelectable_my(HPLAYER player, BOOL value);
extern SetPlayerStartLocation_FUNC SetPlayerStartLocation_org;
extern SetPlayerStartLocation_FUNC SetPlayerStartLocation_ptr;
extern void _cdecl SetPlayerStartLocation_my(HPLAYER player, int startLocIndex);
extern SetPlayerState_FUNC SetPlayerState_org;
extern SetPlayerState_FUNC SetPlayerState_ptr;
extern void _cdecl SetPlayerState_my(HPLAYER player, HPLAYERSTATE PlayerState, int value);
extern SetPlayerTaxRate_FUNC SetPlayerTaxRate_org;
extern SetPlayerTaxRate_FUNC SetPlayerTaxRate_ptr;
extern void _cdecl SetPlayerTaxRate_my(HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE Resource, int rate);
extern SetPlayerTeam_FUNC SetPlayerTeam_org;
extern SetPlayerTeam_FUNC SetPlayerTeam_ptr;
extern void _cdecl SetPlayerTeam_my(HPLAYER player, int Team);
extern SetPlayerTechMaxAllowed_FUNC SetPlayerTechMaxAllowed_org;
extern SetPlayerTechMaxAllowed_FUNC SetPlayerTechMaxAllowed_ptr;
extern void _cdecl SetPlayerTechMaxAllowed_my(HPLAYER player, int techid, int maximum);
extern SetPlayerTechResearched_FUNC SetPlayerTechResearched_org;
extern SetPlayerTechResearched_FUNC SetPlayerTechResearched_ptr;
extern void _cdecl SetPlayerTechResearched_my(HPLAYER player, int techid, int setToLevel);
extern SetPlayerUnitsOwner_FUNC SetPlayerUnitsOwner_org;
extern SetPlayerUnitsOwner_FUNC SetPlayerUnitsOwner_ptr;
extern void _cdecl SetPlayerUnitsOwner_my(HPLAYER player, int newOwner);
extern SetPlayers_FUNC SetPlayers_org;
extern SetPlayers_FUNC SetPlayers_ptr;
extern void _cdecl SetPlayers_my(int playercount);
extern SetProduce_FUNC SetProduce_org;
extern SetProduce_FUNC SetProduce_ptr;
extern BOOL _cdecl SetProduce_my(int arg1, int arg2, int arg3);
extern SetRandomPaths_FUNC SetRandomPaths_org;
extern SetRandomPaths_FUNC SetRandomPaths_ptr;
extern void _cdecl SetRandomPaths_my(BOOL arg1);
extern SetRandomSeed_FUNC SetRandomSeed_org;
extern SetRandomSeed_FUNC SetRandomSeed_ptr;
extern void _cdecl SetRandomSeed_my(int seed);
extern SetRect_FUNC SetRect_org;
extern SetRect_FUNC SetRect_ptr;
extern void _cdecl SetRect_my(HRECT Rect, float *minx, float *miny, float *maxx, float *maxy);
extern SetRectFromLoc_FUNC SetRectFromLoc_org;
extern SetRectFromLoc_FUNC SetRectFromLoc_ptr;
extern void _cdecl SetRectFromLoc_my(HRECT Rect, HLOCATION min, HLOCATION max);
extern SetReplacementCount_FUNC SetReplacementCount_org;
extern SetReplacementCount_FUNC SetReplacementCount_ptr;
extern void _cdecl SetReplacementCount_my(int arg1);
extern SetReservedLocalHeroButtons_FUNC SetReservedLocalHeroButtons_org;
extern SetReservedLocalHeroButtons_FUNC SetReservedLocalHeroButtons_ptr;
extern void _cdecl SetReservedLocalHeroButtons_my(int reserved);
extern SetResourceAmount_FUNC SetResourceAmount_org;
extern SetResourceAmount_FUNC SetResourceAmount_ptr;
extern void _cdecl SetResourceAmount_my(HUNIT unit, int amount);
extern SetResourceDensity_FUNC SetResourceDensity_org;
extern SetResourceDensity_FUNC SetResourceDensity_ptr;
extern void _cdecl SetResourceDensity_my(HMAPDENSITY density);
extern SetSkyModel_FUNC SetSkyModel_org;
extern SetSkyModel_FUNC SetSkyModel_ptr;
extern void _cdecl SetSkyModel_my(CJassString skyModelFile);
extern SetSlowChopping_FUNC SetSlowChopping_org;
extern SetSlowChopping_FUNC SetSlowChopping_ptr;
extern void _cdecl SetSlowChopping_my(BOOL arg1);
extern SetSmartArtillery_FUNC SetSmartArtillery_org;
extern SetSmartArtillery_FUNC SetSmartArtillery_ptr;
extern void _cdecl SetSmartArtillery_my(BOOL arg1);
extern SetSoundChannel_FUNC SetSoundChannel_org;
extern SetSoundChannel_FUNC SetSoundChannel_ptr;
extern void _cdecl SetSoundChannel_my(HSOUND soundHandle, int channel);
extern SetSoundConeAngles_FUNC SetSoundConeAngles_org;
extern SetSoundConeAngles_FUNC SetSoundConeAngles_ptr;
extern void _cdecl SetSoundConeAngles_my(HSOUND soundHandle, float *inside, float *outside, int outsideVolume);
extern SetSoundConeOrientation_FUNC SetSoundConeOrientation_org;
extern SetSoundConeOrientation_FUNC SetSoundConeOrientation_ptr;
extern void _cdecl SetSoundConeOrientation_my(HSOUND soundHandle, float *x, float *y, float *z);
extern SetSoundDistanceCutoff_FUNC SetSoundDistanceCutoff_org;
extern SetSoundDistanceCutoff_FUNC SetSoundDistanceCutoff_ptr;
extern void _cdecl SetSoundDistanceCutoff_my(HSOUND soundHandle, float *cutoff);
extern SetSoundDistances_FUNC SetSoundDistances_org;
extern SetSoundDistances_FUNC SetSoundDistances_ptr;
extern void _cdecl SetSoundDistances_my(HSOUND soundHandle, float *minDist, float *maxDist);
extern SetSoundDuration_FUNC SetSoundDuration_org;
extern SetSoundDuration_FUNC SetSoundDuration_ptr;
extern void _cdecl SetSoundDuration_my(HSOUND soundHandle, int duration);
extern SetSoundParamsFromLabel_FUNC SetSoundParamsFromLabel_org;
extern SetSoundParamsFromLabel_FUNC SetSoundParamsFromLabel_ptr;
extern void _cdecl SetSoundParamsFromLabel_my(HSOUND soundHandle, CJassString soundLabel);
extern SetSoundPitch_FUNC SetSoundPitch_org;
extern SetSoundPitch_FUNC SetSoundPitch_ptr;
extern void _cdecl SetSoundPitch_my(HSOUND soundHandle, float *pitch);
extern SetSoundPlayPosition_FUNC SetSoundPlayPosition_org;
extern SetSoundPlayPosition_FUNC SetSoundPlayPosition_ptr;
extern void _cdecl SetSoundPlayPosition_my(HSOUND soundHandle, int millisecs);
extern SetSoundPosition_FUNC SetSoundPosition_org;
extern SetSoundPosition_FUNC SetSoundPosition_ptr;
extern void _cdecl SetSoundPosition_my(HSOUND soundHandle, float *x, float *y, float *z);
extern SetSoundVelocity_FUNC SetSoundVelocity_org;
extern SetSoundVelocity_FUNC SetSoundVelocity_ptr;
extern void _cdecl SetSoundVelocity_my(HSOUND soundHandle, float *x, float *y, float *z);
extern SetSoundVolume_FUNC SetSoundVolume_org;
extern SetSoundVolume_FUNC SetSoundVolume_ptr;
extern void _cdecl SetSoundVolume_my(HSOUND soundHandle, int volume);
extern SetStackedSound_FUNC SetStackedSound_org;
extern SetStackedSound_FUNC SetStackedSound_ptr;
extern void _cdecl SetStackedSound_my(CJassString arg1, float *arg2, float *arg3);
extern SetStackedSoundRect_FUNC SetStackedSoundRect_org;
extern SetStackedSoundRect_FUNC SetStackedSoundRect_ptr;
extern void _cdecl SetStackedSoundRect_my(CJassString arg1, HRECT arg2);
extern SetStagePoint_FUNC SetStagePoint_org;
extern SetStagePoint_FUNC SetStagePoint_ptr;
extern void _cdecl SetStagePoint_my(float *arg1, float *arg2);
extern SetStartLocPrio_FUNC SetStartLocPrio_org;
extern SetStartLocPrio_FUNC SetStartLocPrio_ptr;
extern void _cdecl SetStartLocPrio_my(int StartLoc, int prioSlotIndex, int otherStartLocIndex, HSTARTLOCPRIO priority);
extern SetStartLocPrioCount_FUNC SetStartLocPrioCount_org;
extern SetStartLocPrioCount_FUNC SetStartLocPrioCount_ptr;
extern void _cdecl SetStartLocPrioCount_my(int StartLoc, int prioSlotCount);
extern SetTargetHeroes_FUNC SetTargetHeroes_org;
extern SetTargetHeroes_FUNC SetTargetHeroes_ptr;
extern void _cdecl SetTargetHeroes_my(BOOL arg1);
extern SetTeams_FUNC SetTeams_org;
extern SetTeams_FUNC SetTeams_ptr;
extern void _cdecl SetTeams_my(int teamcount);
extern SetTerrainFog_FUNC SetTerrainFog_org;
extern SetTerrainFog_FUNC SetTerrainFog_ptr;
extern void _cdecl SetTerrainFog_my(float *a, float *b, float *c, float *d, float *e);
extern SetTerrainFogEx_FUNC SetTerrainFogEx_org;
extern SetTerrainFogEx_FUNC SetTerrainFogEx_ptr;
extern void _cdecl SetTerrainFogEx_my(int style, float *zstart, float *zend, float *density, float *red, float *green, float *blue);
extern SetTerrainPathable_FUNC SetTerrainPathable_org;
extern SetTerrainPathable_FUNC SetTerrainPathable_ptr;
extern void _cdecl SetTerrainPathable_my(float *x, float *y, HPATHINGTYPE t, BOOL flag);
extern SetTerrainType_FUNC SetTerrainType_org;
extern SetTerrainType_FUNC SetTerrainType_ptr;
extern void _cdecl SetTerrainType_my(float *x, float *y, int terrainType, int variation, int area, int shape);
extern SetTextTagAge_FUNC SetTextTagAge_org;
extern SetTextTagAge_FUNC SetTextTagAge_ptr;
extern void _cdecl SetTextTagAge_my(HTEXTTAG t, float *age);
extern SetTextTagColor_FUNC SetTextTagColor_org;
extern SetTextTagColor_FUNC SetTextTagColor_ptr;
extern void _cdecl SetTextTagColor_my(HTEXTTAG t, int red, int green, int blue, int alpha);
extern SetTextTagFadepoint_FUNC SetTextTagFadepoint_org;
extern SetTextTagFadepoint_FUNC SetTextTagFadepoint_ptr;
extern void _cdecl SetTextTagFadepoint_my(HTEXTTAG t, float *fadepoint);
extern SetTextTagLifespan_FUNC SetTextTagLifespan_org;
extern SetTextTagLifespan_FUNC SetTextTagLifespan_ptr;
extern void _cdecl SetTextTagLifespan_my(HTEXTTAG t, float *lifespan);
extern SetTextTagPermanent_FUNC SetTextTagPermanent_org;
extern SetTextTagPermanent_FUNC SetTextTagPermanent_ptr;
extern void _cdecl SetTextTagPermanent_my(HTEXTTAG t, BOOL flag);
extern SetTextTagPos_FUNC SetTextTagPos_org;
extern SetTextTagPos_FUNC SetTextTagPos_ptr;
extern void _cdecl SetTextTagPos_my(HTEXTTAG t, float *x, float *y, float *heightOffset);
extern SetTextTagPosUnit_FUNC SetTextTagPosUnit_org;
extern SetTextTagPosUnit_FUNC SetTextTagPosUnit_ptr;
extern void _cdecl SetTextTagPosUnit_my(HTEXTTAG t, HUNIT unit, float *heightOffset);
extern SetTextTagSuspended_FUNC SetTextTagSuspended_org;
extern SetTextTagSuspended_FUNC SetTextTagSuspended_ptr;
extern void _cdecl SetTextTagSuspended_my(HTEXTTAG t, BOOL flag);
extern SetTextTagText_FUNC SetTextTagText_org;
extern SetTextTagText_FUNC SetTextTagText_ptr;
extern void _cdecl SetTextTagText_my(HTEXTTAG t, CJassString s, float *height);
extern SetTextTagVelocity_FUNC SetTextTagVelocity_org;
extern SetTextTagVelocity_FUNC SetTextTagVelocity_ptr;
extern void _cdecl SetTextTagVelocity_my(HTEXTTAG t, float *xvel, float *yvel);
extern SetTextTagVisibility_FUNC SetTextTagVisibility_org;
extern SetTextTagVisibility_FUNC SetTextTagVisibility_ptr;
extern void _cdecl SetTextTagVisibility_my(HTEXTTAG t, BOOL flag);
extern SetThematicMusicPlayPosition_FUNC SetThematicMusicPlayPosition_org;
extern SetThematicMusicPlayPosition_FUNC SetThematicMusicPlayPosition_ptr;
extern void _cdecl SetThematicMusicPlayPosition_my(int millisecs);
extern SetTimeOfDayScale_FUNC SetTimeOfDayScale_org;
extern SetTimeOfDayScale_FUNC SetTimeOfDayScale_ptr;
extern void _cdecl SetTimeOfDayScale_my(float *r);
extern SetTutorialCleared_FUNC SetTutorialCleared_org;
extern SetTutorialCleared_FUNC SetTutorialCleared_ptr;
extern void _cdecl SetTutorialCleared_my(BOOL cleared);
extern SetUbersplatRender_FUNC SetUbersplatRender_org;
extern SetUbersplatRender_FUNC SetUbersplatRender_ptr;
extern void _cdecl SetUbersplatRender_my(HUBERSPLAT Splat, BOOL flag);
extern SetUbersplatRenderAlways_FUNC SetUbersplatRenderAlways_org;
extern SetUbersplatRenderAlways_FUNC SetUbersplatRenderAlways_ptr;
extern void _cdecl SetUbersplatRenderAlways_my(HUBERSPLAT Splat, BOOL flag);
extern SetUnitAbilityLevel_FUNC SetUnitAbilityLevel_org;
extern SetUnitAbilityLevel_FUNC SetUnitAbilityLevel_ptr;
extern int _cdecl SetUnitAbilityLevel_my(HUNIT unit, int abilcode, int level);
extern SetUnitAcquireRange_FUNC SetUnitAcquireRange_org;
extern SetUnitAcquireRange_FUNC SetUnitAcquireRange_ptr;
extern void _cdecl SetUnitAcquireRange_my(HUNIT unit, float *newAcquireRange);
extern SetUnitAnimation_FUNC SetUnitAnimation_org;
extern SetUnitAnimation_FUNC SetUnitAnimation_ptr;
extern void _cdecl SetUnitAnimation_my(HUNIT unit, CJassString Animation);
extern SetUnitAnimationByIndex_FUNC SetUnitAnimationByIndex_org;
extern SetUnitAnimationByIndex_FUNC SetUnitAnimationByIndex_ptr;
extern void _cdecl SetUnitAnimationByIndex_my(HUNIT unit, int Animation);
extern SetUnitAnimationWithRarity_FUNC SetUnitAnimationWithRarity_org;
extern SetUnitAnimationWithRarity_FUNC SetUnitAnimationWithRarity_ptr;
extern void _cdecl SetUnitAnimationWithRarity_my(HUNIT unit, CJassString Animation, HRARITYCONTROL rarity);
extern SetUnitBlendTime_FUNC SetUnitBlendTime_org;
extern SetUnitBlendTime_FUNC SetUnitBlendTime_ptr;
extern void _cdecl SetUnitBlendTime_my(HUNIT unit, float *blendTime);
extern SetUnitColor_FUNC SetUnitColor_org;
extern SetUnitColor_FUNC SetUnitColor_ptr;
extern void _cdecl SetUnitColor_my(HUNIT unit, HPLAYERCOLOR Color);
extern SetUnitCreepGuard_FUNC SetUnitCreepGuard_org;
extern SetUnitCreepGuard_FUNC SetUnitCreepGuard_ptr;
extern void _cdecl SetUnitCreepGuard_my(HUNIT unit, BOOL creepGuard);
extern SetUnitExploded_FUNC SetUnitExploded_org;
extern SetUnitExploded_FUNC SetUnitExploded_ptr;
extern void _cdecl SetUnitExploded_my(HUNIT unit, BOOL exploded);
extern SetUnitFacing_FUNC SetUnitFacing_org;
extern SetUnitFacing_FUNC SetUnitFacing_ptr;
extern void _cdecl SetUnitFacing_my(HUNIT unit, float *facingAngle);
extern SetUnitFacingTimed_FUNC SetUnitFacingTimed_org;
extern SetUnitFacingTimed_FUNC SetUnitFacingTimed_ptr;
extern void _cdecl SetUnitFacingTimed_my(HUNIT unit, float *facingAngle, float *duration);
extern SetUnitFlyHeight_FUNC SetUnitFlyHeight_org;
extern SetUnitFlyHeight_FUNC SetUnitFlyHeight_ptr;
extern void _cdecl SetUnitFlyHeight_my(HUNIT unit, float *newHeight, float *rate);
extern SetUnitFog_FUNC SetUnitFog_org;
extern SetUnitFog_FUNC SetUnitFog_ptr;
extern void _cdecl SetUnitFog_my(float *a, float *b, float *c, float *d, float *e);
extern SetUnitInvulnerable_FUNC SetUnitInvulnerable_org;
extern SetUnitInvulnerable_FUNC SetUnitInvulnerable_ptr;
extern void _cdecl SetUnitInvulnerable_my(HUNIT unit, BOOL flag);
extern SetUnitLookAt_FUNC SetUnitLookAt_org;
extern SetUnitLookAt_FUNC SetUnitLookAt_ptr;
extern void _cdecl SetUnitLookAt_my(HUNIT unit, CJassString Bone, HUNIT lookAtTarget, float *offsetX, float *offsetY, float *offsetZ);
extern SetUnitMoveSpeed_FUNC SetUnitMoveSpeed_org;
extern SetUnitMoveSpeed_FUNC SetUnitMoveSpeed_ptr;
extern void _cdecl SetUnitMoveSpeed_my(HUNIT unit, float *newSpeed);
extern SetUnitOwner_FUNC SetUnitOwner_org;
extern SetUnitOwner_FUNC SetUnitOwner_ptr;
extern void _cdecl SetUnitOwner_my(HUNIT unit, HPLAYER player, BOOL changeColor);
extern SetUnitPathing_FUNC SetUnitPathing_org;
extern SetUnitPathing_FUNC SetUnitPathing_ptr;
extern void _cdecl SetUnitPathing_my(HUNIT unit, BOOL flag);
extern SetUnitPosition_FUNC SetUnitPosition_org;
extern SetUnitPosition_FUNC SetUnitPosition_ptr;
extern void _cdecl SetUnitPosition_my(HUNIT unit, float *newX, float *newY);
extern SetUnitPositionLoc_FUNC SetUnitPositionLoc_org;
extern SetUnitPositionLoc_FUNC SetUnitPositionLoc_ptr;
extern void _cdecl SetUnitPositionLoc_my(HUNIT unit, HLOCATION Location);
extern SetUnitPropWindow_FUNC SetUnitPropWindow_org;
extern SetUnitPropWindow_FUNC SetUnitPropWindow_ptr;
extern void _cdecl SetUnitPropWindow_my(HUNIT unit, float *newPropWindowAngle);
extern SetUnitRescuable_FUNC SetUnitRescuable_org;
extern SetUnitRescuable_FUNC SetUnitRescuable_ptr;
extern void _cdecl SetUnitRescuable_my(HUNIT unit, HPLAYER byWhichPlayer, BOOL flag);
extern SetUnitRescueRange_FUNC SetUnitRescueRange_org;
extern SetUnitRescueRange_FUNC SetUnitRescueRange_ptr;
extern void _cdecl SetUnitRescueRange_my(HUNIT unit, float *range);
extern SetUnitScale_FUNC SetUnitScale_org;
extern SetUnitScale_FUNC SetUnitScale_ptr;
extern void _cdecl SetUnitScale_my(HUNIT unit, float *scaleX, float *scaleY, float *scaleZ);
extern SetUnitState_FUNC SetUnitState_org;
extern SetUnitState_FUNC SetUnitState_ptr;
extern void _cdecl SetUnitState_my(HUNIT unit, HUNITSTATE UnitState, float *newVal);
extern SetUnitTimeScale_FUNC SetUnitTimeScale_org;
extern SetUnitTimeScale_FUNC SetUnitTimeScale_ptr;
extern void _cdecl SetUnitTimeScale_my(HUNIT unit, float *timeScale);
extern SetUnitTurnSpeed_FUNC SetUnitTurnSpeed_org;
extern SetUnitTurnSpeed_FUNC SetUnitTurnSpeed_ptr;
extern void _cdecl SetUnitTurnSpeed_my(HUNIT unit, float *newTurnSpeed);
extern SetUnitTypeSlots_FUNC SetUnitTypeSlots_org;
extern SetUnitTypeSlots_FUNC SetUnitTypeSlots_ptr;
extern void _cdecl SetUnitTypeSlots_my(HUNIT unit, int slots);
extern SetUnitUseFood_FUNC SetUnitUseFood_org;
extern SetUnitUseFood_FUNC SetUnitUseFood_ptr;
extern void _cdecl SetUnitUseFood_my(HUNIT unit, BOOL useFood);
extern SetUnitUserData_FUNC SetUnitUserData_org;
extern SetUnitUserData_FUNC SetUnitUserData_ptr;
extern void _cdecl SetUnitUserData_my(HUNIT unit, int data);
extern SetUnitVertexColor_FUNC SetUnitVertexColor_org;
extern SetUnitVertexColor_FUNC SetUnitVertexColor_ptr;
extern void _cdecl SetUnitVertexColor_my(HUNIT unit, int red, int green, int blue, int alpha);
extern SetUnitX_FUNC SetUnitX_org;
extern SetUnitX_FUNC SetUnitX_ptr;
extern void _cdecl SetUnitX_my(HUNIT unit, float *newX);
extern SetUnitY_FUNC SetUnitY_org;
extern SetUnitY_FUNC SetUnitY_ptr;
extern void _cdecl SetUnitY_my(HUNIT unit, float *newY);
extern SetUnitsFlee_FUNC SetUnitsFlee_org;
extern SetUnitsFlee_FUNC SetUnitsFlee_ptr;
extern void _cdecl SetUnitsFlee_my(BOOL arg1);
extern SetUpgrade_FUNC SetUpgrade_org;
extern SetUpgrade_FUNC SetUpgrade_ptr;
extern BOOL _cdecl SetUpgrade_my(int arg1);
extern SetWatchMegaTargets_FUNC SetWatchMegaTargets_org;
extern SetWatchMegaTargets_FUNC SetWatchMegaTargets_ptr;
extern void _cdecl SetWatchMegaTargets_my(BOOL arg1);
extern SetWaterBaseColor_FUNC SetWaterBaseColor_org;
extern SetWaterBaseColor_FUNC SetWaterBaseColor_ptr;
extern void _cdecl SetWaterBaseColor_my(int red, int green, int blue, int alpha);
extern SetWaterDeforms_FUNC SetWaterDeforms_org;
extern SetWaterDeforms_FUNC SetWaterDeforms_ptr;
extern void _cdecl SetWaterDeforms_my(BOOL val);
extern SetWidgetLife_FUNC SetWidgetLife_org;
extern SetWidgetLife_FUNC SetWidgetLife_ptr;
extern void _cdecl SetWidgetLife_my(HWIDGET widget, float *newLife);
extern ShiftTownSpot_FUNC ShiftTownSpot_org;
extern ShiftTownSpot_FUNC ShiftTownSpot_ptr;
extern void _cdecl ShiftTownSpot_my(float *arg1, float *arg2);
extern ShowDestructable_FUNC ShowDestructable_org;
extern ShowDestructable_FUNC ShowDestructable_ptr;
extern void _cdecl ShowDestructable_my(HDESTRUCTABLE d, BOOL flag);
extern ShowImage_FUNC ShowImage_org;
extern ShowImage_FUNC ShowImage_ptr;
extern void _cdecl ShowImage_my(HIMAGE Image, BOOL flag);
extern ShowInterface_FUNC ShowInterface_org;
extern ShowInterface_FUNC ShowInterface_ptr;
extern void _cdecl ShowInterface_my(BOOL flag, float *fadeDuration);
extern ShowUbersplat_FUNC ShowUbersplat_org;
extern ShowUbersplat_FUNC ShowUbersplat_ptr;
extern void _cdecl ShowUbersplat_my(HUBERSPLAT Splat, BOOL flag);
extern ShowUnit_FUNC ShowUnit_org;
extern ShowUnit_FUNC ShowUnit_ptr;
extern void _cdecl ShowUnit_my(HUNIT unit, BOOL show);
extern Sin_FUNC Sin_org;
extern Sin_FUNC Sin_ptr;
extern DWFP _cdecl Sin_my(float *radians);
extern Sleep_FUNC Sleep_org;
extern Sleep_FUNC Sleep_ptr;
extern void _cdecl Sleep_my(float *arg1);
extern SquareRoot_FUNC SquareRoot_org;
extern SquareRoot_FUNC SquareRoot_ptr;
extern DWFP _cdecl SquareRoot_my(float *x);
extern StartCampaignAI_FUNC StartCampaignAI_org;
extern StartCampaignAI_FUNC StartCampaignAI_ptr;
extern void _cdecl StartCampaignAI_my(HPLAYER num, CJassString script);
extern StartGetEnemyBase_FUNC StartGetEnemyBase_org;
extern StartGetEnemyBase_FUNC StartGetEnemyBase_ptr;
extern void _cdecl StartGetEnemyBase_my();
extern StartMeleeAI_FUNC StartMeleeAI_org;
extern StartMeleeAI_FUNC StartMeleeAI_ptr;
extern void _cdecl StartMeleeAI_my(HPLAYER num, CJassString script);
extern StartSound_FUNC StartSound_org;
extern StartSound_FUNC StartSound_ptr;
extern void _cdecl StartSound_my(HSOUND soundHandle);
extern StartThread_FUNC StartThread_org;
extern StartThread_FUNC StartThread_ptr;
extern void _cdecl StartThread_my(CODE arg1);
extern StopCamera_FUNC StopCamera_org;
extern StopCamera_FUNC StopCamera_ptr;
extern void _cdecl StopCamera_my();
extern StopGathering_FUNC StopGathering_org;
extern StopGathering_FUNC StopGathering_ptr;
extern void _cdecl StopGathering_my();
extern StopMusic_FUNC StopMusic_org;
extern StopMusic_FUNC StopMusic_ptr;
extern void _cdecl StopMusic_my(BOOL fadeOut);
extern StopSound_FUNC StopSound_org;
extern StopSound_FUNC StopSound_ptr;
extern void _cdecl StopSound_my(HSOUND soundHandle, BOOL killWhenDone, BOOL fadeOut);
extern StoreBoolean_FUNC StoreBoolean_org;
extern StoreBoolean_FUNC StoreBoolean_ptr;
extern void _cdecl StoreBoolean_my(HGAMECACHE cache, CJassString missionKey, CJassString key, BOOL value);
extern StoreInteger_FUNC StoreInteger_org;
extern StoreInteger_FUNC StoreInteger_ptr;
extern void _cdecl StoreInteger_my(HGAMECACHE cache, CJassString missionKey, CJassString key, int value);
extern StoreReal_FUNC StoreReal_org;
extern StoreReal_FUNC StoreReal_ptr;
extern void _cdecl StoreReal_my(HGAMECACHE cache, CJassString missionKey, CJassString key, float *value);
extern StoreString_FUNC StoreString_org;
extern StoreString_FUNC StoreString_ptr;
extern BOOL _cdecl StoreString_my(HGAMECACHE cache, CJassString missionKey, CJassString key, CJassString value);
extern StoreUnit_FUNC StoreUnit_org;
extern StoreUnit_FUNC StoreUnit_ptr;
extern BOOL _cdecl StoreUnit_my(HGAMECACHE cache, CJassString missionKey, CJassString key, HUNIT unit);
extern StringCase_FUNC StringCase_org;
extern StringCase_FUNC StringCase_ptr;
extern CJassStringSID _cdecl StringCase_my(CJassString source, BOOL upper);
extern StringHash_FUNC StringHash_org;
extern StringHash_FUNC StringHash_ptr;
extern int _cdecl StringHash_my(CJassString s);
extern StringLength_FUNC StringLength_org;
extern StringLength_FUNC StringLength_ptr;
extern int _cdecl StringLength_my(CJassString s);
extern SubString_FUNC SubString_org;
extern SubString_FUNC SubString_ptr;
extern CJassStringSID _cdecl SubString_my(CJassString source, int start, int end);
extern SuicidePlayer_FUNC SuicidePlayer_org;
extern SuicidePlayer_FUNC SuicidePlayer_ptr;
extern BOOL _cdecl SuicidePlayer_my(HPLAYER arg1, BOOL arg2);
extern SuicidePlayerUnits_FUNC SuicidePlayerUnits_org;
extern SuicidePlayerUnits_FUNC SuicidePlayerUnits_ptr;
extern BOOL _cdecl SuicidePlayerUnits_my(HPLAYER arg1, BOOL arg2);
extern SuicideUnit_FUNC SuicideUnit_org;
extern SuicideUnit_FUNC SuicideUnit_ptr;
extern void _cdecl SuicideUnit_my(int arg1, int arg2);
extern SuicideUnitEx_FUNC SuicideUnitEx_org;
extern SuicideUnitEx_FUNC SuicideUnitEx_ptr;
extern void _cdecl SuicideUnitEx_my(int arg1, int arg2, int arg3);
extern SuspendHeroXP_FUNC SuspendHeroXP_org;
extern SuspendHeroXP_FUNC SuspendHeroXP_ptr;
extern void _cdecl SuspendHeroXP_my(HUNIT hero, BOOL flag);
extern SuspendTimeOfDay_FUNC SuspendTimeOfDay_org;
extern SuspendTimeOfDay_FUNC SuspendTimeOfDay_ptr;
extern void _cdecl SuspendTimeOfDay_my(BOOL b);
extern SyncSelections_FUNC SyncSelections_org;
extern SyncSelections_FUNC SyncSelections_ptr;
extern void _cdecl SyncSelections_my();
extern SyncStoredBoolean_FUNC SyncStoredBoolean_org;
extern SyncStoredBoolean_FUNC SyncStoredBoolean_ptr;
extern void _cdecl SyncStoredBoolean_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern SyncStoredInteger_FUNC SyncStoredInteger_org;
extern SyncStoredInteger_FUNC SyncStoredInteger_ptr;
extern void _cdecl SyncStoredInteger_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern SyncStoredReal_FUNC SyncStoredReal_org;
extern SyncStoredReal_FUNC SyncStoredReal_ptr;
extern void _cdecl SyncStoredReal_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern SyncStoredString_FUNC SyncStoredString_org;
extern SyncStoredString_FUNC SyncStoredString_ptr;
extern void _cdecl SyncStoredString_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern SyncStoredUnit_FUNC SyncStoredUnit_org;
extern SyncStoredUnit_FUNC SyncStoredUnit_ptr;
extern void _cdecl SyncStoredUnit_my(HGAMECACHE cache, CJassString missionKey, CJassString key);
extern Tan_FUNC Tan_org;
extern Tan_FUNC Tan_ptr;
extern DWFP _cdecl Tan_my(float *radians);
extern TeleportCaptain_FUNC TeleportCaptain_org;
extern TeleportCaptain_FUNC TeleportCaptain_ptr;
extern void _cdecl TeleportCaptain_my(float *arg1, float *arg2);
extern TerrainDeformCrater_FUNC TerrainDeformCrater_org;
extern TerrainDeformCrater_FUNC TerrainDeformCrater_ptr;
extern HTERRAINDEFORMATION _cdecl TerrainDeformCrater_my(float *x, float *y, float *radius, float *depth, int duration, BOOL permanent);
extern TerrainDeformRandom_FUNC TerrainDeformRandom_org;
extern TerrainDeformRandom_FUNC TerrainDeformRandom_ptr;
extern HTERRAINDEFORMATION _cdecl TerrainDeformRandom_my(float *x, float *y, float *radius, float *minDelta, float *maxDelta, int duration, int updateInterval);
extern TerrainDeformRipple_FUNC TerrainDeformRipple_org;
extern TerrainDeformRipple_FUNC TerrainDeformRipple_ptr;
extern HTERRAINDEFORMATION _cdecl TerrainDeformRipple_my(float *x, float *y, float *radius, float *depth, int duration, int count, float *spaceWaves, float *timeWaves, float *radiusStartPct, BOOL limitNeg);
extern TerrainDeformStop_FUNC TerrainDeformStop_org;
extern TerrainDeformStop_FUNC TerrainDeformStop_ptr;
extern void _cdecl TerrainDeformStop_my(HTERRAINDEFORMATION deformation, int duration);
extern TerrainDeformStopAll_FUNC TerrainDeformStopAll_org;
extern TerrainDeformStopAll_FUNC TerrainDeformStopAll_ptr;
extern void _cdecl TerrainDeformStopAll_my();
extern TerrainDeformWave_FUNC TerrainDeformWave_org;
extern TerrainDeformWave_FUNC TerrainDeformWave_ptr;
extern HTERRAINDEFORMATION _cdecl TerrainDeformWave_my(float *x, float *y, float *dirX, float *dirY, float *distance, float *speed, float *radius, float *depth, int trailTime, int count);
extern TimerDialogDisplay_FUNC TimerDialogDisplay_org;
extern TimerDialogDisplay_FUNC TimerDialogDisplay_ptr;
extern void _cdecl TimerDialogDisplay_my(HTIMERDIALOG Dialog, BOOL display);
extern TimerDialogSetRealTimeRemaining_FUNC TimerDialogSetRealTimeRemaining_org;
extern TimerDialogSetRealTimeRemaining_FUNC TimerDialogSetRealTimeRemaining_ptr;
extern void _cdecl TimerDialogSetRealTimeRemaining_my(HTIMERDIALOG Dialog, float *timeRemaining);
extern TimerDialogSetSpeed_FUNC TimerDialogSetSpeed_org;
extern TimerDialogSetSpeed_FUNC TimerDialogSetSpeed_ptr;
extern void _cdecl TimerDialogSetSpeed_my(HTIMERDIALOG Dialog, float *speedMultFactor);
extern TimerDialogSetTimeColor_FUNC TimerDialogSetTimeColor_org;
extern TimerDialogSetTimeColor_FUNC TimerDialogSetTimeColor_ptr;
extern void _cdecl TimerDialogSetTimeColor_my(HTIMERDIALOG Dialog, int red, int green, int blue, int alpha);
extern TimerDialogSetTitle_FUNC TimerDialogSetTitle_org;
extern TimerDialogSetTitle_FUNC TimerDialogSetTitle_ptr;
extern void _cdecl TimerDialogSetTitle_my(HTIMERDIALOG Dialog, CJassString title);
extern TimerDialogSetTitleColor_FUNC TimerDialogSetTitleColor_org;
extern TimerDialogSetTitleColor_FUNC TimerDialogSetTitleColor_ptr;
extern void _cdecl TimerDialogSetTitleColor_my(HTIMERDIALOG Dialog, int red, int green, int blue, int alpha);
extern TimerGetElapsed_FUNC TimerGetElapsed_org;
extern TimerGetElapsed_FUNC TimerGetElapsed_ptr;
extern DWFP _cdecl TimerGetElapsed_my(HTIMER Timer);
extern TimerGetRemaining_FUNC TimerGetRemaining_org;
extern TimerGetRemaining_FUNC TimerGetRemaining_ptr;
extern DWFP _cdecl TimerGetRemaining_my(HTIMER Timer);
extern TimerGetTimeout_FUNC TimerGetTimeout_org;
extern TimerGetTimeout_FUNC TimerGetTimeout_ptr;
extern DWFP _cdecl TimerGetTimeout_my(HTIMER Timer);
extern TimerStart_FUNC TimerStart_org;
extern TimerStart_FUNC TimerStart_ptr;
extern void _cdecl TimerStart_my(HTIMER Timer, float *timeout, BOOL periodic, CODE handlerFunc);
extern TownHasHall_FUNC TownHasHall_org;
extern TownHasHall_FUNC TownHasHall_ptr;
extern BOOL _cdecl TownHasHall_my(int arg1);
extern TownHasMine_FUNC TownHasMine_org;
extern TownHasMine_FUNC TownHasMine_ptr;
extern BOOL _cdecl TownHasMine_my(int arg1);
extern TownThreatened_FUNC TownThreatened_org;
extern TownThreatened_FUNC TownThreatened_ptr;
extern BOOL _cdecl TownThreatened_my();
extern TownWithMine_FUNC TownWithMine_org;
extern TownWithMine_FUNC TownWithMine_ptr;
extern int _cdecl TownWithMine_my();
extern TriggerAddAction_FUNC TriggerAddAction_org;
extern TriggerAddAction_FUNC TriggerAddAction_ptr;
extern HTRIGGERACTION _cdecl TriggerAddAction_my(HTRIGGER Trigger, CODE actionFunc);
extern TriggerAddCondition_FUNC TriggerAddCondition_org;
extern TriggerAddCondition_FUNC TriggerAddCondition_ptr;
extern HTRIGGERCONDITION _cdecl TriggerAddCondition_my(HTRIGGER Trigger, HBOOLEXPR condition);
extern TriggerClearActions_FUNC TriggerClearActions_org;
extern TriggerClearActions_FUNC TriggerClearActions_ptr;
extern void _cdecl TriggerClearActions_my(HTRIGGER Trigger);
extern TriggerClearConditions_FUNC TriggerClearConditions_org;
extern TriggerClearConditions_FUNC TriggerClearConditions_ptr;
extern void _cdecl TriggerClearConditions_my(HTRIGGER Trigger);
extern TriggerEvaluate_FUNC TriggerEvaluate_org;
extern TriggerEvaluate_FUNC TriggerEvaluate_ptr;
extern BOOL _cdecl TriggerEvaluate_my(HTRIGGER Trigger);
extern TriggerExecute_FUNC TriggerExecute_org;
extern TriggerExecute_FUNC TriggerExecute_ptr;
extern void _cdecl TriggerExecute_my(HTRIGGER Trigger);
extern TriggerExecuteWait_FUNC TriggerExecuteWait_org;
extern TriggerExecuteWait_FUNC TriggerExecuteWait_ptr;
extern void _cdecl TriggerExecuteWait_my(HTRIGGER Trigger);
extern TriggerRegisterDeathEvent_FUNC TriggerRegisterDeathEvent_org;
extern TriggerRegisterDeathEvent_FUNC TriggerRegisterDeathEvent_ptr;
extern HEVENT _cdecl TriggerRegisterDeathEvent_my(HTRIGGER Trigger, HWIDGET widget);
extern TriggerRegisterDialogButtonEvent_FUNC TriggerRegisterDialogButtonEvent_org;
extern TriggerRegisterDialogButtonEvent_FUNC TriggerRegisterDialogButtonEvent_ptr;
extern HEVENT _cdecl TriggerRegisterDialogButtonEvent_my(HTRIGGER Trigger, HBUTTON Button);
extern TriggerRegisterDialogEvent_FUNC TriggerRegisterDialogEvent_org;
extern TriggerRegisterDialogEvent_FUNC TriggerRegisterDialogEvent_ptr;
extern HEVENT _cdecl TriggerRegisterDialogEvent_my(HTRIGGER Trigger, HDIALOG Dialog);
extern TriggerRegisterEnterRegion_FUNC TriggerRegisterEnterRegion_org;
extern TriggerRegisterEnterRegion_FUNC TriggerRegisterEnterRegion_ptr;
extern HEVENT _cdecl TriggerRegisterEnterRegion_my(HTRIGGER Trigger, HREGION Region, HBOOLEXPR filter);
extern TriggerRegisterFilterUnitEvent_FUNC TriggerRegisterFilterUnitEvent_org;
extern TriggerRegisterFilterUnitEvent_FUNC TriggerRegisterFilterUnitEvent_ptr;
extern HEVENT _cdecl TriggerRegisterFilterUnitEvent_my(HTRIGGER Trigger, HUNIT unit, HUNITEVENT Event, HBOOLEXPR filter);
extern TriggerRegisterGameEvent_FUNC TriggerRegisterGameEvent_org;
extern TriggerRegisterGameEvent_FUNC TriggerRegisterGameEvent_ptr;
extern HEVENT _cdecl TriggerRegisterGameEvent_my(HTRIGGER Trigger, HGAMEEVENT GameEvent);
extern TriggerRegisterGameStateEvent_FUNC TriggerRegisterGameStateEvent_org;
extern TriggerRegisterGameStateEvent_FUNC TriggerRegisterGameStateEvent_ptr;
extern HEVENT _cdecl TriggerRegisterGameStateEvent_my(HTRIGGER Trigger, HGAMESTATE State, HLIMITOP opcode, float *limitval);
extern TriggerRegisterLeaveRegion_FUNC TriggerRegisterLeaveRegion_org;
extern TriggerRegisterLeaveRegion_FUNC TriggerRegisterLeaveRegion_ptr;
extern HEVENT _cdecl TriggerRegisterLeaveRegion_my(HTRIGGER Trigger, HREGION Region, HBOOLEXPR filter);
extern TriggerRegisterPlayerAllianceChange_FUNC TriggerRegisterPlayerAllianceChange_org;
extern TriggerRegisterPlayerAllianceChange_FUNC TriggerRegisterPlayerAllianceChange_ptr;
extern HEVENT _cdecl TriggerRegisterPlayerAllianceChange_my(HTRIGGER Trigger, HPLAYER player, HALLIANCETYPE Alliance);
extern TriggerRegisterPlayerChatEvent_FUNC TriggerRegisterPlayerChatEvent_org;
extern TriggerRegisterPlayerChatEvent_FUNC TriggerRegisterPlayerChatEvent_ptr;
extern HEVENT _cdecl TriggerRegisterPlayerChatEvent_my(HTRIGGER Trigger, HPLAYER player, CJassString chatMessageToDetect, BOOL exactMatchOnly);
extern TriggerRegisterPlayerEvent_FUNC TriggerRegisterPlayerEvent_org;
extern TriggerRegisterPlayerEvent_FUNC TriggerRegisterPlayerEvent_ptr;
extern HEVENT _cdecl TriggerRegisterPlayerEvent_my(HTRIGGER Trigger, HPLAYER player, HPLAYEREVENT PlayerEvent);
extern TriggerRegisterPlayerStateEvent_FUNC TriggerRegisterPlayerStateEvent_org;
extern TriggerRegisterPlayerStateEvent_FUNC TriggerRegisterPlayerStateEvent_ptr;
extern HEVENT _cdecl TriggerRegisterPlayerStateEvent_my(HTRIGGER Trigger, HPLAYER player, HPLAYERSTATE State, HLIMITOP opcode, float *limitval);
extern TriggerRegisterPlayerUnitEvent_FUNC TriggerRegisterPlayerUnitEvent_org;
extern TriggerRegisterPlayerUnitEvent_FUNC TriggerRegisterPlayerUnitEvent_ptr;
extern HEVENT _cdecl TriggerRegisterPlayerUnitEvent_my(HTRIGGER Trigger, HPLAYER player, HPLAYERUNITEVENT PlayerUnitEvent, HBOOLEXPR filter);
extern TriggerRegisterTimerEvent_FUNC TriggerRegisterTimerEvent_org;
extern TriggerRegisterTimerEvent_FUNC TriggerRegisterTimerEvent_ptr;
extern HEVENT _cdecl TriggerRegisterTimerEvent_my(HTRIGGER Trigger, float *timeout, BOOL periodic);
extern TriggerRegisterTimerExpireEvent_FUNC TriggerRegisterTimerExpireEvent_org;
extern TriggerRegisterTimerExpireEvent_FUNC TriggerRegisterTimerExpireEvent_ptr;
extern HEVENT _cdecl TriggerRegisterTimerExpireEvent_my(HTRIGGER Trigger, HTIMER t);
extern TriggerRegisterTrackableHitEvent_FUNC TriggerRegisterTrackableHitEvent_org;
extern TriggerRegisterTrackableHitEvent_FUNC TriggerRegisterTrackableHitEvent_ptr;
extern HEVENT _cdecl TriggerRegisterTrackableHitEvent_my(HTRIGGER Trigger, HTRACKABLE t);
extern TriggerRegisterTrackableTrackEvent_FUNC TriggerRegisterTrackableTrackEvent_org;
extern TriggerRegisterTrackableTrackEvent_FUNC TriggerRegisterTrackableTrackEvent_ptr;
extern HEVENT _cdecl TriggerRegisterTrackableTrackEvent_my(HTRIGGER Trigger, HTRACKABLE t);
extern TriggerRegisterUnitEvent_FUNC TriggerRegisterUnitEvent_org;
extern TriggerRegisterUnitEvent_FUNC TriggerRegisterUnitEvent_ptr;
extern HEVENT _cdecl TriggerRegisterUnitEvent_my(HTRIGGER Trigger, HUNIT unit, HUNITEVENT Event);
extern TriggerRegisterUnitInRange_FUNC TriggerRegisterUnitInRange_org;
extern TriggerRegisterUnitInRange_FUNC TriggerRegisterUnitInRange_ptr;
extern HEVENT _cdecl TriggerRegisterUnitInRange_my(HTRIGGER Trigger, HUNIT unit, float *range, HBOOLEXPR filter);
extern TriggerRegisterUnitStateEvent_FUNC TriggerRegisterUnitStateEvent_org;
extern TriggerRegisterUnitStateEvent_FUNC TriggerRegisterUnitStateEvent_ptr;
extern HEVENT _cdecl TriggerRegisterUnitStateEvent_my(HTRIGGER Trigger, HUNIT unit, HUNITSTATE State, HLIMITOP opcode, float *limitval);
extern TriggerRegisterVariableEvent_FUNC TriggerRegisterVariableEvent_org;
extern TriggerRegisterVariableEvent_FUNC TriggerRegisterVariableEvent_ptr;
extern HEVENT _cdecl TriggerRegisterVariableEvent_my(HTRIGGER Trigger, CJassString varName, HLIMITOP opcode, float *limitval);
extern TriggerRemoveAction_FUNC TriggerRemoveAction_org;
extern TriggerRemoveAction_FUNC TriggerRemoveAction_ptr;
extern void _cdecl TriggerRemoveAction_my(HTRIGGER Trigger, HTRIGGERACTION Action);
extern TriggerRemoveCondition_FUNC TriggerRemoveCondition_org;
extern TriggerRemoveCondition_FUNC TriggerRemoveCondition_ptr;
extern void _cdecl TriggerRemoveCondition_my(HTRIGGER Trigger, HTRIGGERCONDITION Condition);
extern TriggerSleepAction_FUNC TriggerSleepAction_org;
extern TriggerSleepAction_FUNC TriggerSleepAction_ptr;
extern void _cdecl TriggerSleepAction_my(float *timeout);
extern TriggerSyncReady_FUNC TriggerSyncReady_org;
extern TriggerSyncReady_FUNC TriggerSyncReady_ptr;
extern void _cdecl TriggerSyncReady_my();
extern TriggerSyncStart_FUNC TriggerSyncStart_org;
extern TriggerSyncStart_FUNC TriggerSyncStart_ptr;
extern void _cdecl TriggerSyncStart_my();
extern TriggerWaitForSound_FUNC TriggerWaitForSound_org;
extern TriggerWaitForSound_FUNC TriggerWaitForSound_ptr;
extern void _cdecl TriggerWaitForSound_my(HSOUND s, float *offset);
extern TriggerWaitOnSleeps_FUNC TriggerWaitOnSleeps_org;
extern TriggerWaitOnSleeps_FUNC TriggerWaitOnSleeps_ptr;
extern void _cdecl TriggerWaitOnSleeps_my(HTRIGGER Trigger, BOOL flag);
extern UnitAddAbility_FUNC UnitAddAbility_org;
extern UnitAddAbility_FUNC UnitAddAbility_ptr;
extern BOOL _cdecl UnitAddAbility_my(HUNIT unit, int AbilID);
extern UnitAddIndicator_FUNC UnitAddIndicator_org;
extern UnitAddIndicator_FUNC UnitAddIndicator_ptr;
extern void _cdecl UnitAddIndicator_my(HUNIT unit, int red, int green, int blue, int alpha);
extern UnitAddItem_FUNC UnitAddItem_org;
extern UnitAddItem_FUNC UnitAddItem_ptr;
extern BOOL _cdecl UnitAddItem_my(HUNIT unit, HITEM item);
extern UnitAddItemById_FUNC UnitAddItemById_org;
extern UnitAddItemById_FUNC UnitAddItemById_ptr;
extern HITEM _cdecl UnitAddItemById_my(HUNIT unit, int itemId);
extern UnitAddItemToSlotById_FUNC UnitAddItemToSlotById_org;
extern UnitAddItemToSlotById_FUNC UnitAddItemToSlotById_ptr;
extern BOOL _cdecl UnitAddItemToSlotById_my(HUNIT unit, int itemId, int itemSlot);
extern UnitAddSleep_FUNC UnitAddSleep_org;
extern UnitAddSleep_FUNC UnitAddSleep_ptr;
extern void _cdecl UnitAddSleep_my(HUNIT unit, BOOL add);
extern UnitAddSleepPerm_FUNC UnitAddSleepPerm_org;
extern UnitAddSleepPerm_FUNC UnitAddSleepPerm_ptr;
extern void _cdecl UnitAddSleepPerm_my(HUNIT unit, BOOL add);
extern UnitAddType_FUNC UnitAddType_org;
extern UnitAddType_FUNC UnitAddType_ptr;
extern BOOL _cdecl UnitAddType_my(HUNIT unit, HUNITTYPE UnitType);
extern UnitAlive_FUNC UnitAlive_org;
extern UnitAlive_FUNC UnitAlive_ptr;
extern BOOL _cdecl UnitAlive_my(HUNIT arg1);
extern UnitApplyTimedLife_FUNC UnitApplyTimedLife_org;
extern UnitApplyTimedLife_FUNC UnitApplyTimedLife_ptr;
extern void _cdecl UnitApplyTimedLife_my(HUNIT unit, int buffId, float *duration);
extern UnitCanSleep_FUNC UnitCanSleep_org;
extern UnitCanSleep_FUNC UnitCanSleep_ptr;
extern BOOL _cdecl UnitCanSleep_my(HUNIT unit);
extern UnitCanSleepPerm_FUNC UnitCanSleepPerm_org;
extern UnitCanSleepPerm_FUNC UnitCanSleepPerm_ptr;
extern BOOL _cdecl UnitCanSleepPerm_my(HUNIT unit);
extern UnitCountBuffsEx_FUNC UnitCountBuffsEx_org;
extern UnitCountBuffsEx_FUNC UnitCountBuffsEx_ptr;
extern int _cdecl UnitCountBuffsEx_my(HUNIT unit, BOOL removePositive, BOOL removeNegative, BOOL magic, BOOL physical, BOOL timedLife, BOOL aura, BOOL autoDispel);
extern UnitDamagePoint_FUNC UnitDamagePoint_org;
extern UnitDamagePoint_FUNC UnitDamagePoint_ptr;
extern BOOL _cdecl UnitDamagePoint_my(HUNIT unit, float *delay, float *radius, float *x, float *y, float *amount, BOOL attack, BOOL ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
extern UnitDamageTarget_FUNC UnitDamageTarget_org;
extern UnitDamageTarget_FUNC UnitDamageTarget_ptr;
extern BOOL _cdecl UnitDamageTarget_my(HUNIT unit, HWIDGET target, float *amount, BOOL attack, BOOL ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
extern UnitDropItemPoint_FUNC UnitDropItemPoint_org;
extern UnitDropItemPoint_FUNC UnitDropItemPoint_ptr;
extern BOOL _cdecl UnitDropItemPoint_my(HUNIT unit, HITEM item, float *x, float *y);
extern UnitDropItemSlot_FUNC UnitDropItemSlot_org;
extern UnitDropItemSlot_FUNC UnitDropItemSlot_ptr;
extern BOOL _cdecl UnitDropItemSlot_my(HUNIT unit, HITEM item, int slot);
extern UnitDropItemTarget_FUNC UnitDropItemTarget_org;
extern UnitDropItemTarget_FUNC UnitDropItemTarget_ptr;
extern BOOL _cdecl UnitDropItemTarget_my(HUNIT unit, HITEM item, HWIDGET target);
extern UnitHasBuffsEx_FUNC UnitHasBuffsEx_org;
extern UnitHasBuffsEx_FUNC UnitHasBuffsEx_ptr;
extern BOOL _cdecl UnitHasBuffsEx_my(HUNIT unit, BOOL removePositive, BOOL removeNegative, BOOL magic, BOOL physical, BOOL timedLife, BOOL aura, BOOL autoDispel);
extern UnitHasItem_FUNC UnitHasItem_org;
extern UnitHasItem_FUNC UnitHasItem_ptr;
extern BOOL _cdecl UnitHasItem_my(HUNIT unit, HITEM item);
extern UnitId_FUNC UnitId_org;
extern UnitId_FUNC UnitId_ptr;
extern int _cdecl UnitId_my(CJassString unitIdString);
extern UnitId2String_FUNC UnitId2String_org;
extern UnitId2String_FUNC UnitId2String_ptr;
extern CJassStringSID _cdecl UnitId2String_my(int unitId);
extern UnitIgnoreAlarm_FUNC UnitIgnoreAlarm_org;
extern UnitIgnoreAlarm_FUNC UnitIgnoreAlarm_ptr;
extern BOOL _cdecl UnitIgnoreAlarm_my(HUNIT unit, BOOL flag);
extern UnitIgnoreAlarmToggled_FUNC UnitIgnoreAlarmToggled_org;
extern UnitIgnoreAlarmToggled_FUNC UnitIgnoreAlarmToggled_ptr;
extern BOOL _cdecl UnitIgnoreAlarmToggled_my(HUNIT unit);
extern UnitInventorySize_FUNC UnitInventorySize_org;
extern UnitInventorySize_FUNC UnitInventorySize_ptr;
extern int _cdecl UnitInventorySize_my(HUNIT unit);
extern UnitInvis_FUNC UnitInvis_org;
extern UnitInvis_FUNC UnitInvis_ptr;
extern BOOL _cdecl UnitInvis_my(HUNIT arg1);
extern UnitIsSleeping_FUNC UnitIsSleeping_org;
extern UnitIsSleeping_FUNC UnitIsSleeping_ptr;
extern BOOL _cdecl UnitIsSleeping_my(HUNIT unit);
extern UnitItemInSlot_FUNC UnitItemInSlot_org;
extern UnitItemInSlot_FUNC UnitItemInSlot_ptr;
extern HITEM _cdecl UnitItemInSlot_my(HUNIT unit, int itemSlot);
extern UnitMakeAbilityPermanent_FUNC UnitMakeAbilityPermanent_org;
extern UnitMakeAbilityPermanent_FUNC UnitMakeAbilityPermanent_ptr;
extern BOOL _cdecl UnitMakeAbilityPermanent_my(HUNIT unit, BOOL permanent, int AbilID);
extern UnitModifySkillPoints_FUNC UnitModifySkillPoints_org;
extern UnitModifySkillPoints_FUNC UnitModifySkillPoints_ptr;
extern BOOL _cdecl UnitModifySkillPoints_my(HUNIT hero, int skillPointDelta);
extern UnitPauseTimedLife_FUNC UnitPauseTimedLife_org;
extern UnitPauseTimedLife_FUNC UnitPauseTimedLife_ptr;
extern void _cdecl UnitPauseTimedLife_my(HUNIT unit, BOOL flag);
extern UnitPoolAddUnitType_FUNC UnitPoolAddUnitType_org;
extern UnitPoolAddUnitType_FUNC UnitPoolAddUnitType_ptr;
extern void _cdecl UnitPoolAddUnitType_my(HUNITPOOL Pool, int unitId, float *weight);
extern UnitPoolRemoveUnitType_FUNC UnitPoolRemoveUnitType_org;
extern UnitPoolRemoveUnitType_FUNC UnitPoolRemoveUnitType_ptr;
extern void _cdecl UnitPoolRemoveUnitType_my(HUNITPOOL Pool, int unitId);
extern UnitRemoveAbility_FUNC UnitRemoveAbility_org;
extern UnitRemoveAbility_FUNC UnitRemoveAbility_ptr;
extern BOOL _cdecl UnitRemoveAbility_my(HUNIT unit, int AbilID);
extern UnitRemoveBuffs_FUNC UnitRemoveBuffs_org;
extern UnitRemoveBuffs_FUNC UnitRemoveBuffs_ptr;
extern void _cdecl UnitRemoveBuffs_my(HUNIT unit, BOOL removePositive, BOOL removeNegative);
extern UnitRemoveBuffsEx_FUNC UnitRemoveBuffsEx_org;
extern UnitRemoveBuffsEx_FUNC UnitRemoveBuffsEx_ptr;
extern void _cdecl UnitRemoveBuffsEx_my(HUNIT unit, BOOL removePositive, BOOL removeNegative, BOOL magic, BOOL physical, BOOL timedLife, BOOL aura, BOOL autoDispel);
extern UnitRemoveItem_FUNC UnitRemoveItem_org;
extern UnitRemoveItem_FUNC UnitRemoveItem_ptr;
extern void _cdecl UnitRemoveItem_my(HUNIT unit, HITEM item);
extern UnitRemoveItemFromSlot_FUNC UnitRemoveItemFromSlot_org;
extern UnitRemoveItemFromSlot_FUNC UnitRemoveItemFromSlot_ptr;
extern HITEM _cdecl UnitRemoveItemFromSlot_my(HUNIT unit, int itemSlot);
extern UnitRemoveType_FUNC UnitRemoveType_org;
extern UnitRemoveType_FUNC UnitRemoveType_ptr;
extern BOOL _cdecl UnitRemoveType_my(HUNIT unit, HUNITTYPE UnitType);
extern UnitResetCooldown_FUNC UnitResetCooldown_org;
extern UnitResetCooldown_FUNC UnitResetCooldown_ptr;
extern void _cdecl UnitResetCooldown_my(HUNIT unit);
extern UnitSetConstructionProgress_FUNC UnitSetConstructionProgress_org;
extern UnitSetConstructionProgress_FUNC UnitSetConstructionProgress_ptr;
extern void _cdecl UnitSetConstructionProgress_my(HUNIT unit, int constructionPercentage);
extern UnitSetUpgradeProgress_FUNC UnitSetUpgradeProgress_org;
extern UnitSetUpgradeProgress_FUNC UnitSetUpgradeProgress_ptr;
extern void _cdecl UnitSetUpgradeProgress_my(HUNIT unit, int upgradePercentage);
extern UnitSetUsesAltIcon_FUNC UnitSetUsesAltIcon_org;
extern UnitSetUsesAltIcon_FUNC UnitSetUsesAltIcon_ptr;
extern void _cdecl UnitSetUsesAltIcon_my(HUNIT unit, BOOL flag);
extern UnitShareVision_FUNC UnitShareVision_org;
extern UnitShareVision_FUNC UnitShareVision_ptr;
extern void _cdecl UnitShareVision_my(HUNIT unit, HPLAYER player, BOOL share);
extern UnitStripHeroLevel_FUNC UnitStripHeroLevel_org;
extern UnitStripHeroLevel_FUNC UnitStripHeroLevel_ptr;
extern BOOL _cdecl UnitStripHeroLevel_my(HUNIT hero, int howManyLevels);
extern UnitSuspendDecay_FUNC UnitSuspendDecay_org;
extern UnitSuspendDecay_FUNC UnitSuspendDecay_ptr;
extern void _cdecl UnitSuspendDecay_my(HUNIT unit, BOOL suspend);
extern UnitUseItem_FUNC UnitUseItem_org;
extern UnitUseItem_FUNC UnitUseItem_ptr;
extern BOOL _cdecl UnitUseItem_my(HUNIT unit, HITEM item);
extern UnitUseItemPoint_FUNC UnitUseItemPoint_org;
extern UnitUseItemPoint_FUNC UnitUseItemPoint_ptr;
extern BOOL _cdecl UnitUseItemPoint_my(HUNIT unit, HITEM item, float *x, float *y);
extern UnitUseItemTarget_FUNC UnitUseItemTarget_org;
extern UnitUseItemTarget_FUNC UnitUseItemTarget_ptr;
extern BOOL _cdecl UnitUseItemTarget_my(HUNIT unit, HITEM item, HWIDGET target);
extern UnitWakeUp_FUNC UnitWakeUp_org;
extern UnitWakeUp_FUNC UnitWakeUp_ptr;
extern void _cdecl UnitWakeUp_my(HUNIT unit);
extern UnregisterStackedSound_FUNC UnregisterStackedSound_org;
extern UnregisterStackedSound_FUNC UnregisterStackedSound_ptr;
extern void _cdecl UnregisterStackedSound_my(HSOUND soundHandle, BOOL byPosition, float *rectwidth, float *rectheight);
extern Unsummon_FUNC Unsummon_org;
extern Unsummon_FUNC Unsummon_ptr;
extern void _cdecl Unsummon_my(HUNIT arg1);
extern VersionCompatible_FUNC VersionCompatible_org;
extern VersionCompatible_FUNC VersionCompatible_ptr;
extern BOOL _cdecl VersionCompatible_my(HVERSION Version);
extern VersionGet_FUNC VersionGet_org;
extern VersionGet_FUNC VersionGet_ptr;
extern HVERSION _cdecl VersionGet_my();
extern VersionSupported_FUNC VersionSupported_org;
extern VersionSupported_FUNC VersionSupported_ptr;
extern BOOL _cdecl VersionSupported_my(HVERSION Version);
extern VolumeGroupReset_FUNC VolumeGroupReset_org;
extern VolumeGroupReset_FUNC VolumeGroupReset_ptr;
extern void _cdecl VolumeGroupReset_my();
extern VolumeGroupSetVolume_FUNC VolumeGroupSetVolume_org;
extern VolumeGroupSetVolume_FUNC VolumeGroupSetVolume_ptr;
extern void _cdecl VolumeGroupSetVolume_my(HVOLUMEGROUP vgroup, float *scale);
extern WaitGetEnemyBase_FUNC WaitGetEnemyBase_org;
extern WaitGetEnemyBase_FUNC WaitGetEnemyBase_ptr;
extern BOOL _cdecl WaitGetEnemyBase_my();
extern WaygateActivate_FUNC WaygateActivate_org;
extern WaygateActivate_FUNC WaygateActivate_ptr;
extern void _cdecl WaygateActivate_my(HUNIT waygate, BOOL activate);
extern WaygateGetDestinationX_FUNC WaygateGetDestinationX_org;
extern WaygateGetDestinationX_FUNC WaygateGetDestinationX_ptr;
extern DWFP _cdecl WaygateGetDestinationX_my(HUNIT waygate);
extern WaygateGetDestinationY_FUNC WaygateGetDestinationY_org;
extern WaygateGetDestinationY_FUNC WaygateGetDestinationY_ptr;
extern DWFP _cdecl WaygateGetDestinationY_my(HUNIT waygate);
extern WaygateIsActive_FUNC WaygateIsActive_org;
extern WaygateIsActive_FUNC WaygateIsActive_ptr;
extern BOOL _cdecl WaygateIsActive_my(HUNIT waygate);
extern WaygateSetDestination_FUNC WaygateSetDestination_org;
extern WaygateSetDestination_FUNC WaygateSetDestination_ptr;
extern void _cdecl WaygateSetDestination_my(HUNIT waygate, float *x, float *y);
